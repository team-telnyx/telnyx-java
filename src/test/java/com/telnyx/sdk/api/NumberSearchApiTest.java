/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.ApiClient;
import com.telnyx.sdk.ApiException;
import com.telnyx.sdk.Configuration;
import com.telnyx.sdk.auth.HttpBearerAuth;
import com.telnyx.sdk.model.ListAvailablePhoneNumbersResponse;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;

/**
 * API tests for NumberSearchApi
 */
public class NumberSearchApiTest {

    private final NumberSearchApi api = new NumberSearchApi();

    @Before
    public void setup() {
        ApiClient defaultClient = Configuration.getDefaultApiClient();
        defaultClient.setBasePath(TestConfiguration.MOCK_SERVER_URL);

        HttpBearerAuth bearerAuth = (HttpBearerAuth) defaultClient.getAuthentication("bearerAuth");
        bearerAuth.setBearerToken(TestConfiguration.API_KEY);
    }

    /**
     * List available phone numbers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailablePhoneNumbers_whenFilterCriteriaExists_returnsAvailableNumbers() throws ApiException {
        ListAvailablePhoneNumbersResponse actualResponse = api.listAvailablePhoneNumbers()
                .filterLocality("Chicago")
                .filterAdministrativeArea("IL")
                .filterCountryCode("US")
                .filterLimit(2)
                .execute();

        assertNotNull(actualResponse.getData());
    }

    /**
     * Search for available phone numbers in the US
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePhoneNumbers_whenFilteringForUSPhoneNumbers_returnsAvailableNumbers() throws ApiException {
        String countryCode = "US";

        ListAvailablePhoneNumbersResponse actualResponse = api.listAvailablePhoneNumbers()
                .filterCountryCode(countryCode)
                .execute();

        assertNotNull(actualResponse);
        assertFalse(actualResponse.getData().isEmpty());
    }

    /**
     * Search for available phone numbers by area code
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePhoneNumbers_whenFilteringByAreaCode_returnsAvailableNumbers() throws ApiException {
        String areaCode = "IL";

        ListAvailablePhoneNumbersResponse actualResponse = api.listAvailablePhoneNumbers()
                .filterAdministrativeArea(areaCode)
                .execute();

        assertNotNull(actualResponse);
        assertFalse(actualResponse.getData().isEmpty());
    }

    /**
     * Search for available phone numbers in Canada
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePhoneNumbers_whenFilteringForCanadaPhoneNumbers_returnsAvailableNumbers() throws ApiException {
        String countryCode = "CA";

        ListAvailablePhoneNumbersResponse actualResponse = api.listAvailablePhoneNumbers()
                .filterCountryCode(countryCode)
                .execute();

        assertNotNull(actualResponse);
        assertFalse(actualResponse.getData().isEmpty());
    }

    /**
     * Search for available phone numbers in Spain
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePhoneNumbers_whenFilteringForSpainPhoneNumbers_returnsAvailableNumbers() throws ApiException {
        String countryCode = "ES";

        ListAvailablePhoneNumbersResponse actualResponse = api.listAvailablePhoneNumbers()
                .filterCountryCode(countryCode)
                .execute();

        assertNotNull(actualResponse);
        assertFalse(actualResponse.getData().isEmpty());
    }

    /**
     * Search for available phone numbers beginning with 22
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePhoneNumbers_whenFilteringByNumbersStartingWith22_returnsAvailableNumbers() throws ApiException {
        String startsWith = "22";

        ListAvailablePhoneNumbersResponse actualResponse = api.listAvailablePhoneNumbers()
                .filterPhoneNumberStartsWith(startsWith)
                .execute();

        assertNotNull(actualResponse);
        assertFalse(actualResponse.getData().isEmpty());
    }


    /**
     * Search for 100 available phone numbers in Chicago
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailablePhoneNumbers_whenFilteringFor100PhoneNumbersInChicago_returnsAvailableNumbers() throws ApiException {
        String city = "chi";
        int limit = 100;

        ListAvailablePhoneNumbersResponse actualResponse = api.listAvailablePhoneNumbers()
                    .filterLocality(city)
                    .filterLimit(limit)
                    .execute();

        assertNotNull(actualResponse);
        assertFalse(actualResponse.getData().isEmpty());
    }
}
