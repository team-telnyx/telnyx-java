/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.CreateCommentPortoutRequest;
import com.telnyx.sdk.model.CreatePortOutSupportingDocumentsResponse;
import com.telnyx.sdk.model.CreatePortingSupportingDocsRequest;
import com.telnyx.sdk.model.ListPortoutComments;
import com.telnyx.sdk.model.ListPortoutResponse;
import com.telnyx.sdk.model.PortOutListSupportingDocumentsResponse;
import com.telnyx.sdk.model.PortoutCommentResposne;
import com.telnyx.sdk.model.PortoutResponse;
import com.telnyx.sdk.model.UpdatePortoutStatusRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for NumberPortoutApi
 */
public class NumberPortoutApiTest {

    private final NumberPortoutApi api = new NumberPortoutApi();

    /**
     * List all comments for a portout request
     *
     * Returns a list of comments for a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPortoutCommentsTest() throws ApiException {
        //UUID id = null;
        //ListPortoutComments response = api.findPortoutComments(id);
        // TODO: test validations
    }

    /**
     * Get a portout request
     *
     * Returns the portout request based on the ID provided
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPortoutRequestTest() throws ApiException {
        //UUID id = null;
        //PortoutResponse response = api.findPortoutRequest(id);
        // TODO: test validations
    }

    /**
     * List supporting documents on a portout request
     *
     * List every supporting documents for a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortRequestSupportingDocumentsTest() throws ApiException {
        //UUID id = null;
        //PortOutListSupportingDocumentsResponse response = api.getPortRequestSupportingDocuments(id);
        // TODO: test validations
    }

    /**
     * List portout requests
     *
     * Returns the portout requests according to filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortoutRequestTest() throws ApiException {
        //String filterCarrierName = null;
        //String filterSpid = null;
        //String filterStatus = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListPortoutResponse response = api.listPortoutRequest(filterCarrierName, filterSpid, filterStatus, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * Create a comment on a portout request
     *
     * Creates a comment on a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortRequestCommentTest() throws ApiException {
        //UUID id = null;
        //CreateCommentPortoutRequest createCommentPortoutRequest = null;
        //PortoutCommentResposne response = api.postPortRequestComment(id, createCommentPortoutRequest);
        // TODO: test validations
    }

    /**
     * Create a list of supporting documents on a portout request
     *
     * Creates a list of supporting documents on a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortRequestSupportingDocumentsTest() throws ApiException {
        //UUID id = null;
        //CreatePortingSupportingDocsRequest createPortingSupportingDocsRequest = null;
        //CreatePortOutSupportingDocumentsResponse response = api.postPortRequestSupportingDocuments(id, createPortingSupportingDocsRequest);
        // TODO: test validations
    }

    /**
     * Update Status
     *
     * Authorize or reject portout request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortoutRequestTest() throws ApiException {
        //UUID id = null;
        //String status = null;
        //UpdatePortoutStatusRequest updatePortoutStatusRequest = null;
        //PortoutResponse response = api.updatePortoutRequest(id, status, updatePortoutStatusRequest);
        // TODO: test validations
    }
}
