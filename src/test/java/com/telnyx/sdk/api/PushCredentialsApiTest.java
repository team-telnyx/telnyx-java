/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.Errors;
import java.time.LocalDate;
import com.telnyx.sdk.model.PushCredentialResponse;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PushCredentialsApi
 */
public class PushCredentialsApiTest {

    private final PushCredentialsApi api = new PushCredentialsApi();

    /**
     * Deletes a push credential
     *
     * Deletes a push credential based on the given &#x60;id&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePushCredentialnByIdTest() throws ApiException {
        //UUID pushCredentialId = null;
        //api.deletePushCredentialnById(pushCredentialId);
        // TODO: test validations
    }

    /**
     * Retrieves a push credential
     *
     * Retrieves push credential based on the given &#x60;id&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPushCredentialByIdTest() throws ApiException {
        //UUID pushCredentialId = null;
        //PushCredentialResponse response = api.getPushCredentialById(pushCredentialId);
        // TODO: test validations
    }

    /**
     * Retrieves push credentials associated to a mobile application
     *
     * Retrieves push credentials for a given mobile application based on filters for a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPushCredentialsTest() throws ApiException {
        //UUID mobileApplicationId = null;
        //LocalDate filterCreatedAtEq = null;
        //LocalDate filterCreatedAtGte = null;
        //LocalDate filterCreatedAtLte = null;
        //String filterAlias = null;
        //List<PushCredentialResponse> response = api.getPushCredentials(mobileApplicationId, filterCreatedAtEq, filterCreatedAtGte, filterCreatedAtLte, filterAlias);
        // TODO: test validations
    }

    /**
     * Updates a push credential
     *
     * Updates a push credential based on the given &#x60;id&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePushCredentialByIdTest() throws ApiException {
        //UUID pushCredentialId = null;
        //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        //PushCredentialResponse response = api.updatePushCredentialById(pushCredentialId, UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }

}
