/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.MdrDeleteUsageReportsResponse;
import com.telnyx.sdk.model.MdrGetSyncUsageReportResponse;
import com.telnyx.sdk.model.MdrGetUsageReportsByIdResponse;
import com.telnyx.sdk.model.MdrGetUsageReportsResponse;
import com.telnyx.sdk.model.MdrPostUsageReportRequest;
import com.telnyx.sdk.model.MdrPostUsageReportsResponse;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for MdrUsageReportsApi
 */
public class MdrUsageReportsApiTest {

    private final MdrUsageReportsApi api = new MdrUsageReportsApi();

    /**
     *
     *
     * Delete messaging usage report by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsageReportTest() throws ApiException {
        //UUID id = null;
        //MdrDeleteUsageReportsResponse response = api.deleteUsageReport(id);
        // TODO: test validations
    }

    /**
     *
     *
     * Fetch a single messaging usage report by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageReportTest() throws ApiException {
        //UUID id = null;
        //MdrGetUsageReportsByIdResponse response = api.getUsageReport(id);
        // TODO: test validations
    }

    /**
     *
     *
     * Generate and fetch messaging usage report synchronously. This endpoint will both generate and fetch the messaging report over a specified time period. No polling is necessary but the response may take up to a couple of minutes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageReportSync1Test() throws ApiException {
        //String aggregationType = null;
        //OffsetDateTime startDate = null;
        //OffsetDateTime endDate = null;
        //List<String> profiles = null;
        //MdrGetSyncUsageReportResponse response = api.getUsageReportSync1(aggregationType, startDate, endDate, profiles);
        // TODO: test validations
    }

    /**
     *
     *
     * Fetch all messaging usage reports. Usage reports are aggregated messaging data for specified time period and breakdown
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageReportsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //MdrGetUsageReportsResponse response = api.getUsageReports(pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     *
     *
     * Submit request for new new messaging usage report. This endpoint will pull and aggregate messaging data in specified time period.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitUsageReportTest() throws ApiException {
        //MdrPostUsageReportRequest mdrPostUsageReportRequest = null;
        //MdrPostUsageReportsResponse response = api.submitUsageReport(mdrPostUsageReportRequest);
        // TODO: test validations
    }
}
