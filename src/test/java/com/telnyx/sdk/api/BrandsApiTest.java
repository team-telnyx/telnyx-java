/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.BrandFeedback;
import com.telnyx.sdk.model.BrandRecordSetCSP;
import com.telnyx.sdk.model.CreateBrand;
import com.telnyx.sdk.model.ExternalVetting;
import com.telnyx.sdk.model.HTTPValidationError;
import com.telnyx.sdk.model.ImportExternalVetting;
import com.telnyx.sdk.model.OrderExternalVetting;
import com.telnyx.sdk.model.TelnyxBrand;
import com.telnyx.sdk.model.TelnyxBrandWithCampaignsCount;
import com.telnyx.sdk.model.UpdateBrand;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for BrandsApi
 */
public class BrandsApiTest {

    private final BrandsApi api = new BrandsApi();

    /**
     * Create Brand
     *
     * This endpoint is used to create a new brand. A brand is an entity created by The Campaign Registry (TCR) that represents an organization or a company. It is this entity that TCR created campaigns will be associated with. Each brand creation will entail an upfront, non-refundable $4 expense.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBrandPostTest() throws ApiException {
        //CreateBrand createBrand = null;
        //TelnyxBrand response = api.createBrandPost(createBrand);
        // TODO: test validations
    }

    /**
     * Delete Brand
     *
     * Delete Brand. This endpoint is used to delete a brand. Note the brand cannot be deleted if it contains one or more active campaigns, the campaigns need to be inactive and at least 3 months old due to billing purposes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBrandTest() throws ApiException {
        //String brandId = null;
        //Object response = api.deleteBrand(brandId);
        // TODO: test validations
    }

    /**
     * Get Brand
     *
     * Retrieve a brand by &#x60;brandId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrandTest() throws ApiException {
        //String brandId = null;
        //TelnyxBrandWithCampaignsCount response = api.getBrand(brandId);
        // TODO: test validations
    }

    /**
     * Get Brand Feedback By Id
     *
     * Get feedback about a brand by ID. This endpoint can be used after creating or revetting a brand.  Possible values for &#x60;.category[].id&#x60;:  * &#x60;TAX_ID&#x60; - Data mismatch related to tax id and its associated properties. * &#x60;STOCK_SYMBOL&#x60; - Non public entity registered as a public for profit entity or   the stock information mismatch. * &#x60;GOVERNMENT_ENTITY&#x60; - Non government entity registered as a government entity.   Must be a U.S. government entity. * &#x60;NONPROFIT&#x60; - Not a recognized non-profit entity. No IRS tax-exempt status   found. * &#x60;OTHERS&#x60; - Details of the data misrepresentation if any.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrandFeedbackByIdTest() throws ApiException {
        //String brandId = null;
        //BrandFeedback response = api.getBrandFeedbackById(brandId);
        // TODO: test validations
    }

    /**
     * List Brands
     *
     * This endpoint is used to list all brands associated with your organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBrandsTest() throws ApiException {
        //Integer page = null;
        //Integer recordsPerPage = null;
        //String sort = null;
        //String displayName = null;
        //String entityType = null;
        //String state = null;
        //String country = null;
        //String brandId = null;
        //String tcrBrandId = null;
        //BrandRecordSetCSP response = api.getBrands(page, recordsPerPage, sort, displayName, entityType, state, country, brandId, tcrBrandId);
        // TODO: test validations
    }

    /**
     * List External Vettings
     *
     * Get list of valid external vetting record for a given brand
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExternalVettingsTest() throws ApiException {
        //String brandId = null;
        //Object response = api.listExternalVettings(brandId);
        // TODO: test validations
    }

    /**
     * Order Brand External Vetting
     *
     * Order new external vetting for a brand
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postOrderExternalVettingTest() throws ApiException {
        //String brandId = null;
        //OrderExternalVetting orderExternalVetting = null;
        //Object response = api.postOrderExternalVetting(brandId, orderExternalVetting);
        // TODO: test validations
    }

    /**
     * Import External Vetting Record
     *
     * This operation can be used to import an external vetting record from a TCR-approved vetting provider. If the vetting provider confirms validity of the record, it will be saved with the brand and will be considered for future campaign qualification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExternalVettingRecordTest() throws ApiException {
        //String brandId = null;
        //ImportExternalVetting importExternalVetting = null;
        //ExternalVetting response = api.putExternalVettingRecord(brandId, importExternalVetting);
        // TODO: test validations
    }

    /**
     * Resend brand 2FA email
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendBrand2faEmailTest() throws ApiException {
        //String brandId = null;
        //api.resendBrand2faEmail(brandId);
        // TODO: test validations
    }

    /**
     * Revet Brand
     *
     * This operation allows you to revet the brand. However, revetting is allowed once after the successful brand registration and thereafter limited to once every 3 months.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revetBrandTest() throws ApiException {
        //String brandId = null;
        //Object response = api.revetBrand(brandId);
        // TODO: test validations
    }

    /**
     * Update Brand
     *
     * Update a brand&#39;s attributes by &#x60;brandId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBrandTest() throws ApiException {
        //String brandId = null;
        //UpdateBrand updateBrand = null;
        //TelnyxBrand response = api.updateBrand(brandId, updateBrand);
        // TODO: test validations
    }
}
