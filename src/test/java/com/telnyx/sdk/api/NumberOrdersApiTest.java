/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import static org.junit.Assert.*;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.*;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for NumberOrdersApi
 */
public class NumberOrdersApiTest {

    private final NumberOrdersApi api = new NumberOrdersApi();
    private final NumberSearchApi numberSearchApi = new NumberSearchApi();

    @Ignore
    @Before
    public void setup() {
        ApiClient defaultClient = Configuration.getDefaultApiClient();
        defaultClient.setBasePath(TestConfiguration.MOCK_SERVER_URL);

        HttpBearerAuth bearerAuth =
            (HttpBearerAuth) defaultClient.getAuthentication("bearerAuth");
        bearerAuth.setBearerToken(TestConfiguration.API_KEY);
    }

    /**
     * Order a US phone number
     *
     * @throws ApiException if the Api call fails
     */
    @Ignore
    @Test
    public void createNumberOrder_whenOrderingUSPhoneNumber_returnsCreatedOrder()
        throws ApiException {
        String countryCode = "US";
        String phoneNumber = null;

        try {
            phoneNumber = Objects.requireNonNull(
                numberSearchApi
                    .listAvailablePhoneNumbers()
                    .filterCountryCode(countryCode)
                    .filterLimit(1)
                    .execute()
                    .getData()
            )
                .get(0)
                .getPhoneNumber();
        } catch (Exception e) {
            fail(
                "Test Setup Failure - Unable to find available number to order: " +
                e.getMessage()
            );
        }

        NumberOrderResponse actualResponse = api.createNumberOrder(
            new CreateNumberOrderRequest()
                .phoneNumbers(
                    Collections.singletonList(
                        new CreateNumberOrderRequestPhoneNumbersInner()
                            .phoneNumber(phoneNumber)
                    )
                )
        );

        assertNotNull(actualResponse);
        assertNotNull(actualResponse.getData());
    }

    /**
     * Retrieve a number order
     * <p>
     * Get an existing phone number order.
     *
     * @throws ApiException if the Api call fails
     */
    @Ignore
    @Test
    public void retrieveNumberOrderTest() throws ApiException {
        //String numberOrderId = null;
        //NumberOrderResponse response = api.retrieveNumberOrder(numberOrderId);
        // TODO: test validations
    }

    /**
     * Update a number order
     * <p>
     * Updates a phone number order.
     *
     * @throws ApiException if the Api call fails
     */
    @Ignore
    @Test
    public void updateNumberOrderTest() throws ApiException {
        //String numberOrderId = null;
        //UpdateNumberOrderRequest updateNumberOrderRequest = null;
        //NumberOrderResponse response = api.updateNumberOrder(numberOrderId, updateNumberOrderRequest);
        // TODO: test validations
    }
}
