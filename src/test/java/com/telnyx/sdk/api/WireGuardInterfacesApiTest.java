/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.CreateWireguardInterface202Response;
import com.telnyx.sdk.model.CreateWireguardPeer202Response;
import com.telnyx.sdk.model.Errors;
import com.telnyx.sdk.model.ListWireguardInterfaces200Response;
import com.telnyx.sdk.model.ListWireguardPeers200Response;
import com.telnyx.sdk.model.WireguardInterfaceCreate;
import com.telnyx.sdk.model.WireguardPeerCreate;
import com.telnyx.sdk.model.WireguardPeerPatch;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for WireGuardInterfacesApi
 */
public class WireGuardInterfacesApiTest {

    private final WireGuardInterfacesApi api = new WireGuardInterfacesApi();

    /**
     * Create a WireGuard Interface
     *
     * Create a new WireGuard Interface. Current limitation of 10 interfaces per user can be created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWireguardInterfaceTest() throws ApiException {
        //WireguardInterfaceCreate wireguardInterfaceCreate = null;
        //CreateWireguardInterface202Response response = api.createWireguardInterface(wireguardInterfaceCreate);
        // TODO: test validations
    }

    /**
     * Create a WireGuard Peer
     *
     * Create a new WireGuard Peer. Current limitation of 5 peers per interface can be created.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWireguardPeerTest() throws ApiException {
        //WireguardPeerCreate wireguardPeerCreate = null;
        //CreateWireguardPeer202Response response = api.createWireguardPeer(wireguardPeerCreate);
        // TODO: test validations
    }

    /**
     * Delete a WireGuard Interface
     *
     * Delete a WireGuard Interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWireguardInterfaceTest() throws ApiException {
        //UUID id = null;
        //CreateWireguardInterface202Response response = api.deleteWireguardInterface(id);
        // TODO: test validations
    }

    /**
     * Delete the WireGuard Peer
     *
     * Delete the WireGuard peer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWireguardPeerTest() throws ApiException {
        //UUID id = null;
        //CreateWireguardPeer202Response response = api.deleteWireguardPeer(id);
        // TODO: test validations
    }

    /**
     * Retrieve a WireGuard Interfaces
     *
     * Retrieve a WireGuard Interfaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWireguardInterfaceTest() throws ApiException {
        //UUID id = null;
        //CreateWireguardInterface202Response response = api.getWireguardInterface(id);
        // TODO: test validations
    }

    /**
     * Retrieve the WireGuard Peer
     *
     * Retrieve the WireGuard peer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWireguardPeerTest() throws ApiException {
        //UUID id = null;
        //CreateWireguardPeer202Response response = api.getWireguardPeer(id);
        // TODO: test validations
    }

    /**
     * Retrieve Wireguard config template for Peer
     *
     * Retrieve Wireguard config template for Peer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWireguardPeerConfigTest() throws ApiException {
        //UUID id = null;
        //String response = api.getWireguardPeerConfig(id);
        // TODO: test validations
    }

    /**
     * List all WireGuard Interfaces
     *
     * List all WireGuard Interfaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWireguardInterfacesTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterNetworkId = null;
        //ListWireguardInterfaces200Response response = api.listWireguardInterfaces(pageNumber, pageSize, filterNetworkId);
        // TODO: test validations
    }

    /**
     * List all WireGuard Peers
     *
     * List all WireGuard peers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listWireguardPeersTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //UUID filterWireguardInterfaceId = null;
        //ListWireguardPeers200Response response = api.listWireguardPeers(pageNumber, pageSize, filterWireguardInterfaceId);
        // TODO: test validations
    }

    /**
     * Update the WireGuard Peer
     *
     * Update the WireGuard peer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWireguardPeerTest() throws ApiException {
        //UUID id = null;
        //WireguardPeerPatch wireguardPeerPatch = null;
        //CreateWireguardPeer202Response response = api.updateWireguardPeer(id, wireguardPeerPatch);
        // TODO: test validations
    }
}
