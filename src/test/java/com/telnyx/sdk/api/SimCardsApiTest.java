/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.BulkSIMCardNetworkPreferenceResponse;
import com.telnyx.sdk.model.BulkUpdateSimNetworkPreference;
import com.telnyx.sdk.model.CreateSIMCardDataUsageNotificationRequest;
import com.telnyx.sdk.model.CreateSIMCardValidateRequest;
import com.telnyx.sdk.model.CreateSimCardDataUsageNotificationResponse;
import com.telnyx.sdk.model.DeleteSIMCardNetworkPreferenceResponse;
import com.telnyx.sdk.model.DeleteSimCardDataUsageNotificationResponse;
import com.telnyx.sdk.model.DeleteSimCardResponse;
import com.telnyx.sdk.model.Error;
import com.telnyx.sdk.model.Errors;
import com.telnyx.sdk.model.GetSimCardDataUsageNotificationResponse;
import com.telnyx.sdk.model.GetSimCardResponse;
import com.telnyx.sdk.model.PUTSIMCardNetworkPreferenceResponse;
import com.telnyx.sdk.model.PutNetworkPreferenceRequest;
import com.telnyx.sdk.model.RegisterSimCardsResponse;
import com.telnyx.sdk.model.SIMCard;
import com.telnyx.sdk.model.SIMCardActionResponse;
import com.telnyx.sdk.model.SIMCardNetworkPreferenceWithOTAUpdatesResponse;
import com.telnyx.sdk.model.SIMCardPublicIPResponse;
import com.telnyx.sdk.model.SIMCardRegistration;
import com.telnyx.sdk.model.SIMCardRegistrationCodeValidations;
import com.telnyx.sdk.model.SearchSimCardsResponse;
import com.telnyx.sdk.model.SimCardDataUsageNotification;
import com.telnyx.sdk.model.SimCardDataUsageNotificationCollection;
import com.telnyx.sdk.model.UpdateSimCardDataUsageNotificationResponse;
import com.telnyx.sdk.model.UpdateSimCardResponse;
import com.telnyx.sdk.model.WirelessConnectivityLogCollectionResponse;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for SimCardsApi
 */
public class SimCardsApiTest {

    private final SimCardsApi api = new SimCardsApi();

    /**
     * Bulk Network Preferences for SIM cards
     *
     * This API allows dispatching the same operation described for the PUT sim_cards/:sim_card_id/network_preferences API for multiple SIM cards at once.&lt;br/&gt;&lt;br/&gt; Although, a SIM card network preference may fail individually under any validation triggered as a consequence of its state. For example, a SIM can&#39;t have an in-progress OTA update for applying a Network Preference, so they&#39;ll fail when requested in this API. In that scenario, the specific error will be present in the response along with the successful definitions in the \&quot;errors\&quot; response node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkSIMCardNetworkPreferencesTest() throws ApiException {
        //BulkUpdateSimNetworkPreference bulkUpdateSimNetworkPreference = null;
        //BulkSIMCardNetworkPreferenceResponse response = api.bulkSIMCardNetworkPreferences(bulkUpdateSimNetworkPreference);
        // TODO: test validations
    }

    /**
     * List SIM card data usage notifications
     *
     * Lists a paginated collection of SIM card data usage notifications. It enables exploring the collection using specific filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSimCardDataUsageNotificationsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //UUID filterSimCardId = null;
        //SimCardDataUsageNotificationCollection response = api.listSimCardDataUsageNotifications(pageNumber, pageSize, filterSimCardId);
        // TODO: test validations
    }

    /**
     * Validate SIM cards registration codes
     *
     * It validates whether SIM card registration codes are valid or not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postValidateRegistrationCodesTest() throws ApiException {
        //CreateSIMCardValidateRequest createSIMCardValidateRequest = null;
        //SIMCardRegistrationCodeValidations response = api.postValidateRegistrationCodes(createSIMCardValidateRequest);
        // TODO: test validations
    }

    /**
     * Request removing a SIM card public IP
     *
     * This API removes an existing public IP from a SIM card. &lt;br/&gt;&lt;br/&gt;  The API will trigger an asynchronous operation called a SIM Card Action. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developers.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeSIMCardPublicIPTest() throws ApiException {
        //UUID id = null;
        //SIMCardActionResponse response = api.removeSIMCardPublicIP(id);
        // TODO: test validations
    }

    /**
     * DELETE network preferences
     *
     * This API asynchronously removes the custom-defined network preferences settings. After this operation is done the Telnyx default settings, the same applied for an unaltered SIM card, will be in place.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sIMCardNetworkPreferencesDeleteTest() throws ApiException {
        //UUID simCardId = null;
        //DeleteSIMCardNetworkPreferenceResponse response = api.sIMCardNetworkPreferencesDelete(simCardId);
        // TODO: test validations
    }

    /**
     * Get network preferences
     *
     * It returns the network preferences currently applied in the SIM card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sIMCardNetworkPreferencesGetTest() throws ApiException {
        //UUID simCardId = null;
        //Boolean includeOtaUpdates = null;
        //SIMCardNetworkPreferenceWithOTAUpdatesResponse response = api.sIMCardNetworkPreferencesGet(simCardId, includeOtaUpdates);
        // TODO: test validations
    }

    /**
     * Set network preferences
     *
     * This API allows setting or updating a SIM card network preference. &lt;br/&gt;&lt;br/&gt; Every SIM card has default network preferences defined on Telnyx. These preferences will determine how a SIMCard will connect to the network by considering a list of preferable operators.&lt;br/&gt;&lt;br/&gt; There can be multiple scenarios where an operator can be preferred over another, for example, when a specific mobile operator can provide better network latency or better pricing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sIMCardNetworkPreferencesPutTest() throws ApiException {
        //UUID simCardId = null;
        //PutNetworkPreferenceRequest putNetworkPreferenceRequest = null;
        //PUTSIMCardNetworkPreferenceResponse response = api.sIMCardNetworkPreferencesPut(simCardId, putNetworkPreferenceRequest);
        // TODO: test validations
    }

    /**
     * Get SIM card public IP definition
     *
     * It returns the public IP requested for a SIM card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sIMCardPublicIPGetTest() throws ApiException {
        //UUID simCardId = null;
        //SIMCardPublicIPResponse response = api.sIMCardPublicIPGet(simCardId);
        // TODO: test validations
    }

    /**
     * Request setting a SIM card public IP
     *
     * This API makes a SIM card reachable on the public internet by mapping a random public IP to the SIM card. &lt;br/&gt;&lt;br/&gt;  The API will trigger an asynchronous operation called a SIM Card Action. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developers.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API. &lt;br/&gt;&lt;br/&gt;  Setting a Public IP to a SIM Card incurs a charge and will only succeed if the account has sufficient funds.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSIMCardPublicIPTest() throws ApiException {
        //UUID id = null;
        //SIMCardActionResponse response = api.setSIMCardPublicIP(id);
        // TODO: test validations
    }

    /**
     * Delete SIM card data usage notifications
     *
     * Delete the SIM Card Data Usage Notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardDataUsageNotificationsDeleteTest() throws ApiException {
        //UUID id = null;
        //DeleteSimCardDataUsageNotificationResponse response = api.simCardDataUsageNotificationsDelete(id);
        // TODO: test validations
    }

    /**
     * Get a single SIM card data usage notification
     *
     * Get a single SIM Card Data Usage Notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardDataUsageNotificationsGetTest() throws ApiException {
        //UUID id = null;
        //GetSimCardDataUsageNotificationResponse response = api.simCardDataUsageNotificationsGet(id);
        // TODO: test validations
    }

    /**
     * Updates information for a SIM Card Data Usage Notification
     *
     * Updates information for a SIM Card Data Usage Notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardDataUsageNotificationsPatchTest() throws ApiException {
        //UUID id = null;
        //SimCardDataUsageNotification simCardDataUsageNotification = null;
        //UpdateSimCardDataUsageNotificationResponse response = api.simCardDataUsageNotificationsPatch(id, simCardDataUsageNotification);
        // TODO: test validations
    }

    /**
     * Create a new SIM card data usage notification
     *
     * Creates a new SIM card data usage notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardDataUsageNotificationsPostTest() throws ApiException {
        //CreateSIMCardDataUsageNotificationRequest createSIMCardDataUsageNotificationRequest = null;
        //CreateSimCardDataUsageNotificationResponse response = api.simCardDataUsageNotificationsPost(createSIMCardDataUsageNotificationRequest);
        // TODO: test validations
    }

    /**
     * Deletes a SIM card
     *
     * The SIM card will be decommissioned, removed from your account and you will stop being charged.&lt;br /&gt;The SIM card won&#39;t be able to connect to the network after the deletion is completed, thus making it impossible to consume data.&lt;br/&gt; Transitioning to the disabled state may take a period of time.&lt;/br&gt; Until the transition is completed, the SIM card status will be disabling &lt;code&gt;disabling&lt;/code&gt;.&lt;br /&gt;In order to re-enable the SIM card, you will need to re-register it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardDeleteTest() throws ApiException {
        //UUID id = null;
        //DeleteSimCardResponse response = api.simCardDelete(id);
        // TODO: test validations
    }

    /**
     * Request a SIM card disable
     *
     * This API disables a SIM card, disconnecting it from the network and making it impossible to consume data.&lt;br/&gt; The API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the disabled state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developers.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardDisableTest() throws ApiException {
        //UUID id = null;
        //SIMCardActionResponse response = api.simCardDisable(id);
        // TODO: test validations
    }

    /**
     * Request a SIM card enable
     *
     * This API enables a SIM card, connecting it to the network and making it possible to consume data.&lt;br/&gt; To enable a SIM card, it must be associated with a SIM card group.&lt;br/&gt; The API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the enabled state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developers.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardEnableTest() throws ApiException {
        //UUID id = null;
        //SIMCardActionResponse response = api.simCardEnable(id);
        // TODO: test validations
    }

    /**
     * Get SIM card
     *
     * Returns the details regarding a specific SIM card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardGetTest() throws ApiException {
        //UUID id = null;
        //Boolean includeSimCardGroup = null;
        //GetSimCardResponse response = api.simCardGet(id, includeSimCardGroup);
        // TODO: test validations
    }

    /**
     * Register SIM cards
     *
     * Register the SIM cards associated with the provided registration codes to the current user&#39;s account.&lt;br/&gt;&lt;br/&gt; If &lt;code&gt;sim_card_group_id&lt;/code&gt; is provided, the SIM cards will be associated with that group. Otherwise, the default group for the current user will be used.&lt;br/&gt;&lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardRegisterTest() throws ApiException {
        //SIMCardRegistration siMCardRegistration = null;
        //RegisterSimCardsResponse response = api.simCardRegister(siMCardRegistration);
        // TODO: test validations
    }

    /**
     * Request setting a SIM card to standby
     *
     * The SIM card will be able to connect to the network once the process to set it to standby has been completed, thus making it possible to consume data.&lt;br/&gt; To set a SIM card to standby, it must be associated with SIM card group.&lt;br/&gt; The API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the standby state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developers.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardSetStandbyTest() throws ApiException {
        //UUID id = null;
        //SIMCardActionResponse response = api.simCardSetStandby(id);
        // TODO: test validations
    }

    /**
     * Update a SIM card
     *
     * Updates SIM card data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardUpdateTest() throws ApiException {
        //UUID id = null;
        //SIMCard siMCard = null;
        //UpdateSimCardResponse response = api.simCardUpdate(id, siMCard);
        // TODO: test validations
    }

    /**
     * Get all SIM cards
     *
     * Get all SIM cards belonging to the user that match the given filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simCardsGetTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //Boolean includeSimCardGroup = null;
        //UUID filterSimCardGroupId = null;
        //List<String> filterTags = null;
        //String filterIccid = null;
        //SearchSimCardsResponse response = api.simCardsGet(pageNumber, pageSize, includeSimCardGroup, filterSimCardGroupId, filterTags, filterIccid);
        // TODO: test validations
    }

    /**
     * List wireless connectivity logs
     *
     * This API allows listing a paginated collection of Wireless Connectivity Logs associated with a SIM Card, for troubleshooting purposes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wirelessConnectivityLogsGetTest() throws ApiException {
        //UUID simCardId = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //WirelessConnectivityLogCollectionResponse response = api.wirelessConnectivityLogsGet(simCardId, pageNumber, pageSize);
        // TODO: test validations
    }
}
