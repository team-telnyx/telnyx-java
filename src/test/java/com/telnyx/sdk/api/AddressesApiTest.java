/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.AcceptSuggestionsRequest;
import com.telnyx.sdk.model.AddressCreate;
import com.telnyx.sdk.model.AddressSuggestionResponse;
import com.telnyx.sdk.model.CreateAddress200Response;
import com.telnyx.sdk.model.FindAddresses200Response;
import com.telnyx.sdk.model.ResourceNotFoundError;
import com.telnyx.sdk.model.ValidateAddressActionResponse;
import com.telnyx.sdk.model.ValidateAddressRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for AddressesApi
 */
public class AddressesApiTest {

    private final AddressesApi api = new AddressesApi();

    /**
     * Accepts this address suggestion as a new emergency address for Operator Connect and finishes the uploads of the numbers associated with it to Microsoft.
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptAddressSuggestionsTest() throws ApiException {
        //UUID id = null;
        //AcceptSuggestionsRequest acceptSuggestionsRequest = null;
        //AddressSuggestionResponse response = api.acceptAddressSuggestions(id, acceptSuggestionsRequest);
        // TODO: test validations
    }

    /**
     * Creates an address
     *
     * Creates an address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAddressTest() throws ApiException {
        //AddressCreate addressCreate = null;
        //CreateAddress200Response response = api.createAddress(addressCreate);
        // TODO: test validations
    }

    /**
     * Deletes an address
     *
     * Deletes an existing address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAddressTest() throws ApiException {
        //String id = null;
        //CreateAddress200Response response = api.deleteAddress(id);
        // TODO: test validations
    }

    /**
     * List all addresses
     *
     * Returns a list of your addresses.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAddressesTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterCustomerReferenceEq = null;
        //String filterCustomerReferenceContains = null;
        //String filterUsedAsEmergency = null;
        //String filterStreetAddressContains = null;
        //String filterAddressBookEq = null;
        //String sort = null;
        //FindAddresses200Response response = api.findAddresses(pageNumber, pageSize, filterCustomerReferenceEq, filterCustomerReferenceContains, filterUsedAsEmergency, filterStreetAddressContains, filterAddressBookEq, sort);
        // TODO: test validations
    }

    /**
     * Retrieve an address
     *
     * Retrieves the details of an existing address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAddressTest() throws ApiException {
        //String id = null;
        //CreateAddress200Response response = api.getAddress(id);
        // TODO: test validations
    }

    /**
     * Validate an address
     *
     * Validates an address for emergency services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateAddressTest() throws ApiException {
        //ValidateAddressRequest validateAddressRequest = null;
        //ValidateAddressActionResponse response = api.validateAddress(validateAddressRequest);
        // TODO: test validations
    }
}
