/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.CreateNotificationChannels200Response;
import com.telnyx.sdk.model.CreateNotificationProfile200Response;
import com.telnyx.sdk.model.CreateNotificationSetting200Response;
import com.telnyx.sdk.model.Errors;
import com.telnyx.sdk.model.FindNotificationsEvents200Response;
import com.telnyx.sdk.model.FindNotificationsEventsConditions200Response;
import com.telnyx.sdk.model.FindNotificationsProfiles200Response;
import com.telnyx.sdk.model.ListNotificationChannels200Response;
import com.telnyx.sdk.model.ListNotificationSettings200Response;
import com.telnyx.sdk.model.NotificationChannel;
import com.telnyx.sdk.model.NotificationProfile;
import com.telnyx.sdk.model.NotificationSetting;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for NotificationsApi
 */
public class NotificationsApiTest {

    private final NotificationsApi api = new NotificationsApi();

    /**
     * Create a notification channel
     *
     * Create a notification channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotificationChannelsTest() throws ApiException {
        //NotificationChannel notificationChannel = null;
        //CreateNotificationChannels200Response response = api.createNotificationChannels(notificationChannel);
        // TODO: test validations
    }

    /**
     * Create a notification profile
     *
     * Create a notification profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotificationProfileTest() throws ApiException {
        //NotificationProfile notificationProfile = null;
        //CreateNotificationProfile200Response response = api.createNotificationProfile(notificationProfile);
        // TODO: test validations
    }

    /**
     * Add a Notification Setting
     *
     * Add a notification setting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotificationSettingTest() throws ApiException {
        //NotificationSetting notificationSetting = null;
        //CreateNotificationSetting200Response response = api.createNotificationSetting(notificationSetting);
        // TODO: test validations
    }

    /**
     * Delete a notification channel
     *
     * Delete a notification channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotificationChannelTest() throws ApiException {
        //UUID id = null;
        //CreateNotificationChannels200Response response = api.deleteNotificationChannel(id);
        // TODO: test validations
    }

    /**
     * Delete a notification profile
     *
     * Delete a notification profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotificationProfileTest() throws ApiException {
        //UUID id = null;
        //CreateNotificationProfile200Response response = api.deleteNotificationProfile(id);
        // TODO: test validations
    }

    /**
     * Delete a notification setting
     *
     * Delete a notification setting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotificationSettingTest() throws ApiException {
        //UUID id = null;
        //CreateNotificationSetting200Response response = api.deleteNotificationSetting(id);
        // TODO: test validations
    }

    /**
     * List all Notifications Events
     *
     * Returns a list of your notifications events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findNotificationsEventsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //FindNotificationsEvents200Response response = api.findNotificationsEvents(pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List all Notifications Events Conditions
     *
     * Returns a list of your notifications events conditions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findNotificationsEventsConditionsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterAssociatedRecordTypeEq = null;
        //FindNotificationsEventsConditions200Response response = api.findNotificationsEventsConditions(pageNumber, pageSize, filterAssociatedRecordTypeEq);
        // TODO: test validations
    }

    /**
     * List all Notifications Profiles
     *
     * Returns a list of your notifications profiles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findNotificationsProfilesTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //FindNotificationsProfiles200Response response = api.findNotificationsProfiles(pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * Get a notification channel
     *
     * Get a notification channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationChannelTest() throws ApiException {
        //UUID id = null;
        //CreateNotificationChannels200Response response = api.getNotificationChannel(id);
        // TODO: test validations
    }

    /**
     * Get a notification profile
     *
     * Get a notification profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationProfileTest() throws ApiException {
        //UUID id = null;
        //CreateNotificationProfile200Response response = api.getNotificationProfile(id);
        // TODO: test validations
    }

    /**
     * Get a notification setting
     *
     * Get a notification setting.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationSettingTest() throws ApiException {
        //UUID id = null;
        //CreateNotificationSetting200Response response = api.getNotificationSetting(id);
        // TODO: test validations
    }

    /**
     * List notification channels
     *
     * List notification channels.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNotificationChannelsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterChannelTypeIdEq = null;
        //ListNotificationChannels200Response response = api.listNotificationChannels(pageNumber, pageSize, filterChannelTypeIdEq);
        // TODO: test validations
    }

    /**
     * List notification settings
     *
     * List notification settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNotificationSettingsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterNotificationProfileIdEq = null;
        //String filterNotificationChannelEq = null;
        //String filterNotificationEventConditionIdEq = null;
        //String filterAssociatedRecordTypeEq = null;
        //String status = null;
        //ListNotificationSettings200Response response = api.listNotificationSettings(pageNumber, pageSize, filterNotificationProfileIdEq, filterNotificationChannelEq, filterNotificationEventConditionIdEq, filterAssociatedRecordTypeEq, status);
        // TODO: test validations
    }

    /**
     * Update a notification channel
     *
     * Update a notification channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotificationChannelTest() throws ApiException {
        //UUID id = null;
        //NotificationChannel notificationChannel = null;
        //CreateNotificationChannels200Response response = api.updateNotificationChannel(id, notificationChannel);
        // TODO: test validations
    }

    /**
     * Update a notification profile
     *
     * Update a notification profile.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotificationProfileTest() throws ApiException {
        //UUID id = null;
        //NotificationProfile notificationProfile = null;
        //CreateNotificationProfile200Response response = api.updateNotificationProfile(id, notificationProfile);
        // TODO: test validations
    }
}
