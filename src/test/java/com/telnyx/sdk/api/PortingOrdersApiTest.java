/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.ActivatePortingOrder202Response;
import com.telnyx.sdk.model.CancelPortingOrder200Response;
import com.telnyx.sdk.model.ConfirmPortingOrder200Response;
import com.telnyx.sdk.model.CreateAdditionalDocuments201Response;
import com.telnyx.sdk.model.CreateAdditionalDocumentsRequest;
import com.telnyx.sdk.model.CreateLoaConfiguration201Response;
import com.telnyx.sdk.model.CreatePhoneNumberConfigurations201Response;
import com.telnyx.sdk.model.CreatePhoneNumberConfigurationsRequest;
import com.telnyx.sdk.model.CreatePortingComment201Response;
import com.telnyx.sdk.model.CreatePortingOrder;
import com.telnyx.sdk.model.CreatePortingOrder201Response;
import com.telnyx.sdk.model.CreatePortingOrderComment;
import com.telnyx.sdk.model.CreatePortingPhoneNumberBlock201Response;
import com.telnyx.sdk.model.CreatePortingPhoneNumberBlockRequest;
import com.telnyx.sdk.model.CreatePortingPhoneNumberExtension201Response;
import com.telnyx.sdk.model.CreatePortingPhoneNumberExtensionRequest;
import com.telnyx.sdk.model.CreatePortingReport201Response;
import com.telnyx.sdk.model.CreatePortingReportRequest;
import com.telnyx.sdk.model.GetPortingOrder200Response;
import com.telnyx.sdk.model.GetPortingOrderSubRequest200Response;
import com.telnyx.sdk.model.ListAdditionalDocuments200Response;
import com.telnyx.sdk.model.ListAllowedFocWindows200Response;
import com.telnyx.sdk.model.ListExceptionTypes200Response;
import com.telnyx.sdk.model.ListLoaConfigurations200Response;
import com.telnyx.sdk.model.ListPhoneNumberConfigurations200Response;
import com.telnyx.sdk.model.ListPortingEvents200Response;
import com.telnyx.sdk.model.ListPortingOrderActivationJobs200Response;
import com.telnyx.sdk.model.ListPortingOrderComments200Response;
import com.telnyx.sdk.model.ListPortingOrderRequirements200Response;
import com.telnyx.sdk.model.ListPortingOrders200Response;
import com.telnyx.sdk.model.ListPortingPhoneNumberBlocks200Response;
import com.telnyx.sdk.model.ListPortingPhoneNumberExtensions200Response;
import com.telnyx.sdk.model.ListPortingPhoneNumbers200Response;
import com.telnyx.sdk.model.ListPortingReports200Response;
import com.telnyx.sdk.model.ListVerificationCodes200Response;
import com.telnyx.sdk.model.PortabilityStatus;
import com.telnyx.sdk.model.PortingOrderActivationStatus;
import com.telnyx.sdk.model.PortingOrderType;
import com.telnyx.sdk.model.PreviewLoaConfigurationParamsRequest;
import com.telnyx.sdk.model.SendPortingVerificationCodesRequest;
import com.telnyx.sdk.model.SharePortingOrder201Response;
import com.telnyx.sdk.model.SharePortingOrderRequest;
import com.telnyx.sdk.model.ShowPortingEvent200Response;
import com.telnyx.sdk.model.UpdatePortingOrder;
import com.telnyx.sdk.model.UpdatePortingOrder200Response;
import com.telnyx.sdk.model.UpdatePortingOrdersActivationJobRequest;
import com.telnyx.sdk.model.VerifyPortingVerificationCodes200Response;
import com.telnyx.sdk.model.VerifyPortingVerificationCodesRequest;
import java.io.File;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for PortingOrdersApi
 */
public class PortingOrdersApiTest {

    private final PortingOrdersApi api = new PortingOrdersApi();

    /**
     * Activate every number in a porting order asynchronously.
     *
     * Activate each number in a porting order asynchronously. This operation is limited to US FastPort orders only.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activatePortingOrderTest() throws ApiException {
        //UUID id = null;
        //ActivatePortingOrder202Response response = api.activatePortingOrder(id);
        // TODO: test validations
    }

    /**
     * Cancel a porting order
     *
     * Cancel a porting order
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelPortingOrderTest() throws ApiException {
        //UUID id = null;
        //CancelPortingOrder200Response response = api.cancelPortingOrder(id);
        // TODO: test validations
    }

    /**
     * Submit a porting order.
     *
     * Confirm and submit your porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmPortingOrderTest() throws ApiException {
        //UUID id = null;
        //ConfirmPortingOrder200Response response = api.confirmPortingOrder(id);
        // TODO: test validations
    }

    /**
     * Create a list of additional documents
     *
     * Creates a list of additional documents for a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAdditionalDocumentsTest() throws ApiException {
        //UUID id = null;
        //CreateAdditionalDocumentsRequest createAdditionalDocumentsRequest = null;
        //CreateAdditionalDocuments201Response response = api.createAdditionalDocuments(id, createAdditionalDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Create a LOA configuration
     *
     * Create a LOA configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLoaConfigurationTest() throws ApiException {
        //PreviewLoaConfigurationParamsRequest previewLoaConfigurationParamsRequest = null;
        //CreateLoaConfiguration201Response response = api.createLoaConfiguration(previewLoaConfigurationParamsRequest);
        // TODO: test validations
    }

    /**
     * Create a list of phone number configurations
     *
     * Creates a list of phone number configurations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPhoneNumberConfigurationsTest() throws ApiException {
        //CreatePhoneNumberConfigurationsRequest createPhoneNumberConfigurationsRequest = null;
        //CreatePhoneNumberConfigurations201Response response = api.createPhoneNumberConfigurations(createPhoneNumberConfigurationsRequest);
        // TODO: test validations
    }

    /**
     * Create a comment for a porting order
     *
     * Creates a new comment for a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortingCommentTest() throws ApiException {
        //UUID id = null;
        //CreatePortingOrderComment createPortingOrderComment = null;
        //CreatePortingComment201Response response = api.createPortingComment(id, createPortingOrderComment);
        // TODO: test validations
    }

    /**
     * Create a porting order
     *
     * Creates a new porting order object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortingOrderTest() throws ApiException {
        //CreatePortingOrder createPortingOrder = null;
        //CreatePortingOrder201Response response = api.createPortingOrder(createPortingOrder);
        // TODO: test validations
    }

    /**
     * Create a phone number block
     *
     * Creates a new phone number block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortingPhoneNumberBlockTest() throws ApiException {
        //UUID portingOrderId = null;
        //CreatePortingPhoneNumberBlockRequest createPortingPhoneNumberBlockRequest = null;
        //CreatePortingPhoneNumberBlock201Response response = api.createPortingPhoneNumberBlock(portingOrderId, createPortingPhoneNumberBlockRequest);
        // TODO: test validations
    }

    /**
     * Create a phone number extension
     *
     * Creates a new phone number extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortingPhoneNumberExtensionTest() throws ApiException {
        //UUID portingOrderId = null;
        //CreatePortingPhoneNumberExtensionRequest createPortingPhoneNumberExtensionRequest = null;
        //CreatePortingPhoneNumberExtension201Response response = api.createPortingPhoneNumberExtension(portingOrderId, createPortingPhoneNumberExtensionRequest);
        // TODO: test validations
    }

    /**
     * Create a porting related report
     *
     * Generate reports about porting operations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortingReportTest() throws ApiException {
        //CreatePortingReportRequest createPortingReportRequest = null;
        //CreatePortingReport201Response response = api.createPortingReport(createPortingReportRequest);
        // TODO: test validations
    }

    /**
     * Delete an additional document
     *
     * Deletes an additional document for a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAdditionalDocumentTest() throws ApiException {
        //UUID id = null;
        //UUID additionalDocumentId = null;
        //api.deleteAdditionalDocument(id, additionalDocumentId);
        // TODO: test validations
    }

    /**
     * Delete a LOA configuration
     *
     * Delete a specific LOA configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLoaConfigurationTest() throws ApiException {
        //UUID id = null;
        //api.deleteLoaConfiguration(id);
        // TODO: test validations
    }

    /**
     * Delete a porting order
     *
     * Deletes an existing porting order. This operation is restrict to porting orders in draft state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortingOrderTest() throws ApiException {
        //UUID id = null;
        //api.deletePortingOrder(id);
        // TODO: test validations
    }

    /**
     * Delete a phone number block
     *
     * Deletes a phone number block.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortingPhoneNumberBlockTest() throws ApiException {
        //UUID portingOrderId = null;
        //UUID id = null;
        //CreatePortingPhoneNumberBlock201Response response = api.deletePortingPhoneNumberBlock(portingOrderId, id);
        // TODO: test validations
    }

    /**
     * Delete a phone number extension
     *
     * Deletes a phone number extension.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortingPhoneNumberExtensionTest() throws ApiException {
        //UUID portingOrderId = null;
        //UUID id = null;
        //CreatePortingPhoneNumberExtension201Response response = api.deletePortingPhoneNumberExtension(portingOrderId, id);
        // TODO: test validations
    }

    /**
     * Retrieve a LOA configuration
     *
     * Retrieve a specific LOA configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLoaConfigurationTest() throws ApiException {
        //UUID id = null;
        //CreateLoaConfiguration201Response response = api.getLoaConfiguration(id);
        // TODO: test validations
    }

    /**
     * Retrieve a porting order
     *
     * Retrieves the details of an existing porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortingOrderTest() throws ApiException {
        //UUID id = null;
        //Boolean includePhoneNumbers = null;
        //GetPortingOrder200Response response = api.getPortingOrder(id, includePhoneNumbers);
        // TODO: test validations
    }

    /**
     * Download a porting order loa template
     *
     * Download a porting order loa template
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortingOrderLoaTemplateTest() throws ApiException {
        //UUID id = null;
        //UUID loaConfigurationId = null;
        //File response = api.getPortingOrderLoaTemplate(id, loaConfigurationId);
        // TODO: test validations
    }

    /**
     * Retrieve the associated V1 sub_request_id and port_request_id
     *
     * Retrieve the associated V1 sub_request_id and port_request_id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortingOrderSubRequestTest() throws ApiException {
        //UUID id = null;
        //GetPortingOrderSubRequest200Response response = api.getPortingOrderSubRequest(id);
        // TODO: test validations
    }

    /**
     * Retrieve a porting activation job
     *
     * Returns a porting activation job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortingOrdersActivationJobTest() throws ApiException {
        //UUID id = null;
        //UUID activationJobId = null;
        //ActivatePortingOrder202Response response = api.getPortingOrdersActivationJob(id, activationJobId);
        // TODO: test validations
    }

    /**
     * Retrieve a report
     *
     * Retrieve a specific report generated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortingReportTest() throws ApiException {
        //UUID id = null;
        //CreatePortingReport201Response response = api.getPortingReport(id);
        // TODO: test validations
    }

    /**
     * List additional documents
     *
     * Returns a list of additional documents for a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAdditionalDocumentsTest() throws ApiException {
        //UUID id = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterDocumentType = null;
        //List<String> filterDocumentTypeIn = null;
        //String sort = null;
        //ListAdditionalDocuments200Response response = api.listAdditionalDocuments(id, pageNumber, pageSize, filterDocumentType, filterDocumentTypeIn, sort);
        // TODO: test validations
    }

    /**
     * List allowed FOC dates
     *
     * Returns a list of allowed FOC dates for a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAllowedFocWindowsTest() throws ApiException {
        //UUID id = null;
        //ListAllowedFocWindows200Response response = api.listAllowedFocWindows(id);
        // TODO: test validations
    }

    /**
     * List all exception types
     *
     * Returns a list of all possible exception types for a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExceptionTypesTest() throws ApiException {
        //ListExceptionTypes200Response response = api.listExceptionTypes();
        // TODO: test validations
    }

    /**
     * List LOA configurations
     *
     * List the LOA configurations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoaConfigurationsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListLoaConfigurations200Response response = api.listLoaConfigurations(pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List all phone number configurations
     *
     * Returns a list of phone number configurations paginated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPhoneNumberConfigurationsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //UUID filterPortingOrderId = null;
        //List<UUID> filterPortingOrderIdIn = null;
        //String filterPortingOrderStatus = null;
        //List<String> filterPortingOrderStatusIn = null;
        //UUID filterPortingPhoneNumber = null;
        //List<UUID> filterPortingPhoneNumberIn = null;
        //UUID filterUserBundleId = null;
        //List<UUID> filterUserBundleIdIn = null;
        //String sort = null;
        //ListPhoneNumberConfigurations200Response response = api.listPhoneNumberConfigurations(pageNumber, pageSize, filterPortingOrderId, filterPortingOrderIdIn, filterPortingOrderStatus, filterPortingOrderStatusIn, filterPortingPhoneNumber, filterPortingPhoneNumberIn, filterUserBundleId, filterUserBundleIdIn, sort);
        // TODO: test validations
    }

    /**
     * List all porting events
     *
     * Returns a list of all porting events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingEventsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterType = null;
        //UUID filterPortingOrderId = null;
        //OffsetDateTime filterCreatedAtGte = null;
        //OffsetDateTime filterCreatedAtLte = null;
        //ListPortingEvents200Response response = api.listPortingEvents(pageNumber, pageSize, filterType, filterPortingOrderId, filterCreatedAtGte, filterCreatedAtLte);
        // TODO: test validations
    }

    /**
     * List all porting activation jobs
     *
     * Returns a list of your porting activation jobs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingOrderActivationJobsTest() throws ApiException {
        //UUID id = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListPortingOrderActivationJobs200Response response = api.listPortingOrderActivationJobs(id, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List all comments of a porting order
     *
     * Returns a list of all comments of a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingOrderCommentsTest() throws ApiException {
        //UUID id = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListPortingOrderComments200Response response = api.listPortingOrderComments(id, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List porting order requirements
     *
     * Returns a list of all requirements based on country/number type for this porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingOrderRequirementsTest() throws ApiException {
        //UUID id = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListPortingOrderRequirements200Response response = api.listPortingOrderRequirements(id, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List all porting orders
     *
     * Returns a list of your porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingOrdersTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //Boolean includePhoneNumbers = null;
        //String filterStatus = null;
        //String filterStatusIn = null;
        //String filterCustomerReference = null;
        //String filterParentSupportKey = null;
        //String filterPhoneNumbersCountryCode = null;
        //String filterPhoneNumbersCarrierName = null;
        //PortingOrderType filterMiscType = null;
        //String filterEndUserAdminEntityName = null;
        //String filterEndUserAdminAuthPersonName = null;
        //Boolean filterActivationSettingsFastPortEligible = null;
        //String filterActivationSettingsFocDatetimeRequestedGt = null;
        //String filterActivationSettingsFocDatetimeRequestedLt = null;
        //String filterPhoneNumbersPhoneNumberContains = null;
        //String sort = null;
        //ListPortingOrders200Response response = api.listPortingOrders(pageNumber, pageSize, includePhoneNumbers, filterStatus, filterStatusIn, filterCustomerReference, filterParentSupportKey, filterPhoneNumbersCountryCode, filterPhoneNumbersCarrierName, filterMiscType, filterEndUserAdminEntityName, filterEndUserAdminAuthPersonName, filterActivationSettingsFastPortEligible, filterActivationSettingsFocDatetimeRequestedGt, filterActivationSettingsFocDatetimeRequestedLt, filterPhoneNumbersPhoneNumberContains, sort);
        // TODO: test validations
    }

    /**
     * List all phone number blocks
     *
     * Returns a list of all phone number blocks of a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingPhoneNumberBlocksTest() throws ApiException {
        //UUID portingOrderId = null;
        //String filterPhoneNumber = null;
        //List<String> filterPhoneNumberIn = null;
        //String sort = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListPortingPhoneNumberBlocks200Response response = api.listPortingPhoneNumberBlocks(portingOrderId, filterPhoneNumber, filterPhoneNumberIn, sort, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List all phone number extensions
     *
     * Returns a list of all phone number extensions of a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingPhoneNumberExtensionsTest() throws ApiException {
        //UUID portingOrderId = null;
        //String filterPhoneNumber = null;
        //List<String> filterPhoneNumberIn = null;
        //UUID filterPortingPhoneNumberId = null;
        //UUID filterPortingPhoneNumberIdIn = null;
        //String sort = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListPortingPhoneNumberExtensions200Response response = api.listPortingPhoneNumberExtensions(portingOrderId, filterPhoneNumber, filterPhoneNumberIn, filterPortingPhoneNumberId, filterPortingPhoneNumberIdIn, sort, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List all porting phone numbers
     *
     * Returns a list of your porting phone numbers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingPhoneNumbersTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //UUID filterPortingOrderId = null;
        //List<UUID> filterPortingOrderIdIn = null;
        //String filterSupportKeyEq = null;
        //List<String> filterSupportKeyIn = null;
        //String filterPhoneNumber = null;
        //List<String> filterPhoneNumberIn = null;
        //String filterPortingOrderStatus = null;
        //PortingOrderActivationStatus filterActivationStatus = null;
        //PortabilityStatus filterPortabilityStatus = null;
        //ListPortingPhoneNumbers200Response response = api.listPortingPhoneNumbers(pageNumber, pageSize, filterPortingOrderId, filterPortingOrderIdIn, filterSupportKeyEq, filterSupportKeyIn, filterPhoneNumber, filterPhoneNumberIn, filterPortingOrderStatus, filterActivationStatus, filterPortabilityStatus);
        // TODO: test validations
    }

    /**
     * List porting related reports
     *
     * List the reports generated about porting operations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortingReportsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterReportType = null;
        //String filterStatus = null;
        //ListPortingReports200Response response = api.listPortingReports(pageNumber, pageSize, filterReportType, filterStatus);
        // TODO: test validations
    }

    /**
     * List verification codes
     *
     * Returns a list of verification codes for a porting order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listVerificationCodesTest() throws ApiException {
        //UUID id = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterPhoneNumber = null;
        //List<String> filterPhoneNumberIn = null;
        //Boolean filterVerified = null;
        //String sort = null;
        //ListVerificationCodes200Response response = api.listVerificationCodes(id, pageNumber, pageSize, filterPhoneNumber, filterPhoneNumberIn, filterVerified, sort);
        // TODO: test validations
    }

    /**
     * Preview a LOA configuration
     *
     * Preview a specific LOA configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void previewLoaConfigurationTest() throws ApiException {
        //UUID id = null;
        //File response = api.previewLoaConfiguration(id);
        // TODO: test validations
    }

    /**
     * Preview the LOA configuration parameters
     *
     * Preview the LOA template that would be generated without need to create LOA configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void previewLoaConfigurationParamsTest() throws ApiException {
        //PreviewLoaConfigurationParamsRequest previewLoaConfigurationParamsRequest = null;
        //File response = api.previewLoaConfigurationParams(previewLoaConfigurationParamsRequest);
        // TODO: test validations
    }

    /**
     * Republish a porting event
     *
     * Republish a specific porting event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void republishPortingEventTest() throws ApiException {
        //UUID id = null;
        //api.republishPortingEvent(id);
        // TODO: test validations
    }

    /**
     * Send the verification codes
     *
     * Send the verification code for all porting phone numbers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendPortingVerificationCodesTest() throws ApiException {
        //UUID id = null;
        //SendPortingVerificationCodesRequest sendPortingVerificationCodesRequest = null;
        //api.sendPortingVerificationCodes(id, sendPortingVerificationCodesRequest);
        // TODO: test validations
    }

    /**
     * Share a porting order
     *
     * Creates a sharing token for a porting order. The token can be used to share the porting order with non-Telnyx users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sharePortingOrderTest() throws ApiException {
        //UUID id = null;
        //SharePortingOrderRequest sharePortingOrderRequest = null;
        //SharePortingOrder201Response response = api.sharePortingOrder(id, sharePortingOrderRequest);
        // TODO: test validations
    }

    /**
     * Show a porting event
     *
     * Show a specific porting event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showPortingEventTest() throws ApiException {
        //UUID id = null;
        //ShowPortingEvent200Response response = api.showPortingEvent(id);
        // TODO: test validations
    }

    /**
     * Update a LOA configuration
     *
     * Update a specific LOA configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLoaConfigurationTest() throws ApiException {
        //UUID id = null;
        //PreviewLoaConfigurationParamsRequest previewLoaConfigurationParamsRequest = null;
        //CreateLoaConfiguration201Response response = api.updateLoaConfiguration(id, previewLoaConfigurationParamsRequest);
        // TODO: test validations
    }

    /**
     * Edit a porting order
     *
     * Edits the details of an existing porting order.  Any or all of a porting orders attributes may be included in the resource object included in a PATCH request.  If a request does not include all of the attributes for a resource, the system will interpret the missing attributes as if they were included with their current values. To explicitly set something to null, it must be included in the request with a null value.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortingOrderTest() throws ApiException {
        //UUID id = null;
        //UpdatePortingOrder updatePortingOrder = null;
        //UpdatePortingOrder200Response response = api.updatePortingOrder(id, updatePortingOrder);
        // TODO: test validations
    }

    /**
     * Update a porting activation job
     *
     * Updates the activation time of a porting activation job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortingOrdersActivationJobTest() throws ApiException {
        //UUID id = null;
        //UUID activationJobId = null;
        //UpdatePortingOrdersActivationJobRequest updatePortingOrdersActivationJobRequest = null;
        //ActivatePortingOrder202Response response = api.updatePortingOrdersActivationJob(id, activationJobId, updatePortingOrdersActivationJobRequest);
        // TODO: test validations
    }

    /**
     * Verify the verification code for a list of phone numbers
     *
     * Verifies the verification code for a list of phone numbers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPortingVerificationCodesTest() throws ApiException {
        //UUID id = null;
        //VerifyPortingVerificationCodesRequest verifyPortingVerificationCodesRequest = null;
        //VerifyPortingVerificationCodes200Response response = api.verifyPortingVerificationCodes(id, verifyPortingVerificationCodesRequest);
        // TODO: test validations
    }
}
