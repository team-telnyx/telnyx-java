/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.CallRequestAnsweringMachineDetectionConfig;
import com.telnyx.sdk.model.CallRequestConferenceConfig;
import com.telnyx.sdk.model.CallRequestTo;
import com.telnyx.sdk.model.CustomSipHeader;
import com.telnyx.sdk.model.DialogflowConfig;
import com.telnyx.sdk.model.SipHeader;
import com.telnyx.sdk.model.SoundModifications;
import com.telnyx.sdk.model.StreamBidirectionalCodec;
import com.telnyx.sdk.model.StreamBidirectionalMode;
import com.telnyx.sdk.model.StreamBidirectionalSamplingRate;
import com.telnyx.sdk.model.StreamBidirectionalTargetLegs;
import com.telnyx.sdk.model.TranscriptionStartRequest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CallRequest
 */
public class CallRequestTest {

    private final CallRequest model = new CallRequest();

    /**
     * Model tests for CallRequest
     */
    @Test
    public void testCallRequest() {
        // TODO: test CallRequest
    }

    /**
     * Test the property 'to'
     */
    @Test
    public void toTest() {
        // TODO: test to
    }

    /**
     * Test the property 'from'
     */
    @Test
    public void fromTest() {
        // TODO: test from
    }

    /**
     * Test the property 'fromDisplayName'
     */
    @Test
    public void fromDisplayNameTest() {
        // TODO: test fromDisplayName
    }

    /**
     * Test the property 'connectionId'
     */
    @Test
    public void connectionIdTest() {
        // TODO: test connectionId
    }

    /**
     * Test the property 'audioUrl'
     */
    @Test
    public void audioUrlTest() {
        // TODO: test audioUrl
    }

    /**
     * Test the property 'mediaName'
     */
    @Test
    public void mediaNameTest() {
        // TODO: test mediaName
    }

    /**
     * Test the property 'preferredCodecs'
     */
    @Test
    public void preferredCodecsTest() {
        // TODO: test preferredCodecs
    }

    /**
     * Test the property 'timeoutSecs'
     */
    @Test
    public void timeoutSecsTest() {
        // TODO: test timeoutSecs
    }

    /**
     * Test the property 'timeLimitSecs'
     */
    @Test
    public void timeLimitSecsTest() {
        // TODO: test timeLimitSecs
    }

    /**
     * Test the property 'answeringMachineDetection'
     */
    @Test
    public void answeringMachineDetectionTest() {
        // TODO: test answeringMachineDetection
    }

    /**
     * Test the property 'answeringMachineDetectionConfig'
     */
    @Test
    public void answeringMachineDetectionConfigTest() {
        // TODO: test answeringMachineDetectionConfig
    }

    /**
     * Test the property 'conferenceConfig'
     */
    @Test
    public void conferenceConfigTest() {
        // TODO: test conferenceConfig
    }

    /**
     * Test the property 'customHeaders'
     */
    @Test
    public void customHeadersTest() {
        // TODO: test customHeaders
    }

    /**
     * Test the property 'billingGroupId'
     */
    @Test
    public void billingGroupIdTest() {
        // TODO: test billingGroupId
    }

    /**
     * Test the property 'clientState'
     */
    @Test
    public void clientStateTest() {
        // TODO: test clientState
    }

    /**
     * Test the property 'commandId'
     */
    @Test
    public void commandIdTest() {
        // TODO: test commandId
    }

    /**
     * Test the property 'linkTo'
     */
    @Test
    public void linkToTest() {
        // TODO: test linkTo
    }

    /**
     * Test the property 'mediaEncryption'
     */
    @Test
    public void mediaEncryptionTest() {
        // TODO: test mediaEncryption
    }

    /**
     * Test the property 'sipAuthUsername'
     */
    @Test
    public void sipAuthUsernameTest() {
        // TODO: test sipAuthUsername
    }

    /**
     * Test the property 'sipAuthPassword'
     */
    @Test
    public void sipAuthPasswordTest() {
        // TODO: test sipAuthPassword
    }

    /**
     * Test the property 'sipHeaders'
     */
    @Test
    public void sipHeadersTest() {
        // TODO: test sipHeaders
    }

    /**
     * Test the property 'sipTransportProtocol'
     */
    @Test
    public void sipTransportProtocolTest() {
        // TODO: test sipTransportProtocol
    }

    /**
     * Test the property 'soundModifications'
     */
    @Test
    public void soundModificationsTest() {
        // TODO: test soundModifications
    }

    /**
     * Test the property 'streamUrl'
     */
    @Test
    public void streamUrlTest() {
        // TODO: test streamUrl
    }

    /**
     * Test the property 'streamTrack'
     */
    @Test
    public void streamTrackTest() {
        // TODO: test streamTrack
    }

    /**
     * Test the property 'streamBidirectionalMode'
     */
    @Test
    public void streamBidirectionalModeTest() {
        // TODO: test streamBidirectionalMode
    }

    /**
     * Test the property 'streamBidirectionalCodec'
     */
    @Test
    public void streamBidirectionalCodecTest() {
        // TODO: test streamBidirectionalCodec
    }

    /**
     * Test the property 'streamBidirectionalTargetLegs'
     */
    @Test
    public void streamBidirectionalTargetLegsTest() {
        // TODO: test streamBidirectionalTargetLegs
    }

    /**
     * Test the property 'streamBidirectionalSamplingRate'
     */
    @Test
    public void streamBidirectionalSamplingRateTest() {
        // TODO: test streamBidirectionalSamplingRate
    }

    /**
     * Test the property 'sendSilenceWhenIdle'
     */
    @Test
    public void sendSilenceWhenIdleTest() {
        // TODO: test sendSilenceWhenIdle
    }

    /**
     * Test the property 'webhookUrl'
     */
    @Test
    public void webhookUrlTest() {
        // TODO: test webhookUrl
    }

    /**
     * Test the property 'webhookUrlMethod'
     */
    @Test
    public void webhookUrlMethodTest() {
        // TODO: test webhookUrlMethod
    }

    /**
     * Test the property 'record'
     */
    @Test
    public void recordTest() {
        // TODO: test record
    }

    /**
     * Test the property 'recordChannels'
     */
    @Test
    public void recordChannelsTest() {
        // TODO: test recordChannels
    }

    /**
     * Test the property 'recordFormat'
     */
    @Test
    public void recordFormatTest() {
        // TODO: test recordFormat
    }

    /**
     * Test the property 'recordMaxLength'
     */
    @Test
    public void recordMaxLengthTest() {
        // TODO: test recordMaxLength
    }

    /**
     * Test the property 'recordTimeoutSecs'
     */
    @Test
    public void recordTimeoutSecsTest() {
        // TODO: test recordTimeoutSecs
    }

    /**
     * Test the property 'recordTrack'
     */
    @Test
    public void recordTrackTest() {
        // TODO: test recordTrack
    }

    /**
     * Test the property 'recordTrim'
     */
    @Test
    public void recordTrimTest() {
        // TODO: test recordTrim
    }

    /**
     * Test the property 'recordCustomFileName'
     */
    @Test
    public void recordCustomFileNameTest() {
        // TODO: test recordCustomFileName
    }

    /**
     * Test the property 'superviseCallControlId'
     */
    @Test
    public void superviseCallControlIdTest() {
        // TODO: test superviseCallControlId
    }

    /**
     * Test the property 'supervisorRole'
     */
    @Test
    public void supervisorRoleTest() {
        // TODO: test supervisorRole
    }

    /**
     * Test the property 'enableDialogflow'
     */
    @Test
    public void enableDialogflowTest() {
        // TODO: test enableDialogflow
    }

    /**
     * Test the property 'dialogflowConfig'
     */
    @Test
    public void dialogflowConfigTest() {
        // TODO: test dialogflowConfig
    }

    /**
     * Test the property 'transcription'
     */
    @Test
    public void transcriptionTest() {
        // TODO: test transcription
    }

    /**
     * Test the property 'transcriptionConfig'
     */
    @Test
    public void transcriptionConfigTest() {
        // TODO: test transcriptionConfig
    }
}
