/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.CallAIGatherToolCallEventDataPayloadToolCall;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * CallAIGatherToolCallEventDataPayload
 */
@JsonPropertyOrder({
  CallAIGatherToolCallEventDataPayload.JSON_PROPERTY_CALL_CONTROL_ID,
  CallAIGatherToolCallEventDataPayload.JSON_PROPERTY_TOOL_CALL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class CallAIGatherToolCallEventDataPayload {
  public static final String JSON_PROPERTY_CALL_CONTROL_ID = "call_control_id";
  private String callControlId;

  public static final String JSON_PROPERTY_TOOL_CALL = "tool_call";
  private CallAIGatherToolCallEventDataPayloadToolCall toolCall;

  public CallAIGatherToolCallEventDataPayload() { 
  }

  public CallAIGatherToolCallEventDataPayload callControlId(String callControlId) {
    this.callControlId = callControlId;
    return this;
  }

   /**
   * Get callControlId
   * @return callControlId
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CALL_CONTROL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCallControlId() {
    return callControlId;
  }


  @JsonProperty(JSON_PROPERTY_CALL_CONTROL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCallControlId(String callControlId) {
    this.callControlId = callControlId;
  }


  public CallAIGatherToolCallEventDataPayload toolCall(CallAIGatherToolCallEventDataPayloadToolCall toolCall) {
    this.toolCall = toolCall;
    return this;
  }

   /**
   * Get toolCall
   * @return toolCall
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_TOOL_CALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CallAIGatherToolCallEventDataPayloadToolCall getToolCall() {
    return toolCall;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolCall(CallAIGatherToolCallEventDataPayloadToolCall toolCall) {
    this.toolCall = toolCall;
  }


  /**
   * Return true if this CallAIGatherToolCallEvent_data_payload object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallAIGatherToolCallEventDataPayload callAIGatherToolCallEventDataPayload = (CallAIGatherToolCallEventDataPayload) o;
    return Objects.equals(this.callControlId, callAIGatherToolCallEventDataPayload.callControlId) &&
        Objects.equals(this.toolCall, callAIGatherToolCallEventDataPayload.toolCall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callControlId, toolCall);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallAIGatherToolCallEventDataPayload {\n");
    sb.append("    callControlId: ").append(toIndentedString(callControlId)).append("\n");
    sb.append("    toolCall: ").append(toIndentedString(toolCall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

