/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * LeaveConferenceRequest
 */
@JsonPropertyOrder({
  LeaveConferenceRequest.JSON_PROPERTY_CALL_CONTROL_ID,
  LeaveConferenceRequest.JSON_PROPERTY_COMMAND_ID,
  LeaveConferenceRequest.JSON_PROPERTY_BEEP_ENABLED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class LeaveConferenceRequest {
  public static final String JSON_PROPERTY_CALL_CONTROL_ID = "call_control_id";
  private String callControlId;

  public static final String JSON_PROPERTY_COMMAND_ID = "command_id";
  private String commandId;

  /**
   * Whether a beep sound should be played when the participant leaves the conference. Can be used to override the conference-level setting.
   */
  public enum BeepEnabledEnum {
    ALWAYS(String.valueOf("always")),
    
    NEVER(String.valueOf("never")),
    
    ON_ENTER(String.valueOf("on_enter")),
    
    ON_EXIT(String.valueOf("on_exit"));

    private String value;

    BeepEnabledEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BeepEnabledEnum fromValue(String value) {
      for (BeepEnabledEnum b : BeepEnabledEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BEEP_ENABLED = "beep_enabled";
  private BeepEnabledEnum beepEnabled;

  public LeaveConferenceRequest() { 
  }

  public LeaveConferenceRequest callControlId(String callControlId) {
    this.callControlId = callControlId;
    return this;
  }

   /**
   * Unique identifier and token for controlling the call
   * @return callControlId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "f91269aa-61d1-417f-97b3-10e020e8bc47", required = true, value = "Unique identifier and token for controlling the call")
  @JsonProperty(JSON_PROPERTY_CALL_CONTROL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCallControlId() {
    return callControlId;
  }


  @JsonProperty(JSON_PROPERTY_CALL_CONTROL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCallControlId(String callControlId) {
    this.callControlId = callControlId;
  }


  public LeaveConferenceRequest commandId(String commandId) {
    this.commandId = commandId;
    return this;
  }

   /**
   * Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same &#x60;command_id&#x60; as one that has already been executed.
   * @return commandId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "891510ac-f3e4-11e8-af5b-de00688a4901", value = "Use this field to avoid execution of duplicate commands. Telnyx will ignore subsequent commands with the same `command_id` as one that has already been executed.")
  @JsonProperty(JSON_PROPERTY_COMMAND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommandId() {
    return commandId;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommandId(String commandId) {
    this.commandId = commandId;
  }


  public LeaveConferenceRequest beepEnabled(BeepEnabledEnum beepEnabled) {
    this.beepEnabled = beepEnabled;
    return this;
  }

   /**
   * Whether a beep sound should be played when the participant leaves the conference. Can be used to override the conference-level setting.
   * @return beepEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "on_exit", value = "Whether a beep sound should be played when the participant leaves the conference. Can be used to override the conference-level setting.")
  @JsonProperty(JSON_PROPERTY_BEEP_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BeepEnabledEnum getBeepEnabled() {
    return beepEnabled;
  }


  @JsonProperty(JSON_PROPERTY_BEEP_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeepEnabled(BeepEnabledEnum beepEnabled) {
    this.beepEnabled = beepEnabled;
  }


  /**
   * Return true if this LeaveConferenceRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaveConferenceRequest leaveConferenceRequest = (LeaveConferenceRequest) o;
    return Objects.equals(this.callControlId, leaveConferenceRequest.callControlId) &&
        Objects.equals(this.commandId, leaveConferenceRequest.commandId) &&
        Objects.equals(this.beepEnabled, leaveConferenceRequest.beepEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callControlId, commandId, beepEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaveConferenceRequest {\n");
    sb.append("    callControlId: ").append(toIndentedString(callControlId)).append("\n");
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("    beepEnabled: ").append(toIndentedString(beepEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

