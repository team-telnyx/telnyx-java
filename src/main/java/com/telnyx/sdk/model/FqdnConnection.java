/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.JSON;
import com.telnyx.sdk.model.AnchorsiteOverride;
import com.telnyx.sdk.model.ConnectionRtcpSettings;
import com.telnyx.sdk.model.DtmfType;
import com.telnyx.sdk.model.EncryptedMedia;
import com.telnyx.sdk.model.FqdnConnectionTransportProtocol;
import com.telnyx.sdk.model.InboundFqdn;
import com.telnyx.sdk.model.OutboundFqdn;
import com.telnyx.sdk.model.WebhookApiVersion;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Arrays;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * FqdnConnection
 */
@JsonPropertyOrder(
    {
        FqdnConnection.JSON_PROPERTY_ID,
        FqdnConnection.JSON_PROPERTY_RECORD_TYPE,
        FqdnConnection.JSON_PROPERTY_ACTIVE,
        FqdnConnection.JSON_PROPERTY_ANCHORSITE_OVERRIDE,
        FqdnConnection.JSON_PROPERTY_CONNECTION_NAME,
        FqdnConnection.JSON_PROPERTY_TRANSPORT_PROTOCOL,
        FqdnConnection.JSON_PROPERTY_DEFAULT_ON_HOLD_COMFORT_NOISE_ENABLED,
        FqdnConnection.JSON_PROPERTY_DTMF_TYPE,
        FqdnConnection.JSON_PROPERTY_ENCODE_CONTACT_HEADER_ENABLED,
        FqdnConnection.JSON_PROPERTY_ENCRYPTED_MEDIA,
        FqdnConnection.JSON_PROPERTY_MICROSOFT_TEAMS_SBC,
        FqdnConnection.JSON_PROPERTY_ONNET_T38_PASSTHROUGH_ENABLED,
        FqdnConnection.JSON_PROPERTY_USER_NAME,
        FqdnConnection.JSON_PROPERTY_PASSWORD,
        FqdnConnection.JSON_PROPERTY_RTP_PASS_CODECS_ON_STREAM_CHANGE,
        FqdnConnection.JSON_PROPERTY_ADJUST_DTMF_TIMESTAMP,
        FqdnConnection.JSON_PROPERTY_IGNORE_DTMF_DURATION,
        FqdnConnection.JSON_PROPERTY_IGNORE_MARK_BIT,
        FqdnConnection.JSON_PROPERTY_CALL_COST_ENABLED,
        FqdnConnection.JSON_PROPERTY_NOISE_SUPPRESSION,
        FqdnConnection.JSON_PROPERTY_SEND_NORMALIZED_TIMESTAMPS,
        FqdnConnection.JSON_PROPERTY_THIRD_PARTY_CONTROL_ENABLED,
        FqdnConnection.JSON_PROPERTY_TXT_NAME,
        FqdnConnection.JSON_PROPERTY_TXT_VALUE,
        FqdnConnection.JSON_PROPERTY_TXT_TTL,
        FqdnConnection.JSON_PROPERTY_WEBHOOK_EVENT_URL,
        FqdnConnection.JSON_PROPERTY_WEBHOOK_EVENT_FAILOVER_URL,
        FqdnConnection.JSON_PROPERTY_WEBHOOK_API_VERSION,
        FqdnConnection.JSON_PROPERTY_WEBHOOK_TIMEOUT_SECS,
        FqdnConnection.JSON_PROPERTY_RTCP_SETTINGS,
        FqdnConnection.JSON_PROPERTY_CREATED_AT,
        FqdnConnection.JSON_PROPERTY_UPDATED_AT,
        FqdnConnection.JSON_PROPERTY_INBOUND,
        FqdnConnection.JSON_PROPERTY_OUTBOUND,
    }
)
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
public class FqdnConnection {

    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_RECORD_TYPE = "record_type";
    private String recordType;

    public static final String JSON_PROPERTY_ACTIVE = "active";
    private Boolean active;

    public static final String JSON_PROPERTY_ANCHORSITE_OVERRIDE =
        "anchorsite_override";
    private AnchorsiteOverride anchorsiteOverride = AnchorsiteOverride.LATENCY;

    public static final String JSON_PROPERTY_CONNECTION_NAME =
        "connection_name";
    private String connectionName;

    public static final String JSON_PROPERTY_TRANSPORT_PROTOCOL =
        "transport_protocol";
    private FqdnConnectionTransportProtocol transportProtocol =
        FqdnConnectionTransportProtocol.UDP;

    public static final String JSON_PROPERTY_DEFAULT_ON_HOLD_COMFORT_NOISE_ENABLED =
        "default_on_hold_comfort_noise_enabled";
    private Boolean defaultOnHoldComfortNoiseEnabled = true;

    public static final String JSON_PROPERTY_DTMF_TYPE = "dtmf_type";
    private DtmfType dtmfType = DtmfType.RFC_2833;

    public static final String JSON_PROPERTY_ENCODE_CONTACT_HEADER_ENABLED =
        "encode_contact_header_enabled";
    private Boolean encodeContactHeaderEnabled = false;

    public static final String JSON_PROPERTY_ENCRYPTED_MEDIA =
        "encrypted_media";
    private JsonNullable<EncryptedMedia> encryptedMedia = JsonNullable.<
            EncryptedMedia
        >undefined();

    public static final String JSON_PROPERTY_MICROSOFT_TEAMS_SBC =
        "microsoft_teams_sbc";
    private Boolean microsoftTeamsSbc = false;

    public static final String JSON_PROPERTY_ONNET_T38_PASSTHROUGH_ENABLED =
        "onnet_t38_passthrough_enabled";
    private Boolean onnetT38PassthroughEnabled = false;

    public static final String JSON_PROPERTY_USER_NAME = "user_name";
    private String userName;

    public static final String JSON_PROPERTY_PASSWORD = "password";
    private String password;

    public static final String JSON_PROPERTY_RTP_PASS_CODECS_ON_STREAM_CHANGE =
        "rtp_pass_codecs_on_stream_change";
    private Boolean rtpPassCodecsOnStreamChange;

    public static final String JSON_PROPERTY_ADJUST_DTMF_TIMESTAMP =
        "adjust_dtmf_timestamp";
    private Boolean adjustDtmfTimestamp;

    public static final String JSON_PROPERTY_IGNORE_DTMF_DURATION =
        "ignore_dtmf_duration";
    private Boolean ignoreDtmfDuration;

    public static final String JSON_PROPERTY_IGNORE_MARK_BIT =
        "ignore_mark_bit";
    private Boolean ignoreMarkBit;

    public static final String JSON_PROPERTY_CALL_COST_ENABLED =
        "call_cost_enabled";
    private Boolean callCostEnabled;

    public static final String JSON_PROPERTY_NOISE_SUPPRESSION =
        "noise_suppression";
    private Boolean noiseSuppression;

    public static final String JSON_PROPERTY_SEND_NORMALIZED_TIMESTAMPS =
        "send_normalized_timestamps";
    private Boolean sendNormalizedTimestamps;

    public static final String JSON_PROPERTY_THIRD_PARTY_CONTROL_ENABLED =
        "third_party_control_enabled";
    private Boolean thirdPartyControlEnabled;

    public static final String JSON_PROPERTY_TXT_NAME = "txt_name";
    private String txtName;

    public static final String JSON_PROPERTY_TXT_VALUE = "txt_value";
    private String txtValue;

    public static final String JSON_PROPERTY_TXT_TTL = "txt_ttl";
    private Integer txtTtl;

    public static final String JSON_PROPERTY_WEBHOOK_EVENT_URL =
        "webhook_event_url";
    private String webhookEventUrl;

    public static final String JSON_PROPERTY_WEBHOOK_EVENT_FAILOVER_URL =
        "webhook_event_failover_url";
    private JsonNullable<String> webhookEventFailoverUrl = JsonNullable.<
            String
        >of("");

    public static final String JSON_PROPERTY_WEBHOOK_API_VERSION =
        "webhook_api_version";
    private WebhookApiVersion webhookApiVersion = WebhookApiVersion._1;

    public static final String JSON_PROPERTY_WEBHOOK_TIMEOUT_SECS =
        "webhook_timeout_secs";
    private JsonNullable<Integer> webhookTimeoutSecs = JsonNullable.<
            Integer
        >undefined();

    public static final String JSON_PROPERTY_RTCP_SETTINGS = "rtcp_settings";
    private ConnectionRtcpSettings rtcpSettings;

    public static final String JSON_PROPERTY_CREATED_AT = "created_at";
    private String createdAt;

    public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
    private String updatedAt;

    public static final String JSON_PROPERTY_INBOUND = "inbound";
    private InboundFqdn inbound;

    public static final String JSON_PROPERTY_OUTBOUND = "outbound";
    private OutboundFqdn outbound;

    public FqdnConnection() {}

    @JsonCreator
    public FqdnConnection(
        @JsonProperty(JSON_PROPERTY_CREATED_AT) String createdAt,
        @JsonProperty(JSON_PROPERTY_UPDATED_AT) String updatedAt
    ) {
        this();
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public FqdnConnection id(String id) {
        this.id = id;
        return this;
    }

    /**
     * Identifies the resource.
     * @return id
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "1293384261075731499",
        value = "Identifies the resource."
    )
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setId(String id) {
        this.id = id;
    }

    public FqdnConnection recordType(String recordType) {
        this.recordType = recordType;
        return this;
    }

    /**
     * Identifies the type of the resource.
     * @return recordType
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "fqdn_connection",
        value = "Identifies the type of the resource."
    )
    @JsonProperty(JSON_PROPERTY_RECORD_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRecordType() {
        return recordType;
    }

    @JsonProperty(JSON_PROPERTY_RECORD_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecordType(String recordType) {
        this.recordType = recordType;
    }

    public FqdnConnection active(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Defaults to true
     * @return active
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "Defaults to true")
    @JsonProperty(JSON_PROPERTY_ACTIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getActive() {
        return active;
    }

    @JsonProperty(JSON_PROPERTY_ACTIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setActive(Boolean active) {
        this.active = active;
    }

    public FqdnConnection anchorsiteOverride(
        AnchorsiteOverride anchorsiteOverride
    ) {
        this.anchorsiteOverride = anchorsiteOverride;
        return this;
    }

    /**
     * Get anchorsiteOverride
     * @return anchorsiteOverride
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_ANCHORSITE_OVERRIDE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AnchorsiteOverride getAnchorsiteOverride() {
        return anchorsiteOverride;
    }

    @JsonProperty(JSON_PROPERTY_ANCHORSITE_OVERRIDE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAnchorsiteOverride(AnchorsiteOverride anchorsiteOverride) {
        this.anchorsiteOverride = anchorsiteOverride;
    }

    public FqdnConnection connectionName(String connectionName) {
        this.connectionName = connectionName;
        return this;
    }

    /**
     * A user-assigned name to help manage the connection.
     * @return connectionName
     **/
    @jakarta.annotation.Nonnull
    @ApiModelProperty(
        example = "office-connection",
        required = true,
        value = "A user-assigned name to help manage the connection."
    )
    @JsonProperty(JSON_PROPERTY_CONNECTION_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getConnectionName() {
        return connectionName;
    }

    @JsonProperty(JSON_PROPERTY_CONNECTION_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConnectionName(String connectionName) {
        this.connectionName = connectionName;
    }

    public FqdnConnection transportProtocol(
        FqdnConnectionTransportProtocol transportProtocol
    ) {
        this.transportProtocol = transportProtocol;
        return this;
    }

    /**
     * Get transportProtocol
     * @return transportProtocol
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_TRANSPORT_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public FqdnConnectionTransportProtocol getTransportProtocol() {
        return transportProtocol;
    }

    @JsonProperty(JSON_PROPERTY_TRANSPORT_PROTOCOL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTransportProtocol(
        FqdnConnectionTransportProtocol transportProtocol
    ) {
        this.transportProtocol = transportProtocol;
    }

    public FqdnConnection defaultOnHoldComfortNoiseEnabled(
        Boolean defaultOnHoldComfortNoiseEnabled
    ) {
        this.defaultOnHoldComfortNoiseEnabled =
            defaultOnHoldComfortNoiseEnabled;
        return this;
    }

    /**
     * When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout.
     * @return defaultOnHoldComfortNoiseEnabled
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "When enabled, Telnyx will generate comfort noise when you place the call on hold. If disabled, you will need to generate comfort noise or on hold music to avoid RTP timeout."
    )
    @JsonProperty(JSON_PROPERTY_DEFAULT_ON_HOLD_COMFORT_NOISE_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getDefaultOnHoldComfortNoiseEnabled() {
        return defaultOnHoldComfortNoiseEnabled;
    }

    @JsonProperty(JSON_PROPERTY_DEFAULT_ON_HOLD_COMFORT_NOISE_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDefaultOnHoldComfortNoiseEnabled(
        Boolean defaultOnHoldComfortNoiseEnabled
    ) {
        this.defaultOnHoldComfortNoiseEnabled =
            defaultOnHoldComfortNoiseEnabled;
    }

    public FqdnConnection dtmfType(DtmfType dtmfType) {
        this.dtmfType = dtmfType;
        return this;
    }

    /**
     * Get dtmfType
     * @return dtmfType
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DTMF_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DtmfType getDtmfType() {
        return dtmfType;
    }

    @JsonProperty(JSON_PROPERTY_DTMF_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDtmfType(DtmfType dtmfType) {
        this.dtmfType = dtmfType;
    }

    public FqdnConnection encodeContactHeaderEnabled(
        Boolean encodeContactHeaderEnabled
    ) {
        this.encodeContactHeaderEnabled = encodeContactHeaderEnabled;
        return this;
    }

    /**
     * Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios.
     * @return encodeContactHeaderEnabled
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Encode the SIP contact header sent by Telnyx to avoid issues for NAT or ALG scenarios."
    )
    @JsonProperty(JSON_PROPERTY_ENCODE_CONTACT_HEADER_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getEncodeContactHeaderEnabled() {
        return encodeContactHeaderEnabled;
    }

    @JsonProperty(JSON_PROPERTY_ENCODE_CONTACT_HEADER_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEncodeContactHeaderEnabled(
        Boolean encodeContactHeaderEnabled
    ) {
        this.encodeContactHeaderEnabled = encodeContactHeaderEnabled;
    }

    public FqdnConnection encryptedMedia(EncryptedMedia encryptedMedia) {
        this.encryptedMedia = JsonNullable.<EncryptedMedia>of(encryptedMedia);
        return this;
    }

    /**
     * Get encryptedMedia
     * @return encryptedMedia
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonIgnore
    public EncryptedMedia getEncryptedMedia() {
        return encryptedMedia.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_ENCRYPTED_MEDIA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<EncryptedMedia> getEncryptedMedia_JsonNullable() {
        return encryptedMedia;
    }

    @JsonProperty(JSON_PROPERTY_ENCRYPTED_MEDIA)
    public void setEncryptedMedia_JsonNullable(
        JsonNullable<EncryptedMedia> encryptedMedia
    ) {
        this.encryptedMedia = encryptedMedia;
    }

    public void setEncryptedMedia(EncryptedMedia encryptedMedia) {
        this.encryptedMedia = JsonNullable.<EncryptedMedia>of(encryptedMedia);
    }

    public FqdnConnection microsoftTeamsSbc(Boolean microsoftTeamsSbc) {
        this.microsoftTeamsSbc = microsoftTeamsSbc;
        return this;
    }

    /**
     * The connection is enabled for Microsoft Teams Direct Routing.
     * @return microsoftTeamsSbc
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "The connection is enabled for Microsoft Teams Direct Routing."
    )
    @JsonProperty(JSON_PROPERTY_MICROSOFT_TEAMS_SBC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getMicrosoftTeamsSbc() {
        return microsoftTeamsSbc;
    }

    @JsonProperty(JSON_PROPERTY_MICROSOFT_TEAMS_SBC)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMicrosoftTeamsSbc(Boolean microsoftTeamsSbc) {
        this.microsoftTeamsSbc = microsoftTeamsSbc;
    }

    public FqdnConnection onnetT38PassthroughEnabled(
        Boolean onnetT38PassthroughEnabled
    ) {
        this.onnetT38PassthroughEnabled = onnetT38PassthroughEnabled;
        return this;
    }

    /**
     * Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg&#39;s settings.
     * @return onnetT38PassthroughEnabled
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Enable on-net T38 if you prefer that the sender and receiver negotiate T38 directly when both are on the Telnyx network. If this is disabled, Telnyx will be able to use T38 on just one leg of the call according to each leg's settings."
    )
    @JsonProperty(JSON_PROPERTY_ONNET_T38_PASSTHROUGH_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getOnnetT38PassthroughEnabled() {
        return onnetT38PassthroughEnabled;
    }

    @JsonProperty(JSON_PROPERTY_ONNET_T38_PASSTHROUGH_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOnnetT38PassthroughEnabled(
        Boolean onnetT38PassthroughEnabled
    ) {
        this.onnetT38PassthroughEnabled = onnetT38PassthroughEnabled;
    }

    public FqdnConnection userName(String userName) {
        this.userName = userName;
        return this;
    }

    /**
     * The username for the FQDN connection.
     * @return userName
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "The username for the FQDN connection.")
    @JsonProperty(JSON_PROPERTY_USER_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUserName() {
        return userName;
    }

    @JsonProperty(JSON_PROPERTY_USER_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUserName(String userName) {
        this.userName = userName;
    }

    public FqdnConnection password(String password) {
        this.password = password;
        return this;
    }

    /**
     * The password for the FQDN connection.
     * @return password
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "The password for the FQDN connection.")
    @JsonProperty(JSON_PROPERTY_PASSWORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPassword() {
        return password;
    }

    @JsonProperty(JSON_PROPERTY_PASSWORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPassword(String password) {
        this.password = password;
    }

    public FqdnConnection rtpPassCodecsOnStreamChange(
        Boolean rtpPassCodecsOnStreamChange
    ) {
        this.rtpPassCodecsOnStreamChange = rtpPassCodecsOnStreamChange;
        return this;
    }

    /**
     * Defines if codecs should be passed on stream change.
     * @return rtpPassCodecsOnStreamChange
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Defines if codecs should be passed on stream change."
    )
    @JsonProperty(JSON_PROPERTY_RTP_PASS_CODECS_ON_STREAM_CHANGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getRtpPassCodecsOnStreamChange() {
        return rtpPassCodecsOnStreamChange;
    }

    @JsonProperty(JSON_PROPERTY_RTP_PASS_CODECS_ON_STREAM_CHANGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRtpPassCodecsOnStreamChange(
        Boolean rtpPassCodecsOnStreamChange
    ) {
        this.rtpPassCodecsOnStreamChange = rtpPassCodecsOnStreamChange;
    }

    public FqdnConnection adjustDtmfTimestamp(Boolean adjustDtmfTimestamp) {
        this.adjustDtmfTimestamp = adjustDtmfTimestamp;
        return this;
    }

    /**
     * Indicates whether DTMF timestamp adjustment is enabled.
     * @return adjustDtmfTimestamp
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Indicates whether DTMF timestamp adjustment is enabled."
    )
    @JsonProperty(JSON_PROPERTY_ADJUST_DTMF_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getAdjustDtmfTimestamp() {
        return adjustDtmfTimestamp;
    }

    @JsonProperty(JSON_PROPERTY_ADJUST_DTMF_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAdjustDtmfTimestamp(Boolean adjustDtmfTimestamp) {
        this.adjustDtmfTimestamp = adjustDtmfTimestamp;
    }

    public FqdnConnection ignoreDtmfDuration(Boolean ignoreDtmfDuration) {
        this.ignoreDtmfDuration = ignoreDtmfDuration;
        return this;
    }

    /**
     * Indicates whether DTMF duration should be ignored.
     * @return ignoreDtmfDuration
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Indicates whether DTMF duration should be ignored."
    )
    @JsonProperty(JSON_PROPERTY_IGNORE_DTMF_DURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIgnoreDtmfDuration() {
        return ignoreDtmfDuration;
    }

    @JsonProperty(JSON_PROPERTY_IGNORE_DTMF_DURATION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIgnoreDtmfDuration(Boolean ignoreDtmfDuration) {
        this.ignoreDtmfDuration = ignoreDtmfDuration;
    }

    public FqdnConnection ignoreMarkBit(Boolean ignoreMarkBit) {
        this.ignoreMarkBit = ignoreMarkBit;
        return this;
    }

    /**
     * Indicates whether the mark bit should be ignored.
     * @return ignoreMarkBit
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Indicates whether the mark bit should be ignored."
    )
    @JsonProperty(JSON_PROPERTY_IGNORE_MARK_BIT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getIgnoreMarkBit() {
        return ignoreMarkBit;
    }

    @JsonProperty(JSON_PROPERTY_IGNORE_MARK_BIT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIgnoreMarkBit(Boolean ignoreMarkBit) {
        this.ignoreMarkBit = ignoreMarkBit;
    }

    public FqdnConnection callCostEnabled(Boolean callCostEnabled) {
        this.callCostEnabled = callCostEnabled;
        return this;
    }

    /**
     * Indicates whether call cost calculation is enabled.
     * @return callCostEnabled
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Indicates whether call cost calculation is enabled."
    )
    @JsonProperty(JSON_PROPERTY_CALL_COST_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCallCostEnabled() {
        return callCostEnabled;
    }

    @JsonProperty(JSON_PROPERTY_CALL_COST_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCallCostEnabled(Boolean callCostEnabled) {
        this.callCostEnabled = callCostEnabled;
    }

    public FqdnConnection noiseSuppression(Boolean noiseSuppression) {
        this.noiseSuppression = noiseSuppression;
        return this;
    }

    /**
     * Indicates whether noise suppression is enabled.
     * @return noiseSuppression
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "Indicates whether noise suppression is enabled.")
    @JsonProperty(JSON_PROPERTY_NOISE_SUPPRESSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getNoiseSuppression() {
        return noiseSuppression;
    }

    @JsonProperty(JSON_PROPERTY_NOISE_SUPPRESSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNoiseSuppression(Boolean noiseSuppression) {
        this.noiseSuppression = noiseSuppression;
    }

    public FqdnConnection sendNormalizedTimestamps(
        Boolean sendNormalizedTimestamps
    ) {
        this.sendNormalizedTimestamps = sendNormalizedTimestamps;
        return this;
    }

    /**
     * Indicates whether normalized timestamps should be sent.
     * @return sendNormalizedTimestamps
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Indicates whether normalized timestamps should be sent."
    )
    @JsonProperty(JSON_PROPERTY_SEND_NORMALIZED_TIMESTAMPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getSendNormalizedTimestamps() {
        return sendNormalizedTimestamps;
    }

    @JsonProperty(JSON_PROPERTY_SEND_NORMALIZED_TIMESTAMPS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSendNormalizedTimestamps(Boolean sendNormalizedTimestamps) {
        this.sendNormalizedTimestamps = sendNormalizedTimestamps;
    }

    public FqdnConnection thirdPartyControlEnabled(
        Boolean thirdPartyControlEnabled
    ) {
        this.thirdPartyControlEnabled = thirdPartyControlEnabled;
        return this;
    }

    /**
     * Indicates whether third-party control is enabled.
     * @return thirdPartyControlEnabled
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "Indicates whether third-party control is enabled."
    )
    @JsonProperty(JSON_PROPERTY_THIRD_PARTY_CONTROL_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getThirdPartyControlEnabled() {
        return thirdPartyControlEnabled;
    }

    @JsonProperty(JSON_PROPERTY_THIRD_PARTY_CONTROL_ENABLED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setThirdPartyControlEnabled(Boolean thirdPartyControlEnabled) {
        this.thirdPartyControlEnabled = thirdPartyControlEnabled;
    }

    public FqdnConnection txtName(String txtName) {
        this.txtName = txtName;
        return this;
    }

    /**
     * The name for the TXT record associated with the FQDN connection.
     * @return txtName
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "The name for the TXT record associated with the FQDN connection."
    )
    @JsonProperty(JSON_PROPERTY_TXT_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTxtName() {
        return txtName;
    }

    @JsonProperty(JSON_PROPERTY_TXT_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTxtName(String txtName) {
        this.txtName = txtName;
    }

    public FqdnConnection txtValue(String txtValue) {
        this.txtValue = txtValue;
        return this;
    }

    /**
     * The value for the TXT record associated with the FQDN connection.
     * @return txtValue
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "The value for the TXT record associated with the FQDN connection."
    )
    @JsonProperty(JSON_PROPERTY_TXT_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTxtValue() {
        return txtValue;
    }

    @JsonProperty(JSON_PROPERTY_TXT_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTxtValue(String txtValue) {
        this.txtValue = txtValue;
    }

    public FqdnConnection txtTtl(Integer txtTtl) {
        this.txtTtl = txtTtl;
        return this;
    }

    /**
     * The time to live for the TXT record associated with the FQDN connection.
     * @return txtTtl
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        value = "The time to live for the TXT record associated with the FQDN connection."
    )
    @JsonProperty(JSON_PROPERTY_TXT_TTL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTxtTtl() {
        return txtTtl;
    }

    @JsonProperty(JSON_PROPERTY_TXT_TTL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTxtTtl(Integer txtTtl) {
        this.txtTtl = txtTtl;
    }

    public FqdnConnection webhookEventUrl(String webhookEventUrl) {
        this.webhookEventUrl = webhookEventUrl;
        return this;
    }

    /**
     * The URL where webhooks related to this connection will be sent. Must include a scheme, such as &#39;https&#39;.
     * @return webhookEventUrl
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "https://example.com",
        value = "The URL where webhooks related to this connection will be sent. Must include a scheme, such as 'https'."
    )
    @JsonProperty(JSON_PROPERTY_WEBHOOK_EVENT_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getWebhookEventUrl() {
        return webhookEventUrl;
    }

    @JsonProperty(JSON_PROPERTY_WEBHOOK_EVENT_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWebhookEventUrl(String webhookEventUrl) {
        this.webhookEventUrl = webhookEventUrl;
    }

    public FqdnConnection webhookEventFailoverUrl(
        String webhookEventFailoverUrl
    ) {
        this.webhookEventFailoverUrl = JsonNullable.<String>of(
            webhookEventFailoverUrl
        );
        return this;
    }

    /**
     * The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as &#39;https&#39;.
     * @return webhookEventFailoverUrl
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "https://failover.example.com",
        value = "The failover URL where webhooks related to this connection will be sent if sending to the primary URL fails. Must include a scheme, such as 'https'."
    )
    @JsonIgnore
    public String getWebhookEventFailoverUrl() {
        return webhookEventFailoverUrl.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_WEBHOOK_EVENT_FAILOVER_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<String> getWebhookEventFailoverUrl_JsonNullable() {
        return webhookEventFailoverUrl;
    }

    @JsonProperty(JSON_PROPERTY_WEBHOOK_EVENT_FAILOVER_URL)
    public void setWebhookEventFailoverUrl_JsonNullable(
        JsonNullable<String> webhookEventFailoverUrl
    ) {
        this.webhookEventFailoverUrl = webhookEventFailoverUrl;
    }

    public void setWebhookEventFailoverUrl(String webhookEventFailoverUrl) {
        this.webhookEventFailoverUrl = JsonNullable.<String>of(
            webhookEventFailoverUrl
        );
    }

    public FqdnConnection webhookApiVersion(
        WebhookApiVersion webhookApiVersion
    ) {
        this.webhookApiVersion = webhookApiVersion;
        return this;
    }

    /**
     * Get webhookApiVersion
     * @return webhookApiVersion
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_WEBHOOK_API_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public WebhookApiVersion getWebhookApiVersion() {
        return webhookApiVersion;
    }

    @JsonProperty(JSON_PROPERTY_WEBHOOK_API_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setWebhookApiVersion(WebhookApiVersion webhookApiVersion) {
        this.webhookApiVersion = webhookApiVersion;
    }

    public FqdnConnection webhookTimeoutSecs(Integer webhookTimeoutSecs) {
        this.webhookTimeoutSecs = JsonNullable.<Integer>of(webhookTimeoutSecs);
        return this;
    }

    /**
     * Specifies how many seconds to wait before timing out a webhook.
     * minimum: 0
     * maximum: 30
     * @return webhookTimeoutSecs
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "25",
        value = "Specifies how many seconds to wait before timing out a webhook."
    )
    @JsonIgnore
    public Integer getWebhookTimeoutSecs() {
        return webhookTimeoutSecs.orElse(null);
    }

    @JsonProperty(JSON_PROPERTY_WEBHOOK_TIMEOUT_SECS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public JsonNullable<Integer> getWebhookTimeoutSecs_JsonNullable() {
        return webhookTimeoutSecs;
    }

    @JsonProperty(JSON_PROPERTY_WEBHOOK_TIMEOUT_SECS)
    public void setWebhookTimeoutSecs_JsonNullable(
        JsonNullable<Integer> webhookTimeoutSecs
    ) {
        this.webhookTimeoutSecs = webhookTimeoutSecs;
    }

    public void setWebhookTimeoutSecs(Integer webhookTimeoutSecs) {
        this.webhookTimeoutSecs = JsonNullable.<Integer>of(webhookTimeoutSecs);
    }

    public FqdnConnection rtcpSettings(ConnectionRtcpSettings rtcpSettings) {
        this.rtcpSettings = rtcpSettings;
        return this;
    }

    /**
     * Get rtcpSettings
     * @return rtcpSettings
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_RTCP_SETTINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ConnectionRtcpSettings getRtcpSettings() {
        return rtcpSettings;
    }

    @JsonProperty(JSON_PROPERTY_RTCP_SETTINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRtcpSettings(ConnectionRtcpSettings rtcpSettings) {
        this.rtcpSettings = rtcpSettings;
    }

    /**
     * ISO 8601 formatted date-time indicating when the resource was created.
     * @return createdAt
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "2018-02-02T22:25:27.521Z",
        value = "ISO 8601 formatted date-time indicating when the resource was created."
    )
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * ISO 8601 formatted date-time indicating when the resource was updated.
     * @return updatedAt
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "2018-02-02T22:25:27.521Z",
        value = "ISO 8601 formatted date-time indicating when the resource was updated."
    )
    @JsonProperty(JSON_PROPERTY_UPDATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUpdatedAt() {
        return updatedAt;
    }

    public FqdnConnection inbound(InboundFqdn inbound) {
        this.inbound = inbound;
        return this;
    }

    /**
     * Get inbound
     * @return inbound
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_INBOUND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public InboundFqdn getInbound() {
        return inbound;
    }

    @JsonProperty(JSON_PROPERTY_INBOUND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setInbound(InboundFqdn inbound) {
        this.inbound = inbound;
    }

    public FqdnConnection outbound(OutboundFqdn outbound) {
        this.outbound = outbound;
        return this;
    }

    /**
     * Get outbound
     * @return outbound
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_OUTBOUND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OutboundFqdn getOutbound() {
        return outbound;
    }

    @JsonProperty(JSON_PROPERTY_OUTBOUND)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOutbound(OutboundFqdn outbound) {
        this.outbound = outbound;
    }

    /**
     * Return true if this FqdnConnection object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FqdnConnection fqdnConnection = (FqdnConnection) o;
        return (
            Objects.equals(this.id, fqdnConnection.id) &&
            Objects.equals(this.recordType, fqdnConnection.recordType) &&
            Objects.equals(this.active, fqdnConnection.active) &&
            Objects.equals(
                this.anchorsiteOverride,
                fqdnConnection.anchorsiteOverride
            ) &&
            Objects.equals(
                this.connectionName,
                fqdnConnection.connectionName
            ) &&
            Objects.equals(
                this.transportProtocol,
                fqdnConnection.transportProtocol
            ) &&
            Objects.equals(
                this.defaultOnHoldComfortNoiseEnabled,
                fqdnConnection.defaultOnHoldComfortNoiseEnabled
            ) &&
            Objects.equals(this.dtmfType, fqdnConnection.dtmfType) &&
            Objects.equals(
                this.encodeContactHeaderEnabled,
                fqdnConnection.encodeContactHeaderEnabled
            ) &&
            equalsNullable(
                this.encryptedMedia,
                fqdnConnection.encryptedMedia
            ) &&
            Objects.equals(
                this.microsoftTeamsSbc,
                fqdnConnection.microsoftTeamsSbc
            ) &&
            Objects.equals(
                this.onnetT38PassthroughEnabled,
                fqdnConnection.onnetT38PassthroughEnabled
            ) &&
            Objects.equals(this.userName, fqdnConnection.userName) &&
            Objects.equals(this.password, fqdnConnection.password) &&
            Objects.equals(
                this.rtpPassCodecsOnStreamChange,
                fqdnConnection.rtpPassCodecsOnStreamChange
            ) &&
            Objects.equals(
                this.adjustDtmfTimestamp,
                fqdnConnection.adjustDtmfTimestamp
            ) &&
            Objects.equals(
                this.ignoreDtmfDuration,
                fqdnConnection.ignoreDtmfDuration
            ) &&
            Objects.equals(this.ignoreMarkBit, fqdnConnection.ignoreMarkBit) &&
            Objects.equals(
                this.callCostEnabled,
                fqdnConnection.callCostEnabled
            ) &&
            Objects.equals(
                this.noiseSuppression,
                fqdnConnection.noiseSuppression
            ) &&
            Objects.equals(
                this.sendNormalizedTimestamps,
                fqdnConnection.sendNormalizedTimestamps
            ) &&
            Objects.equals(
                this.thirdPartyControlEnabled,
                fqdnConnection.thirdPartyControlEnabled
            ) &&
            Objects.equals(this.txtName, fqdnConnection.txtName) &&
            Objects.equals(this.txtValue, fqdnConnection.txtValue) &&
            Objects.equals(this.txtTtl, fqdnConnection.txtTtl) &&
            Objects.equals(
                this.webhookEventUrl,
                fqdnConnection.webhookEventUrl
            ) &&
            equalsNullable(
                this.webhookEventFailoverUrl,
                fqdnConnection.webhookEventFailoverUrl
            ) &&
            Objects.equals(
                this.webhookApiVersion,
                fqdnConnection.webhookApiVersion
            ) &&
            equalsNullable(
                this.webhookTimeoutSecs,
                fqdnConnection.webhookTimeoutSecs
            ) &&
            Objects.equals(this.rtcpSettings, fqdnConnection.rtcpSettings) &&
            Objects.equals(this.createdAt, fqdnConnection.createdAt) &&
            Objects.equals(this.updatedAt, fqdnConnection.updatedAt) &&
            Objects.equals(this.inbound, fqdnConnection.inbound) &&
            Objects.equals(this.outbound, fqdnConnection.outbound)
        );
    }

    private static <T> boolean equalsNullable(
        JsonNullable<T> a,
        JsonNullable<T> b
    ) {
        return (
            a == b ||
            (a != null &&
                b != null &&
                a.isPresent() &&
                b.isPresent() &&
                Objects.deepEquals(a.get(), b.get()))
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            recordType,
            active,
            anchorsiteOverride,
            connectionName,
            transportProtocol,
            defaultOnHoldComfortNoiseEnabled,
            dtmfType,
            encodeContactHeaderEnabled,
            hashCodeNullable(encryptedMedia),
            microsoftTeamsSbc,
            onnetT38PassthroughEnabled,
            userName,
            password,
            rtpPassCodecsOnStreamChange,
            adjustDtmfTimestamp,
            ignoreDtmfDuration,
            ignoreMarkBit,
            callCostEnabled,
            noiseSuppression,
            sendNormalizedTimestamps,
            thirdPartyControlEnabled,
            txtName,
            txtValue,
            txtTtl,
            webhookEventUrl,
            hashCodeNullable(webhookEventFailoverUrl),
            webhookApiVersion,
            hashCodeNullable(webhookTimeoutSecs),
            rtcpSettings,
            createdAt,
            updatedAt,
            inbound,
            outbound
        );
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent()
            ? Arrays.deepHashCode(new Object[] { a.get() })
            : 31;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FqdnConnection {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb
            .append("    recordType: ")
            .append(toIndentedString(recordType))
            .append("\n");
        sb.append("    active: ").append(toIndentedString(active)).append("\n");
        sb
            .append("    anchorsiteOverride: ")
            .append(toIndentedString(anchorsiteOverride))
            .append("\n");
        sb
            .append("    connectionName: ")
            .append(toIndentedString(connectionName))
            .append("\n");
        sb
            .append("    transportProtocol: ")
            .append(toIndentedString(transportProtocol))
            .append("\n");
        sb
            .append("    defaultOnHoldComfortNoiseEnabled: ")
            .append(toIndentedString(defaultOnHoldComfortNoiseEnabled))
            .append("\n");
        sb
            .append("    dtmfType: ")
            .append(toIndentedString(dtmfType))
            .append("\n");
        sb
            .append("    encodeContactHeaderEnabled: ")
            .append(toIndentedString(encodeContactHeaderEnabled))
            .append("\n");
        sb
            .append("    encryptedMedia: ")
            .append(toIndentedString(encryptedMedia))
            .append("\n");
        sb
            .append("    microsoftTeamsSbc: ")
            .append(toIndentedString(microsoftTeamsSbc))
            .append("\n");
        sb
            .append("    onnetT38PassthroughEnabled: ")
            .append(toIndentedString(onnetT38PassthroughEnabled))
            .append("\n");
        sb
            .append("    userName: ")
            .append(toIndentedString(userName))
            .append("\n");
        sb
            .append("    password: ")
            .append(toIndentedString(password))
            .append("\n");
        sb
            .append("    rtpPassCodecsOnStreamChange: ")
            .append(toIndentedString(rtpPassCodecsOnStreamChange))
            .append("\n");
        sb
            .append("    adjustDtmfTimestamp: ")
            .append(toIndentedString(adjustDtmfTimestamp))
            .append("\n");
        sb
            .append("    ignoreDtmfDuration: ")
            .append(toIndentedString(ignoreDtmfDuration))
            .append("\n");
        sb
            .append("    ignoreMarkBit: ")
            .append(toIndentedString(ignoreMarkBit))
            .append("\n");
        sb
            .append("    callCostEnabled: ")
            .append(toIndentedString(callCostEnabled))
            .append("\n");
        sb
            .append("    noiseSuppression: ")
            .append(toIndentedString(noiseSuppression))
            .append("\n");
        sb
            .append("    sendNormalizedTimestamps: ")
            .append(toIndentedString(sendNormalizedTimestamps))
            .append("\n");
        sb
            .append("    thirdPartyControlEnabled: ")
            .append(toIndentedString(thirdPartyControlEnabled))
            .append("\n");
        sb
            .append("    txtName: ")
            .append(toIndentedString(txtName))
            .append("\n");
        sb
            .append("    txtValue: ")
            .append(toIndentedString(txtValue))
            .append("\n");
        sb.append("    txtTtl: ").append(toIndentedString(txtTtl)).append("\n");
        sb
            .append("    webhookEventUrl: ")
            .append(toIndentedString(webhookEventUrl))
            .append("\n");
        sb
            .append("    webhookEventFailoverUrl: ")
            .append(toIndentedString(webhookEventFailoverUrl))
            .append("\n");
        sb
            .append("    webhookApiVersion: ")
            .append(toIndentedString(webhookApiVersion))
            .append("\n");
        sb
            .append("    webhookTimeoutSecs: ")
            .append(toIndentedString(webhookTimeoutSecs))
            .append("\n");
        sb
            .append("    rtcpSettings: ")
            .append(toIndentedString(rtcpSettings))
            .append("\n");
        sb
            .append("    createdAt: ")
            .append(toIndentedString(createdAt))
            .append("\n");
        sb
            .append("    updatedAt: ")
            .append(toIndentedString(updatedAt))
            .append("\n");
        sb
            .append("    inbound: ")
            .append(toIndentedString(inbound))
            .append("\n");
        sb
            .append("    outbound: ")
            .append(toIndentedString(outbound))
            .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
