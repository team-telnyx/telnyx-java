/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * BucketUsage
 */
@JsonPropertyOrder(
    {
        BucketUsage.JSON_PROPERTY_SIZE,
        BucketUsage.JSON_PROPERTY_SIZE_KB,
        BucketUsage.JSON_PROPERTY_NUM_OBJECTS,
        BucketUsage.JSON_PROPERTY_TIMESTAMP,
    }
)
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
public class BucketUsage {

    public static final String JSON_PROPERTY_SIZE = "size";
    private Integer size;

    public static final String JSON_PROPERTY_SIZE_KB = "size_kb";
    private Integer sizeKb;

    public static final String JSON_PROPERTY_NUM_OBJECTS = "num_objects";
    private Integer numObjects;

    public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
    private OffsetDateTime timestamp;

    public BucketUsage() {}

    public BucketUsage size(Integer size) {
        this.size = size;
        return this;
    }

    /**
     * The size of the bucket in bytes
     * @return size
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(
        example = "123456",
        value = "The size of the bucket in bytes"
    )
    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSize() {
        return size;
    }

    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSize(Integer size) {
        this.size = size;
    }

    public BucketUsage sizeKb(Integer sizeKb) {
        this.sizeKb = sizeKb;
        return this;
    }

    /**
     * The size of the bucket in kilobytes
     * @return sizeKb
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(
        example = "123456",
        value = "The size of the bucket in kilobytes"
    )
    @JsonProperty(JSON_PROPERTY_SIZE_KB)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSizeKb() {
        return sizeKb;
    }

    @JsonProperty(JSON_PROPERTY_SIZE_KB)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSizeKb(Integer sizeKb) {
        this.sizeKb = sizeKb;
    }

    public BucketUsage numObjects(Integer numObjects) {
        this.numObjects = numObjects;
        return this;
    }

    /**
     * The number of objects in the bucket
     * @return numObjects
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(
        example = "123456",
        value = "The number of objects in the bucket"
    )
    @JsonProperty(JSON_PROPERTY_NUM_OBJECTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getNumObjects() {
        return numObjects;
    }

    @JsonProperty(JSON_PROPERTY_NUM_OBJECTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setNumObjects(Integer numObjects) {
        this.numObjects = numObjects;
    }

    public BucketUsage timestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * The time the snapshot was taken
     * @return timestamp
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(
        example = "2020-01-01T00:00Z",
        value = "The time the snapshot was taken"
    )
    @JsonProperty(JSON_PROPERTY_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public OffsetDateTime getTimestamp() {
        return timestamp;
    }

    @JsonProperty(JSON_PROPERTY_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTimestamp(OffsetDateTime timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Return true if this BucketUsage object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BucketUsage bucketUsage = (BucketUsage) o;
        return (
            Objects.equals(this.size, bucketUsage.size) &&
            Objects.equals(this.sizeKb, bucketUsage.sizeKb) &&
            Objects.equals(this.numObjects, bucketUsage.numObjects) &&
            Objects.equals(this.timestamp, bucketUsage.timestamp)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(size, sizeKb, numObjects, timestamp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BucketUsage {\n");
        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    sizeKb: ").append(toIndentedString(sizeKb)).append("\n");
        sb
            .append("    numObjects: ")
            .append(toIndentedString(numObjects))
            .append("\n");
        sb
            .append("    timestamp: ")
            .append(toIndentedString(timestamp))
            .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
