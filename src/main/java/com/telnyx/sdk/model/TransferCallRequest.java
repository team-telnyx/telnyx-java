/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.CallRequestAnsweringMachineDetectionConfig;
import com.telnyx.sdk.model.CustomSipHeader;
import com.telnyx.sdk.model.SipHeader;
import com.telnyx.sdk.model.SoundModifications;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * TransferCallRequest
 */
@JsonPropertyOrder({
  TransferCallRequest.JSON_PROPERTY_TO,
  TransferCallRequest.JSON_PROPERTY_FROM,
  TransferCallRequest.JSON_PROPERTY_FROM_DISPLAY_NAME,
  TransferCallRequest.JSON_PROPERTY_AUDIO_URL,
  TransferCallRequest.JSON_PROPERTY_MEDIA_NAME,
  TransferCallRequest.JSON_PROPERTY_TIMEOUT_SECS,
  TransferCallRequest.JSON_PROPERTY_TIME_LIMIT_SECS,
  TransferCallRequest.JSON_PROPERTY_ANSWERING_MACHINE_DETECTION,
  TransferCallRequest.JSON_PROPERTY_ANSWERING_MACHINE_DETECTION_CONFIG,
  TransferCallRequest.JSON_PROPERTY_CUSTOM_HEADERS,
  TransferCallRequest.JSON_PROPERTY_CLIENT_STATE,
  TransferCallRequest.JSON_PROPERTY_TARGET_LEG_CLIENT_STATE,
  TransferCallRequest.JSON_PROPERTY_COMMAND_ID,
  TransferCallRequest.JSON_PROPERTY_SIP_AUTH_USERNAME,
  TransferCallRequest.JSON_PROPERTY_SIP_AUTH_PASSWORD,
  TransferCallRequest.JSON_PROPERTY_SIP_HEADERS,
  TransferCallRequest.JSON_PROPERTY_SOUND_MODIFICATIONS,
  TransferCallRequest.JSON_PROPERTY_WEBHOOK_URL,
  TransferCallRequest.JSON_PROPERTY_WEBHOOK_URL_METHOD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransferCallRequest {
  public static final String JSON_PROPERTY_TO = "to";
  private String to;

  public static final String JSON_PROPERTY_FROM = "from";
  private String from;

  public static final String JSON_PROPERTY_FROM_DISPLAY_NAME = "from_display_name";
  private String fromDisplayName;

  public static final String JSON_PROPERTY_AUDIO_URL = "audio_url";
  private String audioUrl;

  public static final String JSON_PROPERTY_MEDIA_NAME = "media_name";
  private String mediaName;

  public static final String JSON_PROPERTY_TIMEOUT_SECS = "timeout_secs";
  private Integer timeoutSecs = 30;

  public static final String JSON_PROPERTY_TIME_LIMIT_SECS = "time_limit_secs";
  private Integer timeLimitSecs = 14400;

  /**
   * Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an &#x60;call.machine.detection.ended&#x60; webhook with the analysis result. If &#39;greeting_end&#39; or &#39;detect_words&#39; is used and a &#39;machine&#39; is detected, you will receive another &#39;call.machine.greeting.ended&#39; webhook when the answering machine greeting ends with a beep or silence. If &#x60;detect_beep&#x60; is used, you will only receive &#39;call.machine.greeting.ended&#39; if a beep is detected.
   */
  public enum AnsweringMachineDetectionEnum {
    DETECT("detect"),
    
    DETECT_BEEP("detect_beep"),
    
    DETECT_WORDS("detect_words"),
    
    GREETING_END("greeting_end"),
    
    DISABLED("disabled");

    private String value;

    AnsweringMachineDetectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AnsweringMachineDetectionEnum fromValue(String value) {
      for (AnsweringMachineDetectionEnum b : AnsweringMachineDetectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ANSWERING_MACHINE_DETECTION = "answering_machine_detection";
  private AnsweringMachineDetectionEnum answeringMachineDetection = AnsweringMachineDetectionEnum.DISABLED;

  public static final String JSON_PROPERTY_ANSWERING_MACHINE_DETECTION_CONFIG = "answering_machine_detection_config";
  private CallRequestAnsweringMachineDetectionConfig answeringMachineDetectionConfig;

  public static final String JSON_PROPERTY_CUSTOM_HEADERS = "custom_headers";
  private List<CustomSipHeader> customHeaders = null;

  public static final String JSON_PROPERTY_CLIENT_STATE = "client_state";
  private String clientState;

  public static final String JSON_PROPERTY_TARGET_LEG_CLIENT_STATE = "target_leg_client_state";
  private String targetLegClientState;

  public static final String JSON_PROPERTY_COMMAND_ID = "command_id";
  private String commandId;

  public static final String JSON_PROPERTY_SIP_AUTH_USERNAME = "sip_auth_username";
  private String sipAuthUsername;

  public static final String JSON_PROPERTY_SIP_AUTH_PASSWORD = "sip_auth_password";
  private String sipAuthPassword;

  public static final String JSON_PROPERTY_SIP_HEADERS = "sip_headers";
  private List<SipHeader> sipHeaders = null;

  public static final String JSON_PROPERTY_SOUND_MODIFICATIONS = "sound_modifications";
  private SoundModifications soundModifications;

  public static final String JSON_PROPERTY_WEBHOOK_URL = "webhook_url";
  private String webhookUrl;

  /**
   * HTTP request type used for &#x60;webhook_url&#x60;.
   */
  public enum WebhookUrlMethodEnum {
    POST("POST"),
    
    GET("GET");

    private String value;

    WebhookUrlMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WebhookUrlMethodEnum fromValue(String value) {
      for (WebhookUrlMethodEnum b : WebhookUrlMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_WEBHOOK_URL_METHOD = "webhook_url_method";
  private WebhookUrlMethodEnum webhookUrlMethod = WebhookUrlMethodEnum.POST;

  public TransferCallRequest() { 
  }

  public TransferCallRequest to(String to) {
    this.to = to;
    return this;
  }

   /**
   * The DID or SIP URI to dial out and bridge to the given call.
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "+18005550100 or sip:username@sip.telnyx.com", required = true, value = "The DID or SIP URI to dial out and bridge to the given call.")
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTo(String to) {
    this.to = to;
  }


  public TransferCallRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * The &#x60;from&#x60; number to be used as the caller id presented to the destination (&#x60;to&#x60; number). The number should be in +E164 format. This attribute will default to the &#x60;from&#x60; number of the original call if omitted.
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "+18005550101", value = "The `from` number to be used as the caller id presented to the destination (`to` number). The number should be in +E164 format. This attribute will default to the `from` number of the original call if omitted.")
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrom(String from) {
    this.from = from;
  }


  public TransferCallRequest fromDisplayName(String fromDisplayName) {
    this.fromDisplayName = fromDisplayName;
    return this;
  }

   /**
   * The &#x60;from_display_name&#x60; string to be used as the caller id name (SIP From Display Name) presented to the destination (&#x60;to&#x60; number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the &#x60;from&#x60; field.
   * @return fromDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Company Name", value = "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.")
  @JsonProperty(JSON_PROPERTY_FROM_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromDisplayName() {
    return fromDisplayName;
  }


  @JsonProperty(JSON_PROPERTY_FROM_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromDisplayName(String fromDisplayName) {
    this.fromDisplayName = fromDisplayName;
  }


  public TransferCallRequest audioUrl(String audioUrl) {
    this.audioUrl = audioUrl;
    return this;
  }

   /**
   * The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.
   * @return audioUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://example.com/message.wav", value = "The URL of a file to be played back when the transfer destination answers before bridging the call. The URL can point to either a WAV or MP3 file. media_name and audio_url cannot be used together in one request.")
  @JsonProperty(JSON_PROPERTY_AUDIO_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAudioUrl() {
    return audioUrl;
  }


  @JsonProperty(JSON_PROPERTY_AUDIO_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAudioUrl(String audioUrl) {
    this.audioUrl = audioUrl;
  }


  public TransferCallRequest mediaName(String mediaName) {
    this.mediaName = mediaName;
    return this;
  }

   /**
   * The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.
   * @return mediaName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my_media_uploaded_to_media_storage_api", value = "The media_name of a file to be played back when the transfer destination answers before bridging the call. The media_name must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. The file must either be a WAV or MP3 file.")
  @JsonProperty(JSON_PROPERTY_MEDIA_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMediaName() {
    return mediaName;
  }


  @JsonProperty(JSON_PROPERTY_MEDIA_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMediaName(String mediaName) {
    this.mediaName = mediaName;
  }


  public TransferCallRequest timeoutSecs(Integer timeoutSecs) {
    this.timeoutSecs = timeoutSecs;
    return this;
  }

   /**
   * The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a &#x60;call.hangup&#x60; webhook with a &#x60;hangup_cause&#x60; of &#x60;timeout&#x60; will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.
   * @return timeoutSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60", value = "The number of seconds that Telnyx will wait for the call to be answered by the destination to which it is being transferred. If the timeout is reached before an answer is received, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `timeout` will be sent. Minimum value is 5 seconds. Maximum value is 120 seconds.")
  @JsonProperty(JSON_PROPERTY_TIMEOUT_SECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTimeoutSecs() {
    return timeoutSecs;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT_SECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeoutSecs(Integer timeoutSecs) {
    this.timeoutSecs = timeoutSecs;
  }


  public TransferCallRequest timeLimitSecs(Integer timeLimitSecs) {
    this.timeLimitSecs = timeLimitSecs;
    return this;
  }

   /**
   * Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a &#x60;call.hangup&#x60; webhook with a &#x60;hangup_cause&#x60; of &#x60;time_limit&#x60; will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.
   * @return timeLimitSecs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "600", value = "Sets the maximum duration of a Call Control Leg in seconds. If the time limit is reached, the call will hangup and a `call.hangup` webhook with a `hangup_cause` of `time_limit` will be sent. For example, by setting a time limit of 120 seconds, a Call Leg will be automatically terminated two minutes after being answered. The default time limit is 14400 seconds or 4 hours and this is also the maximum allowed call length.")
  @JsonProperty(JSON_PROPERTY_TIME_LIMIT_SECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTimeLimitSecs() {
    return timeLimitSecs;
  }


  @JsonProperty(JSON_PROPERTY_TIME_LIMIT_SECS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeLimitSecs(Integer timeLimitSecs) {
    this.timeLimitSecs = timeLimitSecs;
  }


  public TransferCallRequest answeringMachineDetection(AnsweringMachineDetectionEnum answeringMachineDetection) {
    this.answeringMachineDetection = answeringMachineDetection;
    return this;
  }

   /**
   * Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an &#x60;call.machine.detection.ended&#x60; webhook with the analysis result. If &#39;greeting_end&#39; or &#39;detect_words&#39; is used and a &#39;machine&#39; is detected, you will receive another &#39;call.machine.greeting.ended&#39; webhook when the answering machine greeting ends with a beep or silence. If &#x60;detect_beep&#x60; is used, you will only receive &#39;call.machine.greeting.ended&#39; if a beep is detected.
   * @return answeringMachineDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enables Answering Machine Detection. When a call is answered, Telnyx runs real-time detection to determine if it was picked up by a human or a machine and sends an `call.machine.detection.ended` webhook with the analysis result. If 'greeting_end' or 'detect_words' is used and a 'machine' is detected, you will receive another 'call.machine.greeting.ended' webhook when the answering machine greeting ends with a beep or silence. If `detect_beep` is used, you will only receive 'call.machine.greeting.ended' if a beep is detected.")
  @JsonProperty(JSON_PROPERTY_ANSWERING_MACHINE_DETECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AnsweringMachineDetectionEnum getAnsweringMachineDetection() {
    return answeringMachineDetection;
  }


  @JsonProperty(JSON_PROPERTY_ANSWERING_MACHINE_DETECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnsweringMachineDetection(AnsweringMachineDetectionEnum answeringMachineDetection) {
    this.answeringMachineDetection = answeringMachineDetection;
  }


  public TransferCallRequest answeringMachineDetectionConfig(CallRequestAnsweringMachineDetectionConfig answeringMachineDetectionConfig) {
    this.answeringMachineDetectionConfig = answeringMachineDetectionConfig;
    return this;
  }

   /**
   * Get answeringMachineDetectionConfig
   * @return answeringMachineDetectionConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ANSWERING_MACHINE_DETECTION_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CallRequestAnsweringMachineDetectionConfig getAnsweringMachineDetectionConfig() {
    return answeringMachineDetectionConfig;
  }


  @JsonProperty(JSON_PROPERTY_ANSWERING_MACHINE_DETECTION_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnsweringMachineDetectionConfig(CallRequestAnsweringMachineDetectionConfig answeringMachineDetectionConfig) {
    this.answeringMachineDetectionConfig = answeringMachineDetectionConfig;
  }


  public TransferCallRequest customHeaders(List<CustomSipHeader> customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

  public TransferCallRequest addCustomHeadersItem(CustomSipHeader customHeadersItem) {
    if (this.customHeaders == null) {
      this.customHeaders = new ArrayList<>();
    }
    this.customHeaders.add(customHeadersItem);
    return this;
  }

   /**
   * Custom headers to be added to the SIP INVITE.
   * @return customHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"name\":\"head_1\",\"value\":\"val_1\"},{\"name\":\"head_2\",\"value\":\"val_2\"}]", value = "Custom headers to be added to the SIP INVITE.")
  @JsonProperty(JSON_PROPERTY_CUSTOM_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CustomSipHeader> getCustomHeaders() {
    return customHeaders;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOM_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomHeaders(List<CustomSipHeader> customHeaders) {
    this.customHeaders = customHeaders;
  }


  public TransferCallRequest clientState(String clientState) {
    this.clientState = clientState;
    return this;
  }

   /**
   * Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
   * @return clientState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "aGF2ZSBhIG5pY2UgZGF5ID1d", value = "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.")
  @JsonProperty(JSON_PROPERTY_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientState() {
    return clientState;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientState(String clientState) {
    this.clientState = clientState;
  }


  public TransferCallRequest targetLegClientState(String targetLegClientState) {
    this.targetLegClientState = targetLegClientState;
    return this;
  }

   /**
   * Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.
   * @return targetLegClientState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "aGF2ZSBhIG5pY2UgZGF5ID1d", value = "Use this field to add state to every subsequent webhook for the new leg. It must be a valid Base-64 encoded string.")
  @JsonProperty(JSON_PROPERTY_TARGET_LEG_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTargetLegClientState() {
    return targetLegClientState;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_LEG_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetLegClientState(String targetLegClientState) {
    this.targetLegClientState = targetLegClientState;
  }


  public TransferCallRequest commandId(String commandId) {
    this.commandId = commandId;
    return this;
  }

   /**
   * Use this field to avoid duplicate commands. Telnyx will ignore any command with the same &#x60;command_id&#x60; for the same &#x60;call_control_id&#x60;.
   * @return commandId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "891510ac-f3e4-11e8-af5b-de00688a4901", value = "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.")
  @JsonProperty(JSON_PROPERTY_COMMAND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommandId() {
    return commandId;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommandId(String commandId) {
    this.commandId = commandId;
  }


  public TransferCallRequest sipAuthUsername(String sipAuthUsername) {
    this.sipAuthUsername = sipAuthUsername;
    return this;
  }

   /**
   * SIP Authentication username used for SIP challenges.
   * @return sipAuthUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "username", value = "SIP Authentication username used for SIP challenges.")
  @JsonProperty(JSON_PROPERTY_SIP_AUTH_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSipAuthUsername() {
    return sipAuthUsername;
  }


  @JsonProperty(JSON_PROPERTY_SIP_AUTH_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSipAuthUsername(String sipAuthUsername) {
    this.sipAuthUsername = sipAuthUsername;
  }


  public TransferCallRequest sipAuthPassword(String sipAuthPassword) {
    this.sipAuthPassword = sipAuthPassword;
    return this;
  }

   /**
   * SIP Authentication password used for SIP challenges.
   * @return sipAuthPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "password", value = "SIP Authentication password used for SIP challenges.")
  @JsonProperty(JSON_PROPERTY_SIP_AUTH_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSipAuthPassword() {
    return sipAuthPassword;
  }


  @JsonProperty(JSON_PROPERTY_SIP_AUTH_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSipAuthPassword(String sipAuthPassword) {
    this.sipAuthPassword = sipAuthPassword;
  }


  public TransferCallRequest sipHeaders(List<SipHeader> sipHeaders) {
    this.sipHeaders = sipHeaders;
    return this;
  }

  public TransferCallRequest addSipHeadersItem(SipHeader sipHeadersItem) {
    if (this.sipHeaders == null) {
      this.sipHeaders = new ArrayList<>();
    }
    this.sipHeaders.add(sipHeadersItem);
    return this;
  }

   /**
   * SIP headers to be added to the SIP INVITE. Currently only User-to-User header is supported.
   * @return sipHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"name\":\"user-to-user\",\"value\":\"value\"}]", value = "SIP headers to be added to the SIP INVITE. Currently only User-to-User header is supported.")
  @JsonProperty(JSON_PROPERTY_SIP_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SipHeader> getSipHeaders() {
    return sipHeaders;
  }


  @JsonProperty(JSON_PROPERTY_SIP_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSipHeaders(List<SipHeader> sipHeaders) {
    this.sipHeaders = sipHeaders;
  }


  public TransferCallRequest soundModifications(SoundModifications soundModifications) {
    this.soundModifications = soundModifications;
    return this;
  }

   /**
   * Get soundModifications
   * @return soundModifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOUND_MODIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SoundModifications getSoundModifications() {
    return soundModifications;
  }


  @JsonProperty(JSON_PROPERTY_SOUND_MODIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSoundModifications(SoundModifications soundModifications) {
    this.soundModifications = soundModifications;
  }


  public TransferCallRequest webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.
   * @return webhookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/server-b/", value = "Use this field to override the URL for which Telnyx will send subsequent webhooks to for this call.")
  @JsonProperty(JSON_PROPERTY_WEBHOOK_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWebhookUrl() {
    return webhookUrl;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public TransferCallRequest webhookUrlMethod(WebhookUrlMethodEnum webhookUrlMethod) {
    this.webhookUrlMethod = webhookUrlMethod;
    return this;
  }

   /**
   * HTTP request type used for &#x60;webhook_url&#x60;.
   * @return webhookUrlMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GET", value = "HTTP request type used for `webhook_url`.")
  @JsonProperty(JSON_PROPERTY_WEBHOOK_URL_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WebhookUrlMethodEnum getWebhookUrlMethod() {
    return webhookUrlMethod;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_URL_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhookUrlMethod(WebhookUrlMethodEnum webhookUrlMethod) {
    this.webhookUrlMethod = webhookUrlMethod;
  }


  /**
   * Return true if this TransferCallRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferCallRequest transferCallRequest = (TransferCallRequest) o;
    return Objects.equals(this.to, transferCallRequest.to) &&
        Objects.equals(this.from, transferCallRequest.from) &&
        Objects.equals(this.fromDisplayName, transferCallRequest.fromDisplayName) &&
        Objects.equals(this.audioUrl, transferCallRequest.audioUrl) &&
        Objects.equals(this.mediaName, transferCallRequest.mediaName) &&
        Objects.equals(this.timeoutSecs, transferCallRequest.timeoutSecs) &&
        Objects.equals(this.timeLimitSecs, transferCallRequest.timeLimitSecs) &&
        Objects.equals(this.answeringMachineDetection, transferCallRequest.answeringMachineDetection) &&
        Objects.equals(this.answeringMachineDetectionConfig, transferCallRequest.answeringMachineDetectionConfig) &&
        Objects.equals(this.customHeaders, transferCallRequest.customHeaders) &&
        Objects.equals(this.clientState, transferCallRequest.clientState) &&
        Objects.equals(this.targetLegClientState, transferCallRequest.targetLegClientState) &&
        Objects.equals(this.commandId, transferCallRequest.commandId) &&
        Objects.equals(this.sipAuthUsername, transferCallRequest.sipAuthUsername) &&
        Objects.equals(this.sipAuthPassword, transferCallRequest.sipAuthPassword) &&
        Objects.equals(this.sipHeaders, transferCallRequest.sipHeaders) &&
        Objects.equals(this.soundModifications, transferCallRequest.soundModifications) &&
        Objects.equals(this.webhookUrl, transferCallRequest.webhookUrl) &&
        Objects.equals(this.webhookUrlMethod, transferCallRequest.webhookUrlMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, from, fromDisplayName, audioUrl, mediaName, timeoutSecs, timeLimitSecs, answeringMachineDetection, answeringMachineDetectionConfig, customHeaders, clientState, targetLegClientState, commandId, sipAuthUsername, sipAuthPassword, sipHeaders, soundModifications, webhookUrl, webhookUrlMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferCallRequest {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    fromDisplayName: ").append(toIndentedString(fromDisplayName)).append("\n");
    sb.append("    audioUrl: ").append(toIndentedString(audioUrl)).append("\n");
    sb.append("    mediaName: ").append(toIndentedString(mediaName)).append("\n");
    sb.append("    timeoutSecs: ").append(toIndentedString(timeoutSecs)).append("\n");
    sb.append("    timeLimitSecs: ").append(toIndentedString(timeLimitSecs)).append("\n");
    sb.append("    answeringMachineDetection: ").append(toIndentedString(answeringMachineDetection)).append("\n");
    sb.append("    answeringMachineDetectionConfig: ").append(toIndentedString(answeringMachineDetectionConfig)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    clientState: ").append(toIndentedString(clientState)).append("\n");
    sb.append("    targetLegClientState: ").append(toIndentedString(targetLegClientState)).append("\n");
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("    sipAuthUsername: ").append(toIndentedString(sipAuthUsername)).append("\n");
    sb.append("    sipAuthPassword: ").append(toIndentedString(sipAuthPassword)).append("\n");
    sb.append("    sipHeaders: ").append(toIndentedString(sipHeaders)).append("\n");
    sb.append("    soundModifications: ").append(toIndentedString(soundModifications)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    webhookUrlMethod: ").append(toIndentedString(webhookUrlMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

