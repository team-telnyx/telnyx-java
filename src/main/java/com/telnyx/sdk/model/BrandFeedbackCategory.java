/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * BrandFeedbackCategory
 */
@JsonPropertyOrder({
  BrandFeedbackCategory.JSON_PROPERTY_ID,
  BrandFeedbackCategory.JSON_PROPERTY_DISPLAY_NAME,
  BrandFeedbackCategory.JSON_PROPERTY_DESCRIPTION,
  BrandFeedbackCategory.JSON_PROPERTY_FIELDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class BrandFeedbackCategory {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  private String displayName;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_FIELDS = "fields";
  private List<String> fields = new ArrayList<>();

  public BrandFeedbackCategory() { 
  }

  public BrandFeedbackCategory id(String id) {
    this.id = id;
    return this;
  }

   /**
   * One of &#x60;TAX_ID&#x60;, &#x60;STOCK_SYMBOL&#x60;, &#x60;GOVERNMENT_ENTITY&#x60;, &#x60;NONPROFIT&#x60;, and &#x60;OTHERS&#x60;
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "TAX_ID", required = true, value = "One of `TAX_ID`, `STOCK_SYMBOL`, `GOVERNMENT_ENTITY`, `NONPROFIT`, and `OTHERS`")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public BrandFeedbackCategory displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Human-readable version of the &#x60;id&#x60; field
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Tax Id", required = true, value = "Human-readable version of the `id` field")
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public BrandFeedbackCategory description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Long-form description of the feedback with additional information
   * @return description
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "Tax Id does not match with the company name or business type.", required = true, value = "Long-form description of the feedback with additional information")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public BrandFeedbackCategory fields(List<String> fields) {
    this.fields = fields;
    return this;
  }

  public BrandFeedbackCategory addfieldsItem(String fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * List of relevant fields in the originally-submitted brand json
   * @return fields
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(example = "[\"ein\",\"companyName\",\"entityType\"]", required = true, value = "List of relevant fields in the originally-submitted brand json")
  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getFields() {
    return fields;
  }


  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFields(List<String> fields) {
    this.fields = fields;
  }


  /**
   * Return true if this BrandFeedbackCategory object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandFeedbackCategory brandFeedbackCategory = (BrandFeedbackCategory) o;
    return Objects.equals(this.id, brandFeedbackCategory.id) &&
        Objects.equals(this.displayName, brandFeedbackCategory.displayName) &&
        Objects.equals(this.description, brandFeedbackCategory.description) &&
        Objects.equals(this.fields, brandFeedbackCategory.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, description, fields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandFeedbackCategory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

