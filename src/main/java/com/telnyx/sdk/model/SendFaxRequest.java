/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.Quality;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * SendFaxRequest
 */
@JsonPropertyOrder({
  SendFaxRequest.JSON_PROPERTY_CONNECTION_ID,
  SendFaxRequest.JSON_PROPERTY_MEDIA_URL,
  SendFaxRequest.JSON_PROPERTY_MEDIA_NAME,
  SendFaxRequest.JSON_PROPERTY_TO,
  SendFaxRequest.JSON_PROPERTY_FROM,
  SendFaxRequest.JSON_PROPERTY_FROM_DISPLAY_NAME,
  SendFaxRequest.JSON_PROPERTY_QUALITY,
  SendFaxRequest.JSON_PROPERTY_T38_ENABLED,
  SendFaxRequest.JSON_PROPERTY_MONOCHROME,
  SendFaxRequest.JSON_PROPERTY_STORE_MEDIA,
  SendFaxRequest.JSON_PROPERTY_STORE_PREVIEW,
  SendFaxRequest.JSON_PROPERTY_PREVIEW_FORMAT,
  SendFaxRequest.JSON_PROPERTY_WEBHOOK_URL,
  SendFaxRequest.JSON_PROPERTY_CLIENT_STATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class SendFaxRequest {
  public static final String JSON_PROPERTY_CONNECTION_ID = "connection_id";
  private String connectionId;

  public static final String JSON_PROPERTY_MEDIA_URL = "media_url";
  private String mediaUrl;

  public static final String JSON_PROPERTY_MEDIA_NAME = "media_name";
  private String mediaName;

  public static final String JSON_PROPERTY_TO = "to";
  private String to;

  public static final String JSON_PROPERTY_FROM = "from";
  private String from;

  public static final String JSON_PROPERTY_FROM_DISPLAY_NAME = "from_display_name";
  private String fromDisplayName;

  public static final String JSON_PROPERTY_QUALITY = "quality";
  private Quality quality = Quality.HIGH;

  public static final String JSON_PROPERTY_T38_ENABLED = "t38_enabled";
  private Boolean t38Enabled = true;

  public static final String JSON_PROPERTY_MONOCHROME = "monochrome";
  private Boolean monochrome = false;

  public static final String JSON_PROPERTY_STORE_MEDIA = "store_media";
  private Boolean storeMedia = false;

  public static final String JSON_PROPERTY_STORE_PREVIEW = "store_preview";
  private Boolean storePreview = false;

  /**
   * The format for the preview file in case the &#x60;store_preview&#x60; is &#x60;true&#x60;.
   */
  public enum PreviewFormatEnum {
    PDF(String.valueOf("pdf")),
    
    TIFF(String.valueOf("tiff"));

    private String value;

    PreviewFormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PreviewFormatEnum fromValue(String value) {
      for (PreviewFormatEnum b : PreviewFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PREVIEW_FORMAT = "preview_format";
  private PreviewFormatEnum previewFormat = PreviewFormatEnum.TIFF;

  public static final String JSON_PROPERTY_WEBHOOK_URL = "webhook_url";
  private String webhookUrl;

  public static final String JSON_PROPERTY_CLIENT_STATE = "client_state";
  private String clientState;

  public SendFaxRequest() { 
  }

  public SendFaxRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * The connection ID to send the fax with.
   * @return connectionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "234423", required = true, value = "The connection ID to send the fax with.")
  @JsonProperty(JSON_PROPERTY_CONNECTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConnectionId() {
    return connectionId;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public SendFaxRequest mediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
    return this;
  }

   /**
   * The URL (or list of URLs) to the PDF used for the fax&#39;s media. media_url and media_name/contents can&#39;t be submitted together.
   * @return mediaUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf", value = "The URL (or list of URLs) to the PDF used for the fax's media. media_url and media_name/contents can't be submitted together.")
  @JsonProperty(JSON_PROPERTY_MEDIA_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMediaUrl() {
    return mediaUrl;
  }


  @JsonProperty(JSON_PROPERTY_MEDIA_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMediaUrl(String mediaUrl) {
    this.mediaUrl = mediaUrl;
  }


  public SendFaxRequest mediaName(String mediaName) {
    this.mediaName = mediaName;
    return this;
  }

   /**
   * The media_name used for the fax&#39;s media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can&#39;t be submitted together.
   * @return mediaName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my_media_uploaded_to_media_storage_api", value = "The media_name used for the fax's media. Must point to a file previously uploaded to api.telnyx.com/v2/media by the same user/organization. media_name and media_url/contents can't be submitted together.")
  @JsonProperty(JSON_PROPERTY_MEDIA_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMediaName() {
    return mediaName;
  }


  @JsonProperty(JSON_PROPERTY_MEDIA_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMediaName(String mediaName) {
    this.mediaName = mediaName;
  }


  public SendFaxRequest to(String to) {
    this.to = to;
    return this;
  }

   /**
   * The phone number, in E.164 format, the fax will be sent to or SIP URI
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "+13127367276", required = true, value = "The phone number, in E.164 format, the fax will be sent to or SIP URI")
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTo(String to) {
    this.to = to;
  }


  public SendFaxRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * The phone number, in E.164 format, the fax will be sent from.
   * @return from
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "+13125790015", required = true, value = "The phone number, in E.164 format, the fax will be sent from.")
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFrom() {
    return from;
  }


  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrom(String from) {
    this.from = from;
  }


  public SendFaxRequest fromDisplayName(String fromDisplayName) {
    this.fromDisplayName = fromDisplayName;
    return this;
  }

   /**
   * The &#x60;from_display_name&#x60; string to be used as the caller id name (SIP From Display Name) presented to the destination (&#x60;to&#x60; number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the &#x60;from&#x60; field.
   * @return fromDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Company Name", value = "The `from_display_name` string to be used as the caller id name (SIP From Display Name) presented to the destination (`to` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and -_~!.+ special characters. If ommited, the display name will be the same as the number in the `from` field.")
  @JsonProperty(JSON_PROPERTY_FROM_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromDisplayName() {
    return fromDisplayName;
  }


  @JsonProperty(JSON_PROPERTY_FROM_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromDisplayName(String fromDisplayName) {
    this.fromDisplayName = fromDisplayName;
  }


  public SendFaxRequest quality(Quality quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Get quality
   * @return quality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Quality getQuality() {
    return quality;
  }


  @JsonProperty(JSON_PROPERTY_QUALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuality(Quality quality) {
    this.quality = quality;
  }


  public SendFaxRequest t38Enabled(Boolean t38Enabled) {
    this.t38Enabled = t38Enabled;
    return this;
  }

   /**
   * The flag to disable the T.38 protocol.
   * @return t38Enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The flag to disable the T.38 protocol.")
  @JsonProperty(JSON_PROPERTY_T38_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getT38Enabled() {
    return t38Enabled;
  }


  @JsonProperty(JSON_PROPERTY_T38_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setT38Enabled(Boolean t38Enabled) {
    this.t38Enabled = t38Enabled;
  }


  public SendFaxRequest monochrome(Boolean monochrome) {
    this.monochrome = monochrome;
    return this;
  }

   /**
   * The flag to enable monochrome, true black and white fax results.
   * @return monochrome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The flag to enable monochrome, true black and white fax results.")
  @JsonProperty(JSON_PROPERTY_MONOCHROME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMonochrome() {
    return monochrome;
  }


  @JsonProperty(JSON_PROPERTY_MONOCHROME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonochrome(Boolean monochrome) {
    this.monochrome = monochrome;
  }


  public SendFaxRequest storeMedia(Boolean storeMedia) {
    this.storeMedia = storeMedia;
    return this;
  }

   /**
   * Should fax media be stored on temporary URL. It does not support media_name, they can&#39;t be submitted together.
   * @return storeMedia
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should fax media be stored on temporary URL. It does not support media_name, they can't be submitted together.")
  @JsonProperty(JSON_PROPERTY_STORE_MEDIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStoreMedia() {
    return storeMedia;
  }


  @JsonProperty(JSON_PROPERTY_STORE_MEDIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoreMedia(Boolean storeMedia) {
    this.storeMedia = storeMedia;
  }


  public SendFaxRequest storePreview(Boolean storePreview) {
    this.storePreview = storePreview;
    return this;
  }

   /**
   * Should fax preview be stored on temporary URL.
   * @return storePreview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should fax preview be stored on temporary URL.")
  @JsonProperty(JSON_PROPERTY_STORE_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStorePreview() {
    return storePreview;
  }


  @JsonProperty(JSON_PROPERTY_STORE_PREVIEW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorePreview(Boolean storePreview) {
    this.storePreview = storePreview;
  }


  public SendFaxRequest previewFormat(PreviewFormatEnum previewFormat) {
    this.previewFormat = previewFormat;
    return this;
  }

   /**
   * The format for the preview file in case the &#x60;store_preview&#x60; is &#x60;true&#x60;.
   * @return previewFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The format for the preview file in case the `store_preview` is `true`.")
  @JsonProperty(JSON_PROPERTY_PREVIEW_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PreviewFormatEnum getPreviewFormat() {
    return previewFormat;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviewFormat(PreviewFormatEnum previewFormat) {
    this.previewFormat = previewFormat;
  }


  public SendFaxRequest webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * Use this field to override the URL to which Telnyx will send subsequent webhooks for this fax.
   * @return webhookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/server-b/", value = "Use this field to override the URL to which Telnyx will send subsequent webhooks for this fax.")
  @JsonProperty(JSON_PROPERTY_WEBHOOK_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWebhookUrl() {
    return webhookUrl;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public SendFaxRequest clientState(String clientState) {
    this.clientState = clientState;
    return this;
  }

   /**
   * Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
   * @return clientState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "aGF2ZSBhIG5pY2UgZGF5ID1d", value = "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.")
  @JsonProperty(JSON_PROPERTY_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientState() {
    return clientState;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientState(String clientState) {
    this.clientState = clientState;
  }


  /**
   * Return true if this SendFaxRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendFaxRequest sendFaxRequest = (SendFaxRequest) o;
    return Objects.equals(this.connectionId, sendFaxRequest.connectionId) &&
        Objects.equals(this.mediaUrl, sendFaxRequest.mediaUrl) &&
        Objects.equals(this.mediaName, sendFaxRequest.mediaName) &&
        Objects.equals(this.to, sendFaxRequest.to) &&
        Objects.equals(this.from, sendFaxRequest.from) &&
        Objects.equals(this.fromDisplayName, sendFaxRequest.fromDisplayName) &&
        Objects.equals(this.quality, sendFaxRequest.quality) &&
        Objects.equals(this.t38Enabled, sendFaxRequest.t38Enabled) &&
        Objects.equals(this.monochrome, sendFaxRequest.monochrome) &&
        Objects.equals(this.storeMedia, sendFaxRequest.storeMedia) &&
        Objects.equals(this.storePreview, sendFaxRequest.storePreview) &&
        Objects.equals(this.previewFormat, sendFaxRequest.previewFormat) &&
        Objects.equals(this.webhookUrl, sendFaxRequest.webhookUrl) &&
        Objects.equals(this.clientState, sendFaxRequest.clientState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, mediaUrl, mediaName, to, from, fromDisplayName, quality, t38Enabled, monochrome, storeMedia, storePreview, previewFormat, webhookUrl, clientState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendFaxRequest {\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    mediaUrl: ").append(toIndentedString(mediaUrl)).append("\n");
    sb.append("    mediaName: ").append(toIndentedString(mediaName)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    fromDisplayName: ").append(toIndentedString(fromDisplayName)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    t38Enabled: ").append(toIndentedString(t38Enabled)).append("\n");
    sb.append("    monochrome: ").append(toIndentedString(monochrome)).append("\n");
    sb.append("    storeMedia: ").append(toIndentedString(storeMedia)).append("\n");
    sb.append("    storePreview: ").append(toIndentedString(storePreview)).append("\n");
    sb.append("    previewFormat: ").append(toIndentedString(previewFormat)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    clientState: ").append(toIndentedString(clientState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

