/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.ButtonComponentType;
import com.telnyx.sdk.model.ButtonSubtype;
import com.telnyx.sdk.model.TemplateButtonComponent;
import com.telnyx.sdk.model.TemplateButtonParameter;
import com.telnyx.sdk.model.TemplateComponent;
import com.telnyx.sdk.model.TemplateParameters;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.telnyx.sdk.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using=TemplateComponents.TemplateComponentsDeserializer.class)
@JsonSerialize(using = TemplateComponents.TemplateComponentsSerializer.class)
public class TemplateComponents extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TemplateComponents.class.getName());

    public static class TemplateComponentsSerializer extends StdSerializer<TemplateComponents> {
        public TemplateComponentsSerializer(Class<TemplateComponents> t) {
            super(t);
        }

        public TemplateComponentsSerializer() {
            this(null);
        }

        @Override
        public void serialize(TemplateComponents value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class TemplateComponentsDeserializer extends StdDeserializer<TemplateComponents> {
        public TemplateComponentsDeserializer() {
            this(TemplateComponents.class);
        }

        public TemplateComponentsDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public TemplateComponents deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize TemplateButtonComponent
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(TemplateButtonComponent.class);
                TemplateComponents ret = new TemplateComponents();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TemplateComponents'", e);
            }

            // deserialize TemplateComponent
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(TemplateComponent.class);
                TemplateComponents ret = new TemplateComponents();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'TemplateComponents'", e);
            }

            throw new IOException(String.format("Failed deserialization for TemplateComponents: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public TemplateComponents getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "TemplateComponents cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public TemplateComponents() {
        super("anyOf", Boolean.FALSE);
    }

    public TemplateComponents(TemplateButtonComponent o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TemplateComponents(TemplateComponent o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TemplateButtonComponent", new GenericType<TemplateButtonComponent>() {
        });
        schemas.put("TemplateComponent", new GenericType<TemplateComponent>() {
        });
        JSON.registerDescendants(TemplateComponents.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return TemplateComponents.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * TemplateButtonComponent, TemplateComponent
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(TemplateButtonComponent.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TemplateComponent.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TemplateButtonComponent, TemplateComponent");
    }

    /**
     * Get the actual instance, which can be the following:
     * TemplateButtonComponent, TemplateComponent
     *
     * @return The actual instance (TemplateButtonComponent, TemplateComponent)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TemplateButtonComponent`. If the actual instance is not `TemplateButtonComponent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TemplateButtonComponent`
     * @throws ClassCastException if the instance is not `TemplateButtonComponent`
     */
    public TemplateButtonComponent getTemplateButtonComponent() throws ClassCastException {
        return (TemplateButtonComponent)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TemplateComponent`. If the actual instance is not `TemplateComponent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TemplateComponent`
     * @throws ClassCastException if the instance is not `TemplateComponent`
     */
    public TemplateComponent getTemplateComponent() throws ClassCastException {
        return (TemplateComponent)super.getActualInstance();
    }

}

