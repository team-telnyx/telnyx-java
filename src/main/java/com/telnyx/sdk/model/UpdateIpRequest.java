/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * UpdateIpRequest
 */
@JsonPropertyOrder({
  UpdateIpRequest.JSON_PROPERTY_CONNECTION_ID,
  UpdateIpRequest.JSON_PROPERTY_IP_ADDRESS,
  UpdateIpRequest.JSON_PROPERTY_PORT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdateIpRequest {
  public static final String JSON_PROPERTY_CONNECTION_ID = "connection_id";
  private String connectionId;

  public static final String JSON_PROPERTY_IP_ADDRESS = "ip_address";
  private String ipAddress;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port = 5060;


  public UpdateIpRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

   /**
   * ID of the IP Connection to which this IP should be attached.
   * @return connectionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the IP Connection to which this IP should be attached.")
  @JsonProperty(JSON_PROPERTY_CONNECTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectionId() {
    return connectionId;
  }


  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public UpdateIpRequest ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP adddress represented by this resource.
   * @return ipAddress
  **/
  @ApiModelProperty(example = "192.168.0.0", required = true, value = "IP adddress represented by this resource.")
  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public UpdateIpRequest port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Port to use when connecting to this IP.
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5060", value = "Port to use when connecting to this IP.")
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  /**
   * Return true if this UpdateIpRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateIpRequest updateIpRequest = (UpdateIpRequest) o;
    return Objects.equals(this.connectionId, updateIpRequest.connectionId) &&
        Objects.equals(this.ipAddress, updateIpRequest.ipAddress) &&
        Objects.equals(this.port, updateIpRequest.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, ipAddress, port);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateIpRequest {\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

