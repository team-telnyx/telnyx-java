/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Arrays;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * RCSContentInfo
 */
@JsonPropertyOrder(
    {
        RCSContentInfo.JSON_PROPERTY_FILE_URL,
        RCSContentInfo.JSON_PROPERTY_THUMBNAIL_URL,
        RCSContentInfo.JSON_PROPERTY_FORCE_REFRESH,
    }
)
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
public class RCSContentInfo {

    public static final String JSON_PROPERTY_FILE_URL = "file_url";
    private String fileUrl;

    public static final String JSON_PROPERTY_THUMBNAIL_URL = "thumbnail_url";
    private String thumbnailUrl;

    public static final String JSON_PROPERTY_FORCE_REFRESH = "force_refresh";
    private Boolean forceRefresh;

    public RCSContentInfo() {}

    public RCSContentInfo fileUrl(String fileUrl) {
        this.fileUrl = fileUrl;
        return this;
    }

    /**
     * Publicly reachable URL of the file.
     * @return fileUrl
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(
        example = "https://example.com/elephant.jpg",
        required = true,
        value = "Publicly reachable URL of the file."
    )
    @JsonProperty(JSON_PROPERTY_FILE_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getFileUrl() {
        return fileUrl;
    }

    @JsonProperty(JSON_PROPERTY_FILE_URL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFileUrl(String fileUrl) {
        this.fileUrl = fileUrl;
    }

    public RCSContentInfo thumbnailUrl(String thumbnailUrl) {
        this.thumbnailUrl = thumbnailUrl;
        return this;
    }

    /**
     * Publicly reachable URL of the thumbnail. Maximum size of 100 kB.
     * @return thumbnailUrl
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(
        value = "Publicly reachable URL of the thumbnail. Maximum size of 100 kB."
    )
    @JsonProperty(JSON_PROPERTY_THUMBNAIL_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getThumbnailUrl() {
        return thumbnailUrl;
    }

    @JsonProperty(JSON_PROPERTY_THUMBNAIL_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setThumbnailUrl(String thumbnailUrl) {
        this.thumbnailUrl = thumbnailUrl;
    }

    public RCSContentInfo forceRefresh(Boolean forceRefresh) {
        this.forceRefresh = forceRefresh;
        return this;
    }

    /**
     * If set the URL content will not be cached.
     * @return forceRefresh
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "If set the URL content will not be cached.")
    @JsonProperty(JSON_PROPERTY_FORCE_REFRESH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getForceRefresh() {
        return forceRefresh;
    }

    @JsonProperty(JSON_PROPERTY_FORCE_REFRESH)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setForceRefresh(Boolean forceRefresh) {
        this.forceRefresh = forceRefresh;
    }

    /**
     * Return true if this RCSContentInfo object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RCSContentInfo rcSContentInfo = (RCSContentInfo) o;
        return (
            Objects.equals(this.fileUrl, rcSContentInfo.fileUrl) &&
            Objects.equals(this.thumbnailUrl, rcSContentInfo.thumbnailUrl) &&
            Objects.equals(this.forceRefresh, rcSContentInfo.forceRefresh)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(fileUrl, thumbnailUrl, forceRefresh);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RCSContentInfo {\n");
        sb
            .append("    fileUrl: ")
            .append(toIndentedString(fileUrl))
            .append("\n");
        sb
            .append("    thumbnailUrl: ")
            .append(toIndentedString(thumbnailUrl))
            .append("\n");
        sb
            .append("    forceRefresh: ")
            .append(toIndentedString(forceRefresh))
            .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
