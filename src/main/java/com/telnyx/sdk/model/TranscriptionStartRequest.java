/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.TranscriptionStartRequestLanguage;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * TranscriptionStartRequest
 */
@JsonPropertyOrder({
  TranscriptionStartRequest.JSON_PROPERTY_TRANSCRIPTION_ENGINE,
  TranscriptionStartRequest.JSON_PROPERTY_LANGUAGE,
  TranscriptionStartRequest.JSON_PROPERTY_INTERIM_RESULTS,
  TranscriptionStartRequest.JSON_PROPERTY_ENABLE_SPEAKER_DIARIZATION,
  TranscriptionStartRequest.JSON_PROPERTY_MIN_SPEAKER_COUNT,
  TranscriptionStartRequest.JSON_PROPERTY_MAX_SPEAKER_COUNT,
  TranscriptionStartRequest.JSON_PROPERTY_CLIENT_STATE,
  TranscriptionStartRequest.JSON_PROPERTY_TRANSCRIPTION_TRACKS,
  TranscriptionStartRequest.JSON_PROPERTY_COMMAND_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class TranscriptionStartRequest {
  /**
   * Engine to use for speech recognition. &#x60;A&#x60; - &#x60;Google&#x60;, &#x60;B&#x60; - &#x60;Telnyx&#x60;.
   */
  public enum TranscriptionEngineEnum {
    A(String.valueOf("A")),
    
    B(String.valueOf("B"));

    private String value;

    TranscriptionEngineEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TranscriptionEngineEnum fromValue(String value) {
      for (TranscriptionEngineEnum b : TranscriptionEngineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSCRIPTION_ENGINE = "transcription_engine";
  private TranscriptionEngineEnum transcriptionEngine = TranscriptionEngineEnum.A;

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private TranscriptionStartRequestLanguage language;

  public static final String JSON_PROPERTY_INTERIM_RESULTS = "interim_results";
  private Boolean interimResults = false;

  public static final String JSON_PROPERTY_ENABLE_SPEAKER_DIARIZATION = "enable_speaker_diarization";
  private Boolean enableSpeakerDiarization = false;

  public static final String JSON_PROPERTY_MIN_SPEAKER_COUNT = "min_speaker_count";
  private Integer minSpeakerCount = 2;

  public static final String JSON_PROPERTY_MAX_SPEAKER_COUNT = "max_speaker_count";
  private Integer maxSpeakerCount = 6;

  public static final String JSON_PROPERTY_CLIENT_STATE = "client_state";
  private String clientState;

  public static final String JSON_PROPERTY_TRANSCRIPTION_TRACKS = "transcription_tracks";
  private String transcriptionTracks = "inbound";

  public static final String JSON_PROPERTY_COMMAND_ID = "command_id";
  private String commandId;

  public TranscriptionStartRequest() { 
  }

  public TranscriptionStartRequest transcriptionEngine(TranscriptionEngineEnum transcriptionEngine) {
    this.transcriptionEngine = transcriptionEngine;
    return this;
  }

   /**
   * Engine to use for speech recognition. &#x60;A&#x60; - &#x60;Google&#x60;, &#x60;B&#x60; - &#x60;Telnyx&#x60;.
   * @return transcriptionEngine
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "A", value = "Engine to use for speech recognition. `A` - `Google`, `B` - `Telnyx`.")
  @JsonProperty(JSON_PROPERTY_TRANSCRIPTION_ENGINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TranscriptionEngineEnum getTranscriptionEngine() {
    return transcriptionEngine;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCRIPTION_ENGINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscriptionEngine(TranscriptionEngineEnum transcriptionEngine) {
    this.transcriptionEngine = transcriptionEngine;
  }


  public TranscriptionStartRequest language(TranscriptionStartRequestLanguage language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TranscriptionStartRequestLanguage getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(TranscriptionStartRequestLanguage language) {
    this.language = language;
  }


  public TranscriptionStartRequest interimResults(Boolean interimResults) {
    this.interimResults = interimResults;
    return this;
  }

   /**
   * Whether to send also interim results. If set to false, only final results will be sent. Applies to &#x60;google&#x60; engine only.
   * @return interimResults
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to send also interim results. If set to false, only final results will be sent. Applies to `google` engine only.")
  @JsonProperty(JSON_PROPERTY_INTERIM_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInterimResults() {
    return interimResults;
  }


  @JsonProperty(JSON_PROPERTY_INTERIM_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterimResults(Boolean interimResults) {
    this.interimResults = interimResults;
  }


  public TranscriptionStartRequest enableSpeakerDiarization(Boolean enableSpeakerDiarization) {
    this.enableSpeakerDiarization = enableSpeakerDiarization;
    return this;
  }

   /**
   * Enables speaker diarization. Applies to &#x60;google&#x60; engine only.
   * @return enableSpeakerDiarization
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Enables speaker diarization. Applies to `google` engine only.")
  @JsonProperty(JSON_PROPERTY_ENABLE_SPEAKER_DIARIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableSpeakerDiarization() {
    return enableSpeakerDiarization;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SPEAKER_DIARIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSpeakerDiarization(Boolean enableSpeakerDiarization) {
    this.enableSpeakerDiarization = enableSpeakerDiarization;
  }


  public TranscriptionStartRequest minSpeakerCount(Integer minSpeakerCount) {
    this.minSpeakerCount = minSpeakerCount;
    return this;
  }

   /**
   * Defines minimum number of speakers in the conversation. Applies to &#x60;google&#x60; engine only.
   * @return minSpeakerCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4", value = "Defines minimum number of speakers in the conversation. Applies to `google` engine only.")
  @JsonProperty(JSON_PROPERTY_MIN_SPEAKER_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinSpeakerCount() {
    return minSpeakerCount;
  }


  @JsonProperty(JSON_PROPERTY_MIN_SPEAKER_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinSpeakerCount(Integer minSpeakerCount) {
    this.minSpeakerCount = minSpeakerCount;
  }


  public TranscriptionStartRequest maxSpeakerCount(Integer maxSpeakerCount) {
    this.maxSpeakerCount = maxSpeakerCount;
    return this;
  }

   /**
   * Defines maximum number of speakers in the conversation. Applies to &#x60;google&#x60; engine only.
   * @return maxSpeakerCount
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "4", value = "Defines maximum number of speakers in the conversation. Applies to `google` engine only.")
  @JsonProperty(JSON_PROPERTY_MAX_SPEAKER_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxSpeakerCount() {
    return maxSpeakerCount;
  }


  @JsonProperty(JSON_PROPERTY_MAX_SPEAKER_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxSpeakerCount(Integer maxSpeakerCount) {
    this.maxSpeakerCount = maxSpeakerCount;
  }


  public TranscriptionStartRequest clientState(String clientState) {
    this.clientState = clientState;
    return this;
  }

   /**
   * Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.
   * @return clientState
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "aGF2ZSBhIG5pY2UgZGF5ID1d", value = "Use this field to add state to every subsequent webhook. It must be a valid Base-64 encoded string.")
  @JsonProperty(JSON_PROPERTY_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientState() {
    return clientState;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientState(String clientState) {
    this.clientState = clientState;
  }


  public TranscriptionStartRequest transcriptionTracks(String transcriptionTracks) {
    this.transcriptionTracks = transcriptionTracks;
    return this;
  }

   /**
   * Indicates which leg of the call will be transcribed. Use &#x60;inbound&#x60; for the leg that requested the transcription, &#x60;outbound&#x60; for the other leg, and &#x60;both&#x60; for both legs of the call. Will default to &#x60;inbound&#x60;.
   * @return transcriptionTracks
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "both", value = "Indicates which leg of the call will be transcribed. Use `inbound` for the leg that requested the transcription, `outbound` for the other leg, and `both` for both legs of the call. Will default to `inbound`.")
  @JsonProperty(JSON_PROPERTY_TRANSCRIPTION_TRACKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTranscriptionTracks() {
    return transcriptionTracks;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCRIPTION_TRACKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranscriptionTracks(String transcriptionTracks) {
    this.transcriptionTracks = transcriptionTracks;
  }


  public TranscriptionStartRequest commandId(String commandId) {
    this.commandId = commandId;
    return this;
  }

   /**
   * Use this field to avoid duplicate commands. Telnyx will ignore any command with the same &#x60;command_id&#x60; for the same &#x60;call_control_id&#x60;.
   * @return commandId
  **/
  @jakarta.annotation.Nullable
  @ApiModelProperty(example = "891510ac-f3e4-11e8-af5b-de00688a4901", value = "Use this field to avoid duplicate commands. Telnyx will ignore any command with the same `command_id` for the same `call_control_id`.")
  @JsonProperty(JSON_PROPERTY_COMMAND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommandId() {
    return commandId;
  }


  @JsonProperty(JSON_PROPERTY_COMMAND_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommandId(String commandId) {
    this.commandId = commandId;
  }


  /**
   * Return true if this TranscriptionStartRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscriptionStartRequest transcriptionStartRequest = (TranscriptionStartRequest) o;
    return Objects.equals(this.transcriptionEngine, transcriptionStartRequest.transcriptionEngine) &&
        Objects.equals(this.language, transcriptionStartRequest.language) &&
        Objects.equals(this.interimResults, transcriptionStartRequest.interimResults) &&
        Objects.equals(this.enableSpeakerDiarization, transcriptionStartRequest.enableSpeakerDiarization) &&
        Objects.equals(this.minSpeakerCount, transcriptionStartRequest.minSpeakerCount) &&
        Objects.equals(this.maxSpeakerCount, transcriptionStartRequest.maxSpeakerCount) &&
        Objects.equals(this.clientState, transcriptionStartRequest.clientState) &&
        Objects.equals(this.transcriptionTracks, transcriptionStartRequest.transcriptionTracks) &&
        Objects.equals(this.commandId, transcriptionStartRequest.commandId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transcriptionEngine, language, interimResults, enableSpeakerDiarization, minSpeakerCount, maxSpeakerCount, clientState, transcriptionTracks, commandId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscriptionStartRequest {\n");
    sb.append("    transcriptionEngine: ").append(toIndentedString(transcriptionEngine)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    interimResults: ").append(toIndentedString(interimResults)).append("\n");
    sb.append("    enableSpeakerDiarization: ").append(toIndentedString(enableSpeakerDiarization)).append("\n");
    sb.append("    minSpeakerCount: ").append(toIndentedString(minSpeakerCount)).append("\n");
    sb.append("    maxSpeakerCount: ").append(toIndentedString(maxSpeakerCount)).append("\n");
    sb.append("    clientState: ").append(toIndentedString(clientState)).append("\n");
    sb.append("    transcriptionTracks: ").append(toIndentedString(transcriptionTracks)).append("\n");
    sb.append("    commandId: ").append(toIndentedString(commandId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

