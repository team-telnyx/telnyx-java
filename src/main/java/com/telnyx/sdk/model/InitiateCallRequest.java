/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Arrays;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * InitiateCallRequest
 */
@JsonPropertyOrder(
    {
        InitiateCallRequest.JSON_PROPERTY_APPLICATION_SID,
        InitiateCallRequest.JSON_PROPERTY_TO,
        InitiateCallRequest.JSON_PROPERTY_FROM,
        InitiateCallRequest.JSON_PROPERTY_CALLER_ID,
        InitiateCallRequest.JSON_PROPERTY_URL,
        InitiateCallRequest.JSON_PROPERTY_URL_METHOD,
        InitiateCallRequest.JSON_PROPERTY_FALLBACK_URL,
        InitiateCallRequest.JSON_PROPERTY_STATUS_CALLBACK,
        InitiateCallRequest.JSON_PROPERTY_STATUS_CALLBACK_METHOD,
        InitiateCallRequest.JSON_PROPERTY_STATUS_CALLBACK_EVENT,
        InitiateCallRequest.JSON_PROPERTY_MACHINE_DETECTION,
        InitiateCallRequest.JSON_PROPERTY_DETECTION_MODE,
        InitiateCallRequest.JSON_PROPERTY_ASYNC_AMD,
        InitiateCallRequest.JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK,
        InitiateCallRequest.JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK_METHOD,
        InitiateCallRequest.JSON_PROPERTY_MACHINE_DETECTION_TIMEOUT,
        InitiateCallRequest.JSON_PROPERTY_MACHINE_DETECTION_SPEECH_THRESHOLD,
        InitiateCallRequest.JSON_PROPERTY_MACHINE_DETECTION_SPEECH_END_THRESHOLD,
        InitiateCallRequest.JSON_PROPERTY_MACHINE_DETECTION_SILENCE_TIMEOUT,
        InitiateCallRequest.JSON_PROPERTY_CANCEL_PLAYBACK_ON_MACHINE_DETECTION,
        InitiateCallRequest.JSON_PROPERTY_CANCEL_PLAYBACK_ON_DETECT_MESSAGE_END,
        InitiateCallRequest.JSON_PROPERTY_PREFERRED_CODECS,
        InitiateCallRequest.JSON_PROPERTY_RECORD,
        InitiateCallRequest.JSON_PROPERTY_RECORDING_CHANNELS,
        InitiateCallRequest.JSON_PROPERTY_RECORDING_STATUS_CALLBACK,
        InitiateCallRequest.JSON_PROPERTY_RECORDING_STATUS_CALLBACK_METHOD,
        InitiateCallRequest.JSON_PROPERTY_RECORDING_STATUS_CALLBACK_EVENT,
        InitiateCallRequest.JSON_PROPERTY_RECORDING_TIMEOUT,
        InitiateCallRequest.JSON_PROPERTY_RECORDING_TRACK,
        InitiateCallRequest.JSON_PROPERTY_SIP_AUTH_PASSWORD,
        InitiateCallRequest.JSON_PROPERTY_SIP_AUTH_USERNAME,
        InitiateCallRequest.JSON_PROPERTY_TRIM,
    }
)
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
public class InitiateCallRequest {

    public static final String JSON_PROPERTY_APPLICATION_SID = "ApplicationSid";
    private String applicationSid;

    public static final String JSON_PROPERTY_TO = "To";
    private String to;

    public static final String JSON_PROPERTY_FROM = "From";
    private String from;

    public static final String JSON_PROPERTY_CALLER_ID = "CallerId";
    private String callerId;

    public static final String JSON_PROPERTY_URL = "Url";
    private String url;

    /**
     * HTTP request type used for &#x60;Url&#x60;. The default value is inherited from TeXML Application setting.
     */
    public enum UrlMethodEnum {
        GET(String.valueOf("GET")),

        POST(String.valueOf("POST"));

        private String value;

        UrlMethodEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static UrlMethodEnum fromValue(String value) {
            for (UrlMethodEnum b : UrlMethodEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_URL_METHOD = "UrlMethod";
    private UrlMethodEnum urlMethod = UrlMethodEnum.POST;

    public static final String JSON_PROPERTY_FALLBACK_URL = "FallbackUrl";
    private String fallbackUrl;

    public static final String JSON_PROPERTY_STATUS_CALLBACK = "StatusCallback";
    private String statusCallback;

    /**
     * HTTP request type used for &#x60;StatusCallback&#x60;.
     */
    public enum StatusCallbackMethodEnum {
        GET(String.valueOf("GET")),

        POST(String.valueOf("POST"));

        private String value;

        StatusCallbackMethodEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusCallbackMethodEnum fromValue(String value) {
            for (StatusCallbackMethodEnum b : StatusCallbackMethodEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_STATUS_CALLBACK_METHOD =
        "StatusCallbackMethod";
    private StatusCallbackMethodEnum statusCallbackMethod =
        StatusCallbackMethodEnum.POST;

    /**
     * The call events for which Telnyx should send a webhook. Multiple events can be defined when separated by a space.
     */
    public enum StatusCallbackEventEnum {
        INITIATED(String.valueOf("initiated")),

        RINGING(String.valueOf("ringing")),

        ANSWERED(String.valueOf("answered")),

        COMPLETED(String.valueOf("completed"));

        private String value;

        StatusCallbackEventEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StatusCallbackEventEnum fromValue(String value) {
            for (StatusCallbackEventEnum b : StatusCallbackEventEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_STATUS_CALLBACK_EVENT =
        "StatusCallbackEvent";
    private StatusCallbackEventEnum statusCallbackEvent =
        StatusCallbackEventEnum.COMPLETED;

    /**
     * Enables Answering Machine Detection.
     */
    public enum MachineDetectionEnum {
        ENABLE(String.valueOf("Enable")),

        DISABLE(String.valueOf("Disable")),

        DETECT_MESSAGE_END(String.valueOf("DetectMessageEnd"));

        private String value;

        MachineDetectionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static MachineDetectionEnum fromValue(String value) {
            for (MachineDetectionEnum b : MachineDetectionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_MACHINE_DETECTION =
        "MachineDetection";
    private MachineDetectionEnum machineDetection =
        MachineDetectionEnum.DISABLE;

    /**
     * Allows you to chose between Premium and Standard detections.
     */
    public enum DetectionModeEnum {
        PREMIUM(String.valueOf("Premium")),

        REGULAR(String.valueOf("Regular"));

        private String value;

        DetectionModeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static DetectionModeEnum fromValue(String value) {
            for (DetectionModeEnum b : DetectionModeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_DETECTION_MODE = "DetectionMode";
    private DetectionModeEnum detectionMode = DetectionModeEnum.REGULAR;

    public static final String JSON_PROPERTY_ASYNC_AMD = "AsyncAmd";
    private Boolean asyncAmd = false;

    public static final String JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK =
        "AsyncAmdStatusCallback";
    private String asyncAmdStatusCallback;

    /**
     * HTTP request type used for &#x60;AsyncAmdStatusCallback&#x60;. The default value is inherited from TeXML Application setting.
     */
    public enum AsyncAmdStatusCallbackMethodEnum {
        GET(String.valueOf("GET")),

        POST(String.valueOf("POST"));

        private String value;

        AsyncAmdStatusCallbackMethodEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static AsyncAmdStatusCallbackMethodEnum fromValue(String value) {
            for (AsyncAmdStatusCallbackMethodEnum b : AsyncAmdStatusCallbackMethodEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK_METHOD =
        "AsyncAmdStatusCallbackMethod";
    private AsyncAmdStatusCallbackMethodEnum asyncAmdStatusCallbackMethod =
        AsyncAmdStatusCallbackMethodEnum.POST;

    public static final String JSON_PROPERTY_MACHINE_DETECTION_TIMEOUT =
        "MachineDetectionTimeout";
    private Integer machineDetectionTimeout = 30000;

    public static final String JSON_PROPERTY_MACHINE_DETECTION_SPEECH_THRESHOLD =
        "MachineDetectionSpeechThreshold";
    private Integer machineDetectionSpeechThreshold = 3500;

    public static final String JSON_PROPERTY_MACHINE_DETECTION_SPEECH_END_THRESHOLD =
        "MachineDetectionSpeechEndThreshold";
    private Integer machineDetectionSpeechEndThreshold = 800;

    public static final String JSON_PROPERTY_MACHINE_DETECTION_SILENCE_TIMEOUT =
        "MachineDetectionSilenceTimeout";
    private Integer machineDetectionSilenceTimeout = 3500;

    public static final String JSON_PROPERTY_CANCEL_PLAYBACK_ON_MACHINE_DETECTION =
        "CancelPlaybackOnMachineDetection";
    private Boolean cancelPlaybackOnMachineDetection = true;

    public static final String JSON_PROPERTY_CANCEL_PLAYBACK_ON_DETECT_MESSAGE_END =
        "CancelPlaybackOnDetectMessageEnd";
    private Boolean cancelPlaybackOnDetectMessageEnd = true;

    public static final String JSON_PROPERTY_PREFERRED_CODECS =
        "PreferredCodecs";
    private String preferredCodecs;

    public static final String JSON_PROPERTY_RECORD = "Record";
    private Boolean record;

    /**
     * The number of channels in the final recording. Defaults to &#x60;mono&#x60;.
     */
    public enum RecordingChannelsEnum {
        MONO(String.valueOf("mono")),

        DUAL(String.valueOf("dual"));

        private String value;

        RecordingChannelsEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RecordingChannelsEnum fromValue(String value) {
            for (RecordingChannelsEnum b : RecordingChannelsEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_RECORDING_CHANNELS =
        "RecordingChannels";
    private RecordingChannelsEnum recordingChannels;

    public static final String JSON_PROPERTY_RECORDING_STATUS_CALLBACK =
        "RecordingStatusCallback";
    private String recordingStatusCallback;

    /**
     * HTTP request type used for &#x60;RecordingStatusCallback&#x60;. Defaults to &#x60;POST&#x60;.
     */
    public enum RecordingStatusCallbackMethodEnum {
        GET(String.valueOf("GET")),

        POST(String.valueOf("POST"));

        private String value;

        RecordingStatusCallbackMethodEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RecordingStatusCallbackMethodEnum fromValue(
            String value
        ) {
            for (RecordingStatusCallbackMethodEnum b : RecordingStatusCallbackMethodEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_RECORDING_STATUS_CALLBACK_METHOD =
        "RecordingStatusCallbackMethod";
    private RecordingStatusCallbackMethodEnum recordingStatusCallbackMethod;

    public static final String JSON_PROPERTY_RECORDING_STATUS_CALLBACK_EVENT =
        "RecordingStatusCallbackEvent";
    private String recordingStatusCallbackEvent;

    public static final String JSON_PROPERTY_RECORDING_TIMEOUT =
        "RecordingTimeout";
    private Integer recordingTimeout = 0;

    /**
     * The audio track to record for the call. The default is &#x60;both&#x60;.
     */
    public enum RecordingTrackEnum {
        INBOUND(String.valueOf("inbound")),

        OUTBOUND(String.valueOf("outbound")),

        BOTH(String.valueOf("both"));

        private String value;

        RecordingTrackEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static RecordingTrackEnum fromValue(String value) {
            for (RecordingTrackEnum b : RecordingTrackEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_RECORDING_TRACK = "RecordingTrack";
    private RecordingTrackEnum recordingTrack;

    public static final String JSON_PROPERTY_SIP_AUTH_PASSWORD =
        "SipAuthPassword";
    private String sipAuthPassword;

    public static final String JSON_PROPERTY_SIP_AUTH_USERNAME =
        "SipAuthUsername";
    private String sipAuthUsername;

    /**
     * Whether to trim any leading and trailing silence from the recording. Defaults to &#x60;trim-silence&#x60;.
     */
    public enum TrimEnum {
        TRIM_SILENCE(String.valueOf("trim-silence")),

        DO_NOT_TRIM(String.valueOf("do-not-trim"));

        private String value;

        TrimEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TrimEnum fromValue(String value) {
            for (TrimEnum b : TrimEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_TRIM = "Trim";
    private TrimEnum trim;

    public InitiateCallRequest() {}

    public InitiateCallRequest applicationSid(String applicationSid) {
        this.applicationSid = applicationSid;
        return this;
    }

    /**
     * The ID of the TeXML Application.
     * @return applicationSid
     **/
    @jakarta.annotation.Nonnull
    @ApiModelProperty(
        required = true,
        value = "The ID of the TeXML Application."
    )
    @JsonProperty(JSON_PROPERTY_APPLICATION_SID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getApplicationSid() {
        return applicationSid;
    }

    @JsonProperty(JSON_PROPERTY_APPLICATION_SID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setApplicationSid(String applicationSid) {
        this.applicationSid = applicationSid;
    }

    public InitiateCallRequest to(String to) {
        this.to = to;
        return this;
    }

    /**
     * The phone number of the called party. Phone numbers are formatted with a &#x60;+&#x60; and country code.
     * @return to
     **/
    @jakarta.annotation.Nonnull
    @ApiModelProperty(
        example = "+16175551212",
        required = true,
        value = "The phone number of the called party. Phone numbers are formatted with a `+` and country code."
    )
    @JsonProperty(JSON_PROPERTY_TO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getTo() {
        return to;
    }

    @JsonProperty(JSON_PROPERTY_TO)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setTo(String to) {
        this.to = to;
    }

    public InitiateCallRequest from(String from) {
        this.from = from;
        return this;
    }

    /**
     * The phone number of the party that initiated the call. Phone numbers are formatted with a &#x60;+&#x60; and country code.
     * @return from
     **/
    @jakarta.annotation.Nonnull
    @ApiModelProperty(
        example = "+16175551212",
        required = true,
        value = "The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code."
    )
    @JsonProperty(JSON_PROPERTY_FROM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getFrom() {
        return from;
    }

    @JsonProperty(JSON_PROPERTY_FROM)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFrom(String from) {
        this.from = from;
    }

    public InitiateCallRequest callerId(String callerId) {
        this.callerId = callerId;
        return this;
    }

    /**
     * To be used as the caller id name (SIP From Display Name) presented to the destination (&#x60;To&#x60; number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and &#x60;-_~!.+&#x60; special characters. If ommited, the display name will be the same as the number in the &#x60;From&#x60; field.
     * @return callerId
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "Info",
        value = "To be used as the caller id name (SIP From Display Name) presented to the destination (`To` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the number in the `From` field."
    )
    @JsonProperty(JSON_PROPERTY_CALLER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCallerId() {
        return callerId;
    }

    @JsonProperty(JSON_PROPERTY_CALLER_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCallerId(String callerId) {
        this.callerId = callerId;
    }

    public InitiateCallRequest url(String url) {
        this.url = url;
        return this;
    }

    /**
     * The URL from which Telnyx will retrieve the TeXML call instructions.
     * @return url
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "https://www.example.com/instructions.xml",
        value = "The URL from which Telnyx will retrieve the TeXML call instructions."
    )
    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUrl() {
        return url;
    }

    @JsonProperty(JSON_PROPERTY_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrl(String url) {
        this.url = url;
    }

    public InitiateCallRequest urlMethod(UrlMethodEnum urlMethod) {
        this.urlMethod = urlMethod;
        return this;
    }

    /**
     * HTTP request type used for &#x60;Url&#x60;. The default value is inherited from TeXML Application setting.
     * @return urlMethod
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "GET",
        value = "HTTP request type used for `Url`. The default value is inherited from TeXML Application setting."
    )
    @JsonProperty(JSON_PROPERTY_URL_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public UrlMethodEnum getUrlMethod() {
        return urlMethod;
    }

    @JsonProperty(JSON_PROPERTY_URL_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUrlMethod(UrlMethodEnum urlMethod) {
        this.urlMethod = urlMethod;
    }

    public InitiateCallRequest fallbackUrl(String fallbackUrl) {
        this.fallbackUrl = fallbackUrl;
        return this;
    }

    /**
     * A failover URL for which Telnyx will retrieve the TeXML call instructions if the &#x60;Url&#x60; is not responding.
     * @return fallbackUrl
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "https://www.example.com/instructions-fallback.xml",
        value = "A failover URL for which Telnyx will retrieve the TeXML call instructions if the `Url` is not responding."
    )
    @JsonProperty(JSON_PROPERTY_FALLBACK_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFallbackUrl() {
        return fallbackUrl;
    }

    @JsonProperty(JSON_PROPERTY_FALLBACK_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFallbackUrl(String fallbackUrl) {
        this.fallbackUrl = fallbackUrl;
    }

    public InitiateCallRequest statusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }

    /**
     * URL destination for Telnyx to send status callback events to for the call.
     * @return statusCallback
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "https://www.example.com/callback",
        value = "URL destination for Telnyx to send status callback events to for the call."
    )
    @JsonProperty(JSON_PROPERTY_STATUS_CALLBACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getStatusCallback() {
        return statusCallback;
    }

    @JsonProperty(JSON_PROPERTY_STATUS_CALLBACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
    }

    public InitiateCallRequest statusCallbackMethod(
        StatusCallbackMethodEnum statusCallbackMethod
    ) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }

    /**
     * HTTP request type used for &#x60;StatusCallback&#x60;.
     * @return statusCallbackMethod
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "GET",
        value = "HTTP request type used for `StatusCallback`."
    )
    @JsonProperty(JSON_PROPERTY_STATUS_CALLBACK_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public StatusCallbackMethodEnum getStatusCallbackMethod() {
        return statusCallbackMethod;
    }

    @JsonProperty(JSON_PROPERTY_STATUS_CALLBACK_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatusCallbackMethod(
        StatusCallbackMethodEnum statusCallbackMethod
    ) {
        this.statusCallbackMethod = statusCallbackMethod;
    }

    public InitiateCallRequest statusCallbackEvent(
        StatusCallbackEventEnum statusCallbackEvent
    ) {
        this.statusCallbackEvent = statusCallbackEvent;
        return this;
    }

    /**
     * The call events for which Telnyx should send a webhook. Multiple events can be defined when separated by a space.
     * @return statusCallbackEvent
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "iniated ringing",
        value = "The call events for which Telnyx should send a webhook. Multiple events can be defined when separated by a space."
    )
    @JsonProperty(JSON_PROPERTY_STATUS_CALLBACK_EVENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public StatusCallbackEventEnum getStatusCallbackEvent() {
        return statusCallbackEvent;
    }

    @JsonProperty(JSON_PROPERTY_STATUS_CALLBACK_EVENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setStatusCallbackEvent(
        StatusCallbackEventEnum statusCallbackEvent
    ) {
        this.statusCallbackEvent = statusCallbackEvent;
    }

    public InitiateCallRequest machineDetection(
        MachineDetectionEnum machineDetection
    ) {
        this.machineDetection = machineDetection;
        return this;
    }

    /**
     * Enables Answering Machine Detection.
     * @return machineDetection
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "Enable",
        value = "Enables Answering Machine Detection."
    )
    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public MachineDetectionEnum getMachineDetection() {
        return machineDetection;
    }

    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMachineDetection(MachineDetectionEnum machineDetection) {
        this.machineDetection = machineDetection;
    }

    public InitiateCallRequest detectionMode(DetectionModeEnum detectionMode) {
        this.detectionMode = detectionMode;
        return this;
    }

    /**
     * Allows you to chose between Premium and Standard detections.
     * @return detectionMode
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "Premium",
        value = "Allows you to chose between Premium and Standard detections."
    )
    @JsonProperty(JSON_PROPERTY_DETECTION_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DetectionModeEnum getDetectionMode() {
        return detectionMode;
    }

    @JsonProperty(JSON_PROPERTY_DETECTION_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDetectionMode(DetectionModeEnum detectionMode) {
        this.detectionMode = detectionMode;
    }

    public InitiateCallRequest asyncAmd(Boolean asyncAmd) {
        this.asyncAmd = asyncAmd;
        return this;
    }

    /**
     * Select whether to perform answering machine detection in the background. By default execution is blocked until Answering Machine Detection is completed.
     * @return asyncAmd
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "true",
        value = "Select whether to perform answering machine detection in the background. By default execution is blocked until Answering Machine Detection is completed."
    )
    @JsonProperty(JSON_PROPERTY_ASYNC_AMD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getAsyncAmd() {
        return asyncAmd;
    }

    @JsonProperty(JSON_PROPERTY_ASYNC_AMD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAsyncAmd(Boolean asyncAmd) {
        this.asyncAmd = asyncAmd;
    }

    public InitiateCallRequest asyncAmdStatusCallback(
        String asyncAmdStatusCallback
    ) {
        this.asyncAmdStatusCallback = asyncAmdStatusCallback;
        return this;
    }

    /**
     * URL destination for Telnyx to send AMD callback events to for the call.
     * @return asyncAmdStatusCallback
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "https://www.example.com/callback",
        value = "URL destination for Telnyx to send AMD callback events to for the call."
    )
    @JsonProperty(JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAsyncAmdStatusCallback() {
        return asyncAmdStatusCallback;
    }

    @JsonProperty(JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAsyncAmdStatusCallback(String asyncAmdStatusCallback) {
        this.asyncAmdStatusCallback = asyncAmdStatusCallback;
    }

    public InitiateCallRequest asyncAmdStatusCallbackMethod(
        AsyncAmdStatusCallbackMethodEnum asyncAmdStatusCallbackMethod
    ) {
        this.asyncAmdStatusCallbackMethod = asyncAmdStatusCallbackMethod;
        return this;
    }

    /**
     * HTTP request type used for &#x60;AsyncAmdStatusCallback&#x60;. The default value is inherited from TeXML Application setting.
     * @return asyncAmdStatusCallbackMethod
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "GET",
        value = "HTTP request type used for `AsyncAmdStatusCallback`. The default value is inherited from TeXML Application setting."
    )
    @JsonProperty(JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public AsyncAmdStatusCallbackMethodEnum getAsyncAmdStatusCallbackMethod() {
        return asyncAmdStatusCallbackMethod;
    }

    @JsonProperty(JSON_PROPERTY_ASYNC_AMD_STATUS_CALLBACK_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAsyncAmdStatusCallbackMethod(
        AsyncAmdStatusCallbackMethodEnum asyncAmdStatusCallbackMethod
    ) {
        this.asyncAmdStatusCallbackMethod = asyncAmdStatusCallbackMethod;
    }

    public InitiateCallRequest machineDetectionTimeout(
        Integer machineDetectionTimeout
    ) {
        this.machineDetectionTimeout = machineDetectionTimeout;
        return this;
    }

    /**
     * Maximum timeout threshold in milliseconds for overall detection.
     * minimum: 500
     * maximum: 60000
     * @return machineDetectionTimeout
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "5000",
        value = "Maximum timeout threshold in milliseconds for overall detection."
    )
    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getMachineDetectionTimeout() {
        return machineDetectionTimeout;
    }

    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMachineDetectionTimeout(Integer machineDetectionTimeout) {
        this.machineDetectionTimeout = machineDetectionTimeout;
    }

    public InitiateCallRequest machineDetectionSpeechThreshold(
        Integer machineDetectionSpeechThreshold
    ) {
        this.machineDetectionSpeechThreshold = machineDetectionSpeechThreshold;
        return this;
    }

    /**
     * Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when &#x60;premium&#x60; detection is used.
     * @return machineDetectionSpeechThreshold
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "2000",
        value = "Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when `premium` detection is used."
    )
    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_SPEECH_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getMachineDetectionSpeechThreshold() {
        return machineDetectionSpeechThreshold;
    }

    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_SPEECH_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMachineDetectionSpeechThreshold(
        Integer machineDetectionSpeechThreshold
    ) {
        this.machineDetectionSpeechThreshold = machineDetectionSpeechThreshold;
    }

    public InitiateCallRequest machineDetectionSpeechEndThreshold(
        Integer machineDetectionSpeechEndThreshold
    ) {
        this.machineDetectionSpeechEndThreshold =
            machineDetectionSpeechEndThreshold;
        return this;
    }

    /**
     * Silence duration threshold after a greeting message or voice for it be considered human. Ignored when &#x60;premium&#x60; detection is used.
     * @return machineDetectionSpeechEndThreshold
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "2000",
        value = "Silence duration threshold after a greeting message or voice for it be considered human. Ignored when `premium` detection is used."
    )
    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_SPEECH_END_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getMachineDetectionSpeechEndThreshold() {
        return machineDetectionSpeechEndThreshold;
    }

    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_SPEECH_END_THRESHOLD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMachineDetectionSpeechEndThreshold(
        Integer machineDetectionSpeechEndThreshold
    ) {
        this.machineDetectionSpeechEndThreshold =
            machineDetectionSpeechEndThreshold;
    }

    public InitiateCallRequest machineDetectionSilenceTimeout(
        Integer machineDetectionSilenceTimeout
    ) {
        this.machineDetectionSilenceTimeout = machineDetectionSilenceTimeout;
        return this;
    }

    /**
     * If initial silence duration is greater than this value, consider it a machine. Ignored when &#x60;premium&#x60; detection is used.
     * @return machineDetectionSilenceTimeout
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "2000",
        value = "If initial silence duration is greater than this value, consider it a machine. Ignored when `premium` detection is used."
    )
    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_SILENCE_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getMachineDetectionSilenceTimeout() {
        return machineDetectionSilenceTimeout;
    }

    @JsonProperty(JSON_PROPERTY_MACHINE_DETECTION_SILENCE_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMachineDetectionSilenceTimeout(
        Integer machineDetectionSilenceTimeout
    ) {
        this.machineDetectionSilenceTimeout = machineDetectionSilenceTimeout;
    }

    public InitiateCallRequest cancelPlaybackOnMachineDetection(
        Boolean cancelPlaybackOnMachineDetection
    ) {
        this.cancelPlaybackOnMachineDetection =
            cancelPlaybackOnMachineDetection;
        return this;
    }

    /**
     * Whether to cancel ongoing playback on &#x60;machine&#x60; detection. Defaults to &#x60;true&#x60;.
     * @return cancelPlaybackOnMachineDetection
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "false",
        value = "Whether to cancel ongoing playback on `machine` detection. Defaults to `true`."
    )
    @JsonProperty(JSON_PROPERTY_CANCEL_PLAYBACK_ON_MACHINE_DETECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCancelPlaybackOnMachineDetection() {
        return cancelPlaybackOnMachineDetection;
    }

    @JsonProperty(JSON_PROPERTY_CANCEL_PLAYBACK_ON_MACHINE_DETECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCancelPlaybackOnMachineDetection(
        Boolean cancelPlaybackOnMachineDetection
    ) {
        this.cancelPlaybackOnMachineDetection =
            cancelPlaybackOnMachineDetection;
    }

    public InitiateCallRequest cancelPlaybackOnDetectMessageEnd(
        Boolean cancelPlaybackOnDetectMessageEnd
    ) {
        this.cancelPlaybackOnDetectMessageEnd =
            cancelPlaybackOnDetectMessageEnd;
        return this;
    }

    /**
     * Whether to cancel ongoing playback on &#x60;greeting ended&#x60; detection. Defaults to &#x60;true&#x60;.
     * @return cancelPlaybackOnDetectMessageEnd
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "false",
        value = "Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`."
    )
    @JsonProperty(JSON_PROPERTY_CANCEL_PLAYBACK_ON_DETECT_MESSAGE_END)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getCancelPlaybackOnDetectMessageEnd() {
        return cancelPlaybackOnDetectMessageEnd;
    }

    @JsonProperty(JSON_PROPERTY_CANCEL_PLAYBACK_ON_DETECT_MESSAGE_END)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCancelPlaybackOnDetectMessageEnd(
        Boolean cancelPlaybackOnDetectMessageEnd
    ) {
        this.cancelPlaybackOnDetectMessageEnd =
            cancelPlaybackOnDetectMessageEnd;
    }

    public InitiateCallRequest preferredCodecs(String preferredCodecs) {
        this.preferredCodecs = preferredCodecs;
        return this;
    }

    /**
     * The list of comma-separated codecs to be offered on a call.
     * @return preferredCodecs
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "PCMA,PCMU",
        value = "The list of comma-separated codecs to be offered on a call."
    )
    @JsonProperty(JSON_PROPERTY_PREFERRED_CODECS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPreferredCodecs() {
        return preferredCodecs;
    }

    @JsonProperty(JSON_PROPERTY_PREFERRED_CODECS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPreferredCodecs(String preferredCodecs) {
        this.preferredCodecs = preferredCodecs;
    }

    public InitiateCallRequest record(Boolean record) {
        this.record = record;
        return this;
    }

    /**
     * Whether to record the entire participant&#39;s call leg. Defaults to &#x60;false&#x60;.
     * @return record
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "false",
        value = "Whether to record the entire participant's call leg. Defaults to `false`."
    )
    @JsonProperty(JSON_PROPERTY_RECORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getRecord() {
        return record;
    }

    @JsonProperty(JSON_PROPERTY_RECORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecord(Boolean record) {
        this.record = record;
    }

    public InitiateCallRequest recordingChannels(
        RecordingChannelsEnum recordingChannels
    ) {
        this.recordingChannels = recordingChannels;
        return this;
    }

    /**
     * The number of channels in the final recording. Defaults to &#x60;mono&#x60;.
     * @return recordingChannels
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "dual",
        value = "The number of channels in the final recording. Defaults to `mono`."
    )
    @JsonProperty(JSON_PROPERTY_RECORDING_CHANNELS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public RecordingChannelsEnum getRecordingChannels() {
        return recordingChannels;
    }

    @JsonProperty(JSON_PROPERTY_RECORDING_CHANNELS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecordingChannels(RecordingChannelsEnum recordingChannels) {
        this.recordingChannels = recordingChannels;
    }

    public InitiateCallRequest recordingStatusCallback(
        String recordingStatusCallback
    ) {
        this.recordingStatusCallback = recordingStatusCallback;
        return this;
    }

    /**
     * The URL the recording callbacks will be sent to.
     * @return recordingStatusCallback
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "https://example.com/recording_status_callback",
        value = "The URL the recording callbacks will be sent to."
    )
    @JsonProperty(JSON_PROPERTY_RECORDING_STATUS_CALLBACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRecordingStatusCallback() {
        return recordingStatusCallback;
    }

    @JsonProperty(JSON_PROPERTY_RECORDING_STATUS_CALLBACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecordingStatusCallback(String recordingStatusCallback) {
        this.recordingStatusCallback = recordingStatusCallback;
    }

    public InitiateCallRequest recordingStatusCallbackMethod(
        RecordingStatusCallbackMethodEnum recordingStatusCallbackMethod
    ) {
        this.recordingStatusCallbackMethod = recordingStatusCallbackMethod;
        return this;
    }

    /**
     * HTTP request type used for &#x60;RecordingStatusCallback&#x60;. Defaults to &#x60;POST&#x60;.
     * @return recordingStatusCallbackMethod
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "GET",
        value = "HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`."
    )
    @JsonProperty(JSON_PROPERTY_RECORDING_STATUS_CALLBACK_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public RecordingStatusCallbackMethodEnum getRecordingStatusCallbackMethod() {
        return recordingStatusCallbackMethod;
    }

    @JsonProperty(JSON_PROPERTY_RECORDING_STATUS_CALLBACK_METHOD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecordingStatusCallbackMethod(
        RecordingStatusCallbackMethodEnum recordingStatusCallbackMethod
    ) {
        this.recordingStatusCallbackMethod = recordingStatusCallbackMethod;
    }

    public InitiateCallRequest recordingStatusCallbackEvent(
        String recordingStatusCallbackEvent
    ) {
        this.recordingStatusCallbackEvent = recordingStatusCallbackEvent;
        return this;
    }

    /**
     * The changes to the recording&#39;s state that should generate a call to &#x60;RecoridngStatusCallback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60;. Separate multiple values with a space. Defaults to &#x60;completed&#x60;.
     * @return recordingStatusCallbackEvent
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "in-progress completed absent",
        value = "The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`."
    )
    @JsonProperty(JSON_PROPERTY_RECORDING_STATUS_CALLBACK_EVENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getRecordingStatusCallbackEvent() {
        return recordingStatusCallbackEvent;
    }

    @JsonProperty(JSON_PROPERTY_RECORDING_STATUS_CALLBACK_EVENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecordingStatusCallbackEvent(
        String recordingStatusCallbackEvent
    ) {
        this.recordingStatusCallbackEvent = recordingStatusCallbackEvent;
    }

    public InitiateCallRequest recordingTimeout(Integer recordingTimeout) {
        this.recordingTimeout = recordingTimeout;
        return this;
    }

    /**
     * The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)
     * @return recordingTimeout
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "5",
        value = "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)"
    )
    @JsonProperty(JSON_PROPERTY_RECORDING_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getRecordingTimeout() {
        return recordingTimeout;
    }

    @JsonProperty(JSON_PROPERTY_RECORDING_TIMEOUT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecordingTimeout(Integer recordingTimeout) {
        this.recordingTimeout = recordingTimeout;
    }

    public InitiateCallRequest recordingTrack(
        RecordingTrackEnum recordingTrack
    ) {
        this.recordingTrack = recordingTrack;
        return this;
    }

    /**
     * The audio track to record for the call. The default is &#x60;both&#x60;.
     * @return recordingTrack
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "inbound",
        value = "The audio track to record for the call. The default is `both`."
    )
    @JsonProperty(JSON_PROPERTY_RECORDING_TRACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public RecordingTrackEnum getRecordingTrack() {
        return recordingTrack;
    }

    @JsonProperty(JSON_PROPERTY_RECORDING_TRACK)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setRecordingTrack(RecordingTrackEnum recordingTrack) {
        this.recordingTrack = recordingTrack;
    }

    public InitiateCallRequest sipAuthPassword(String sipAuthPassword) {
        this.sipAuthPassword = sipAuthPassword;
        return this;
    }

    /**
     * The password to use for SIP authentication.
     * @return sipAuthPassword
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "1234",
        value = "The password to use for SIP authentication."
    )
    @JsonProperty(JSON_PROPERTY_SIP_AUTH_PASSWORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSipAuthPassword() {
        return sipAuthPassword;
    }

    @JsonProperty(JSON_PROPERTY_SIP_AUTH_PASSWORD)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSipAuthPassword(String sipAuthPassword) {
        this.sipAuthPassword = sipAuthPassword;
    }

    public InitiateCallRequest sipAuthUsername(String sipAuthUsername) {
        this.sipAuthUsername = sipAuthUsername;
        return this;
    }

    /**
     * The username to use for SIP authentication.
     * @return sipAuthUsername
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "user",
        value = "The username to use for SIP authentication."
    )
    @JsonProperty(JSON_PROPERTY_SIP_AUTH_USERNAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getSipAuthUsername() {
        return sipAuthUsername;
    }

    @JsonProperty(JSON_PROPERTY_SIP_AUTH_USERNAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSipAuthUsername(String sipAuthUsername) {
        this.sipAuthUsername = sipAuthUsername;
    }

    public InitiateCallRequest trim(TrimEnum trim) {
        this.trim = trim;
        return this;
    }

    /**
     * Whether to trim any leading and trailing silence from the recording. Defaults to &#x60;trim-silence&#x60;.
     * @return trim
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(
        example = "false",
        value = "Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`."
    )
    @JsonProperty(JSON_PROPERTY_TRIM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TrimEnum getTrim() {
        return trim;
    }

    @JsonProperty(JSON_PROPERTY_TRIM)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTrim(TrimEnum trim) {
        this.trim = trim;
    }

    /**
     * Return true if this InitiateCallRequest object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InitiateCallRequest initiateCallRequest = (InitiateCallRequest) o;
        return (
            Objects.equals(
                this.applicationSid,
                initiateCallRequest.applicationSid
            ) &&
            Objects.equals(this.to, initiateCallRequest.to) &&
            Objects.equals(this.from, initiateCallRequest.from) &&
            Objects.equals(this.callerId, initiateCallRequest.callerId) &&
            Objects.equals(this.url, initiateCallRequest.url) &&
            Objects.equals(this.urlMethod, initiateCallRequest.urlMethod) &&
            Objects.equals(this.fallbackUrl, initiateCallRequest.fallbackUrl) &&
            Objects.equals(
                this.statusCallback,
                initiateCallRequest.statusCallback
            ) &&
            Objects.equals(
                this.statusCallbackMethod,
                initiateCallRequest.statusCallbackMethod
            ) &&
            Objects.equals(
                this.statusCallbackEvent,
                initiateCallRequest.statusCallbackEvent
            ) &&
            Objects.equals(
                this.machineDetection,
                initiateCallRequest.machineDetection
            ) &&
            Objects.equals(
                this.detectionMode,
                initiateCallRequest.detectionMode
            ) &&
            Objects.equals(this.asyncAmd, initiateCallRequest.asyncAmd) &&
            Objects.equals(
                this.asyncAmdStatusCallback,
                initiateCallRequest.asyncAmdStatusCallback
            ) &&
            Objects.equals(
                this.asyncAmdStatusCallbackMethod,
                initiateCallRequest.asyncAmdStatusCallbackMethod
            ) &&
            Objects.equals(
                this.machineDetectionTimeout,
                initiateCallRequest.machineDetectionTimeout
            ) &&
            Objects.equals(
                this.machineDetectionSpeechThreshold,
                initiateCallRequest.machineDetectionSpeechThreshold
            ) &&
            Objects.equals(
                this.machineDetectionSpeechEndThreshold,
                initiateCallRequest.machineDetectionSpeechEndThreshold
            ) &&
            Objects.equals(
                this.machineDetectionSilenceTimeout,
                initiateCallRequest.machineDetectionSilenceTimeout
            ) &&
            Objects.equals(
                this.cancelPlaybackOnMachineDetection,
                initiateCallRequest.cancelPlaybackOnMachineDetection
            ) &&
            Objects.equals(
                this.cancelPlaybackOnDetectMessageEnd,
                initiateCallRequest.cancelPlaybackOnDetectMessageEnd
            ) &&
            Objects.equals(
                this.preferredCodecs,
                initiateCallRequest.preferredCodecs
            ) &&
            Objects.equals(this.record, initiateCallRequest.record) &&
            Objects.equals(
                this.recordingChannels,
                initiateCallRequest.recordingChannels
            ) &&
            Objects.equals(
                this.recordingStatusCallback,
                initiateCallRequest.recordingStatusCallback
            ) &&
            Objects.equals(
                this.recordingStatusCallbackMethod,
                initiateCallRequest.recordingStatusCallbackMethod
            ) &&
            Objects.equals(
                this.recordingStatusCallbackEvent,
                initiateCallRequest.recordingStatusCallbackEvent
            ) &&
            Objects.equals(
                this.recordingTimeout,
                initiateCallRequest.recordingTimeout
            ) &&
            Objects.equals(
                this.recordingTrack,
                initiateCallRequest.recordingTrack
            ) &&
            Objects.equals(
                this.sipAuthPassword,
                initiateCallRequest.sipAuthPassword
            ) &&
            Objects.equals(
                this.sipAuthUsername,
                initiateCallRequest.sipAuthUsername
            ) &&
            Objects.equals(this.trim, initiateCallRequest.trim)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            applicationSid,
            to,
            from,
            callerId,
            url,
            urlMethod,
            fallbackUrl,
            statusCallback,
            statusCallbackMethod,
            statusCallbackEvent,
            machineDetection,
            detectionMode,
            asyncAmd,
            asyncAmdStatusCallback,
            asyncAmdStatusCallbackMethod,
            machineDetectionTimeout,
            machineDetectionSpeechThreshold,
            machineDetectionSpeechEndThreshold,
            machineDetectionSilenceTimeout,
            cancelPlaybackOnMachineDetection,
            cancelPlaybackOnDetectMessageEnd,
            preferredCodecs,
            record,
            recordingChannels,
            recordingStatusCallback,
            recordingStatusCallbackMethod,
            recordingStatusCallbackEvent,
            recordingTimeout,
            recordingTrack,
            sipAuthPassword,
            sipAuthUsername,
            trim
        );
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InitiateCallRequest {\n");
        sb
            .append("    applicationSid: ")
            .append(toIndentedString(applicationSid))
            .append("\n");
        sb.append("    to: ").append(toIndentedString(to)).append("\n");
        sb.append("    from: ").append(toIndentedString(from)).append("\n");
        sb
            .append("    callerId: ")
            .append(toIndentedString(callerId))
            .append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb
            .append("    urlMethod: ")
            .append(toIndentedString(urlMethod))
            .append("\n");
        sb
            .append("    fallbackUrl: ")
            .append(toIndentedString(fallbackUrl))
            .append("\n");
        sb
            .append("    statusCallback: ")
            .append(toIndentedString(statusCallback))
            .append("\n");
        sb
            .append("    statusCallbackMethod: ")
            .append(toIndentedString(statusCallbackMethod))
            .append("\n");
        sb
            .append("    statusCallbackEvent: ")
            .append(toIndentedString(statusCallbackEvent))
            .append("\n");
        sb
            .append("    machineDetection: ")
            .append(toIndentedString(machineDetection))
            .append("\n");
        sb
            .append("    detectionMode: ")
            .append(toIndentedString(detectionMode))
            .append("\n");
        sb
            .append("    asyncAmd: ")
            .append(toIndentedString(asyncAmd))
            .append("\n");
        sb
            .append("    asyncAmdStatusCallback: ")
            .append(toIndentedString(asyncAmdStatusCallback))
            .append("\n");
        sb
            .append("    asyncAmdStatusCallbackMethod: ")
            .append(toIndentedString(asyncAmdStatusCallbackMethod))
            .append("\n");
        sb
            .append("    machineDetectionTimeout: ")
            .append(toIndentedString(machineDetectionTimeout))
            .append("\n");
        sb
            .append("    machineDetectionSpeechThreshold: ")
            .append(toIndentedString(machineDetectionSpeechThreshold))
            .append("\n");
        sb
            .append("    machineDetectionSpeechEndThreshold: ")
            .append(toIndentedString(machineDetectionSpeechEndThreshold))
            .append("\n");
        sb
            .append("    machineDetectionSilenceTimeout: ")
            .append(toIndentedString(machineDetectionSilenceTimeout))
            .append("\n");
        sb
            .append("    cancelPlaybackOnMachineDetection: ")
            .append(toIndentedString(cancelPlaybackOnMachineDetection))
            .append("\n");
        sb
            .append("    cancelPlaybackOnDetectMessageEnd: ")
            .append(toIndentedString(cancelPlaybackOnDetectMessageEnd))
            .append("\n");
        sb
            .append("    preferredCodecs: ")
            .append(toIndentedString(preferredCodecs))
            .append("\n");
        sb.append("    record: ").append(toIndentedString(record)).append("\n");
        sb
            .append("    recordingChannels: ")
            .append(toIndentedString(recordingChannels))
            .append("\n");
        sb
            .append("    recordingStatusCallback: ")
            .append(toIndentedString(recordingStatusCallback))
            .append("\n");
        sb
            .append("    recordingStatusCallbackMethod: ")
            .append(toIndentedString(recordingStatusCallbackMethod))
            .append("\n");
        sb
            .append("    recordingStatusCallbackEvent: ")
            .append(toIndentedString(recordingStatusCallbackEvent))
            .append("\n");
        sb
            .append("    recordingTimeout: ")
            .append(toIndentedString(recordingTimeout))
            .append("\n");
        sb
            .append("    recordingTrack: ")
            .append(toIndentedString(recordingTrack))
            .append("\n");
        sb
            .append("    sipAuthPassword: ")
            .append(toIndentedString(sipAuthPassword))
            .append("\n");
        sb
            .append("    sipAuthUsername: ")
            .append(toIndentedString(sipAuthUsername))
            .append("\n");
        sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
