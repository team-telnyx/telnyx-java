/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.telnyx.sdk.JSON;
import com.telnyx.sdk.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
@JsonDeserialize(
    using = ListPhoneNumbersFilterCountryIsoAlpha2Parameter.ListPhoneNumbersFilterCountryIsoAlpha2ParameterDeserializer.class
)
@JsonSerialize(
    using = ListPhoneNumbersFilterCountryIsoAlpha2Parameter.ListPhoneNumbersFilterCountryIsoAlpha2ParameterSerializer.class
)
public class ListPhoneNumbersFilterCountryIsoAlpha2Parameter
    extends AbstractOpenApiSchema {

    private static final Logger log = Logger.getLogger(
        ListPhoneNumbersFilterCountryIsoAlpha2Parameter.class.getName()
    );

    public static class ListPhoneNumbersFilterCountryIsoAlpha2ParameterSerializer
        extends StdSerializer<ListPhoneNumbersFilterCountryIsoAlpha2Parameter> {

        public ListPhoneNumbersFilterCountryIsoAlpha2ParameterSerializer(
            Class<ListPhoneNumbersFilterCountryIsoAlpha2Parameter> t
        ) {
            super(t);
        }

        public ListPhoneNumbersFilterCountryIsoAlpha2ParameterSerializer() {
            this(null);
        }

        @Override
        public void serialize(
            ListPhoneNumbersFilterCountryIsoAlpha2Parameter value,
            JsonGenerator jgen,
            SerializerProvider provider
        ) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ListPhoneNumbersFilterCountryIsoAlpha2ParameterDeserializer
        extends StdDeserializer<
            ListPhoneNumbersFilterCountryIsoAlpha2Parameter
        > {

        public ListPhoneNumbersFilterCountryIsoAlpha2ParameterDeserializer() {
            this(ListPhoneNumbersFilterCountryIsoAlpha2Parameter.class);
        }

        public ListPhoneNumbersFilterCountryIsoAlpha2ParameterDeserializer(
            Class<?> vc
        ) {
            super(vc);
        }

        @Override
        public ListPhoneNumbersFilterCountryIsoAlpha2Parameter deserialize(
            JsonParser jp,
            DeserializationContext ctxt
        ) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            int match = 0;

            // We'll check the initial token to see if it's an array or string
            JsonParser treeTraverser = tree.traverse(jp.getCodec());
            JsonToken token = treeTraverser.nextToken();

            // Attempt to deserialize as List<String>
            if (token == JsonToken.START_ARRAY) {
                try {
                    deserialized = tree
                        .traverse(jp.getCodec())
                        .readValueAs(new TypeReference<List<String>>() {});
                    match++;
                    log.log(
                        Level.FINER,
                        "Input data matches schema 'List<String>'"
                    );
                } catch (Exception e) {
                    log.log(
                        Level.FINER,
                        "Input data does not match schema 'List<String>'",
                        e
                    );
                }
            }

            // Attempt to deserialize as String
            if (token == JsonToken.VALUE_STRING) {
                try {
                    deserialized = tree
                        .traverse(jp.getCodec())
                        .readValueAs(String.class);
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'String'");
                } catch (Exception e) {
                    log.log(
                        Level.FINER,
                        "Input data does not match schema 'String'",
                        e
                    );
                }
            }

            // Exactly one valid match is required
            if (match == 1) {
                ListPhoneNumbersFilterCountryIsoAlpha2Parameter ret =
                    new ListPhoneNumbersFilterCountryIsoAlpha2Parameter();
                ret.setActualInstance(deserialized);
                return ret;
            }

            throw new IOException(
                String.format(
                    "Failed deserialization for ListPhoneNumbersFilterCountryIsoAlpha2Parameter: " +
                    "%d classes match result, expected 1",
                    match
                )
            );
        }

        @Override
        public ListPhoneNumbersFilterCountryIsoAlpha2Parameter getNullValue(
            DeserializationContext ctxt
        ) throws JsonMappingException {
            throw new JsonMappingException(
                ctxt.getParser(),
                "ListPhoneNumbersFilterCountryIsoAlpha2Parameter cannot be null"
            );
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<>();

    public ListPhoneNumbersFilterCountryIsoAlpha2Parameter() {
        super("oneOf", Boolean.FALSE);
    }

    public ListPhoneNumbersFilterCountryIsoAlpha2Parameter(List<String> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ListPhoneNumbersFilterCountryIsoAlpha2Parameter(String o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("List<String>", new GenericType<List<String>>() {});
        schemas.put("String", new GenericType<String>() {});
        JSON.registerDescendants(
            ListPhoneNumbersFilterCountryIsoAlpha2Parameter.class,
            Collections.unmodifiableMap(schemas)
        );
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ListPhoneNumbersFilterCountryIsoAlpha2Parameter.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * List<String>, String.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof List) {
            // no compile-time way to verify List<String> vs. List of something else,
            // but we assume it's correct.
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof String) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
            "Invalid instance type. Must be List<String> or String"
        );
    }

    /**
     * Get the actual instance, which can be a List<String> or a String.
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance as List<String>. Throws ClassCastException
     * if the underlying instance is not actually a List<String>.
     */
    @SuppressWarnings("unchecked")
    public List<String> getListString() {
        return (List<String>) super.getActualInstance();
    }

    /**
     * Get the actual instance as String. Throws ClassCastException
     * if the underlying instance is not actually a String.
     */
    public String getString() {
        return (String) super.getActualInstance();
    }
}
