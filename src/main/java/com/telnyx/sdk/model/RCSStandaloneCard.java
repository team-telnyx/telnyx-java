/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.RCSCardContent;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * Standalone card
 */
@ApiModel(description = "Standalone card")
@JsonPropertyOrder({
  RCSStandaloneCard.JSON_PROPERTY_CARD_ORIENTATION,
  RCSStandaloneCard.JSON_PROPERTY_THUMBNAIL_IMAGE_ALIGNMENT,
  RCSStandaloneCard.JSON_PROPERTY_CARD_CONTENT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class RCSStandaloneCard {
  /**
   * Orientation of the card.
   */
  public enum CardOrientationEnum {
    CARD_ORIENTATION_UNSPECIFIED(String.valueOf("CARD_ORIENTATION_UNSPECIFIED")),
    
    HORIZONTAL(String.valueOf("HORIZONTAL")),
    
    VERTICAL(String.valueOf("VERTICAL"));

    private String value;

    CardOrientationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CardOrientationEnum fromValue(String value) {
      for (CardOrientationEnum b : CardOrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CARD_ORIENTATION = "card_orientation";
  private CardOrientationEnum cardOrientation;

  /**
   * Image preview alignment for standalone cards with horizontal layout.
   */
  public enum ThumbnailImageAlignmentEnum {
    THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED(String.valueOf("THUMBNAIL_IMAGE_ALIGNMENT_UNSPECIFIED")),
    
    LEFT(String.valueOf("LEFT")),
    
    RIGHT(String.valueOf("RIGHT"));

    private String value;

    ThumbnailImageAlignmentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ThumbnailImageAlignmentEnum fromValue(String value) {
      for (ThumbnailImageAlignmentEnum b : ThumbnailImageAlignmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_THUMBNAIL_IMAGE_ALIGNMENT = "thumbnail_image_alignment";
  private ThumbnailImageAlignmentEnum thumbnailImageAlignment;

  public static final String JSON_PROPERTY_CARD_CONTENT = "card_content";
  private RCSCardContent cardContent;

  public RCSStandaloneCard() { 
  }

  public RCSStandaloneCard cardOrientation(CardOrientationEnum cardOrientation) {
    this.cardOrientation = cardOrientation;
    return this;
  }

   /**
   * Orientation of the card.
   * @return cardOrientation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "HORIZONTAL", required = true, value = "Orientation of the card.")
  @JsonProperty(JSON_PROPERTY_CARD_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CardOrientationEnum getCardOrientation() {
    return cardOrientation;
  }


  @JsonProperty(JSON_PROPERTY_CARD_ORIENTATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCardOrientation(CardOrientationEnum cardOrientation) {
    this.cardOrientation = cardOrientation;
  }


  public RCSStandaloneCard thumbnailImageAlignment(ThumbnailImageAlignmentEnum thumbnailImageAlignment) {
    this.thumbnailImageAlignment = thumbnailImageAlignment;
    return this;
  }

   /**
   * Image preview alignment for standalone cards with horizontal layout.
   * @return thumbnailImageAlignment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "LEFT", required = true, value = "Image preview alignment for standalone cards with horizontal layout.")
  @JsonProperty(JSON_PROPERTY_THUMBNAIL_IMAGE_ALIGNMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ThumbnailImageAlignmentEnum getThumbnailImageAlignment() {
    return thumbnailImageAlignment;
  }


  @JsonProperty(JSON_PROPERTY_THUMBNAIL_IMAGE_ALIGNMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setThumbnailImageAlignment(ThumbnailImageAlignmentEnum thumbnailImageAlignment) {
    this.thumbnailImageAlignment = thumbnailImageAlignment;
  }


  public RCSStandaloneCard cardContent(RCSCardContent cardContent) {
    this.cardContent = cardContent;
    return this;
  }

   /**
   * Get cardContent
   * @return cardContent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CARD_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RCSCardContent getCardContent() {
    return cardContent;
  }


  @JsonProperty(JSON_PROPERTY_CARD_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCardContent(RCSCardContent cardContent) {
    this.cardContent = cardContent;
  }


  /**
   * Return true if this RCSStandaloneCard object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RCSStandaloneCard rcSStandaloneCard = (RCSStandaloneCard) o;
    return Objects.equals(this.cardOrientation, rcSStandaloneCard.cardOrientation) &&
        Objects.equals(this.thumbnailImageAlignment, rcSStandaloneCard.thumbnailImageAlignment) &&
        Objects.equals(this.cardContent, rcSStandaloneCard.cardContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardOrientation, thumbnailImageAlignment, cardContent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RCSStandaloneCard {\n");
    sb.append("    cardOrientation: ").append(toIndentedString(cardOrientation)).append("\n");
    sb.append("    thumbnailImageAlignment: ").append(toIndentedString(thumbnailImageAlignment)).append("\n");
    sb.append("    cardContent: ").append(toIndentedString(cardContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

