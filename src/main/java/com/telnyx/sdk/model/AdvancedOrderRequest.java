/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.telnyx.sdk.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * AdvancedOrderRequest
 */
@JsonPropertyOrder(
    {
        AdvancedOrderRequest.JSON_PROPERTY_COUNTRY_CODE,
        AdvancedOrderRequest.JSON_PROPERTY_COMMENTS,
        AdvancedOrderRequest.JSON_PROPERTY_QUANTITY,
        AdvancedOrderRequest.JSON_PROPERTY_AREA_CODE,
        AdvancedOrderRequest.JSON_PROPERTY_PHONE_NUMBER_TYPE,
        AdvancedOrderRequest.JSON_PROPERTY_FEATURES,
        AdvancedOrderRequest.JSON_PROPERTY_CUSTOMER_REFERENCE,
    }
)
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
public class AdvancedOrderRequest {

    public static final String JSON_PROPERTY_COUNTRY_CODE = "country_code";
    private String countryCode = "US";

    public static final String JSON_PROPERTY_COMMENTS = "comments";
    private String comments = "";

    public static final String JSON_PROPERTY_QUANTITY = "quantity";
    private Integer quantity = 1;

    public static final String JSON_PROPERTY_AREA_CODE = "area_code";
    private String areaCode = "";

    /**
     * Gets or Sets phoneNumberType
     */
    public enum PhoneNumberTypeEnum {
        LOCAL(String.valueOf("local")),

        MOBILE(String.valueOf("mobile")),

        TOLL_FREE(String.valueOf("toll_free")),

        SHARED_COST(String.valueOf("shared_cost")),

        NATIONAL(String.valueOf("national")),

        LANDLINE(String.valueOf("landline"));

        private String value;

        PhoneNumberTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static PhoneNumberTypeEnum fromValue(String value) {
            for (PhoneNumberTypeEnum b : PhoneNumberTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_PHONE_NUMBER_TYPE =
        "phone_number_type";
    private List<PhoneNumberTypeEnum> phoneNumberType = null;

    /**
     * Gets or Sets features
     */
    public enum FeaturesEnum {
        SMS(String.valueOf("sms")),

        MMS(String.valueOf("mms")),

        VOICE(String.valueOf("voice")),

        FAX(String.valueOf("fax")),

        EMERGENCY(String.valueOf("emergency"));

        private String value;

        FeaturesEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static FeaturesEnum fromValue(String value) {
            for (FeaturesEnum b : FeaturesEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException(
                "Unexpected value '" + value + "'"
            );
        }
    }

    public static final String JSON_PROPERTY_FEATURES = "features";
    private Set<FeaturesEnum> features = null;

    public static final String JSON_PROPERTY_CUSTOMER_REFERENCE =
        "customer_reference";
    private String customerReference = "";

    public AdvancedOrderRequest() {}

    public AdvancedOrderRequest countryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Get countryCode
     * @return countryCode
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCountryCode() {
        return countryCode;
    }

    @JsonProperty(JSON_PROPERTY_COUNTRY_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public AdvancedOrderRequest comments(String comments) {
        this.comments = comments;
        return this;
    }

    /**
     * Get comments
     * @return comments
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_COMMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getComments() {
        return comments;
    }

    @JsonProperty(JSON_PROPERTY_COMMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setComments(String comments) {
        this.comments = comments;
    }

    public AdvancedOrderRequest quantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     * minimum: 1
     * maximum: 10000
     * @return quantity
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getQuantity() {
        return quantity;
    }

    @JsonProperty(JSON_PROPERTY_QUANTITY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public AdvancedOrderRequest areaCode(String areaCode) {
        this.areaCode = areaCode;
        return this;
    }

    /**
     * Get areaCode
     * @return areaCode
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_AREA_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAreaCode() {
        return areaCode;
    }

    @JsonProperty(JSON_PROPERTY_AREA_CODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAreaCode(String areaCode) {
        this.areaCode = areaCode;
    }

    public AdvancedOrderRequest phoneNumberType(
        List<PhoneNumberTypeEnum> phoneNumberType
    ) {
        this.phoneNumberType = phoneNumberType;
        return this;
    }

    public AdvancedOrderRequest addPhoneNumberTypeItem(
        PhoneNumberTypeEnum phoneNumberTypeItem
    ) {
        if (this.phoneNumberType == null) {
            this.phoneNumberType = new ArrayList<>();
        }
        this.phoneNumberType.add(phoneNumberTypeItem);
        return this;
    }

    /**
     * Get phoneNumberType
     * @return phoneNumberType
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_PHONE_NUMBER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<PhoneNumberTypeEnum> getPhoneNumberType() {
        return phoneNumberType;
    }

    @JsonProperty(JSON_PROPERTY_PHONE_NUMBER_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPhoneNumberType(List<PhoneNumberTypeEnum> phoneNumberType) {
        this.phoneNumberType = phoneNumberType;
    }

    public AdvancedOrderRequest features(Set<FeaturesEnum> features) {
        this.features = features;
        return this;
    }

    public AdvancedOrderRequest addfeaturesItem(FeaturesEnum featuresItem) {
        if (this.features == null) {
            this.features = new LinkedHashSet<>();
        }
        this.features.add(featuresItem);
        return this;
    }

    /**
     * Get features
     * @return features
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_FEATURES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Set<FeaturesEnum> getFeatures() {
        return features;
    }

    @JsonDeserialize(as = LinkedHashSet.class)
    @JsonProperty(JSON_PROPERTY_FEATURES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFeatures(Set<FeaturesEnum> features) {
        this.features = features;
    }

    public AdvancedOrderRequest customerReference(String customerReference) {
        this.customerReference = customerReference;
        return this;
    }

    /**
     * Get customerReference
     * @return customerReference
     **/
    @jakarta.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_CUSTOMER_REFERENCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCustomerReference() {
        return customerReference;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOMER_REFERENCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCustomerReference(String customerReference) {
        this.customerReference = customerReference;
    }

    /**
     * Return true if this AdvancedOrderRequest object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdvancedOrderRequest advancedOrderRequest = (AdvancedOrderRequest) o;
        return (
            Objects.equals(
                this.countryCode,
                advancedOrderRequest.countryCode
            ) &&
            Objects.equals(this.comments, advancedOrderRequest.comments) &&
            Objects.equals(this.quantity, advancedOrderRequest.quantity) &&
            Objects.equals(this.areaCode, advancedOrderRequest.areaCode) &&
            Objects.equals(
                this.phoneNumberType,
                advancedOrderRequest.phoneNumberType
            ) &&
            Objects.equals(this.features, advancedOrderRequest.features) &&
            Objects.equals(
                this.customerReference,
                advancedOrderRequest.customerReference
            )
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            countryCode,
            comments,
            quantity,
            areaCode,
            phoneNumberType,
            features,
            customerReference
        );
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AdvancedOrderRequest {\n");
        sb
            .append("    countryCode: ")
            .append(toIndentedString(countryCode))
            .append("\n");
        sb
            .append("    comments: ")
            .append(toIndentedString(comments))
            .append("\n");
        sb
            .append("    quantity: ")
            .append(toIndentedString(quantity))
            .append("\n");
        sb
            .append("    areaCode: ")
            .append(toIndentedString(areaCode))
            .append("\n");
        sb
            .append("    phoneNumberType: ")
            .append(toIndentedString(phoneNumberType))
            .append("\n");
        sb
            .append("    features: ")
            .append(toIndentedString(features))
            .append("\n");
        sb
            .append("    customerReference: ")
            .append(toIndentedString(customerReference))
            .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
