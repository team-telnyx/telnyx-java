/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.GCSConfigurationData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * GCSConfiguration
 */
@JsonPropertyOrder({
  GCSConfiguration.JSON_PROPERTY_BACKEND,
  GCSConfiguration.JSON_PROPERTY_CONFIGURATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GCSConfiguration {
  /**
   * Gets or Sets backend
   */
  public enum BackendEnum {
    GCS("gcs");

    private String value;

    BackendEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BackendEnum fromValue(String value) {
      for (BackendEnum b : BackendEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BACKEND = "backend";
  private BackendEnum backend;

  public static final String JSON_PROPERTY_CONFIGURATION = "configuration";
  private GCSConfigurationData _configuration;

  public GCSConfiguration() { 
  }

  public GCSConfiguration backend(BackendEnum backend) {
    this.backend = backend;
    return this;
  }

   /**
   * Get backend
   * @return backend
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "gcs", required = true, value = "")
  @JsonProperty(JSON_PROPERTY_BACKEND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BackendEnum getBackend() {
    return backend;
  }


  @JsonProperty(JSON_PROPERTY_BACKEND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBackend(BackendEnum backend) {
    this.backend = backend;
  }


  public GCSConfiguration _configuration(GCSConfigurationData _configuration) {
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GCSConfigurationData getConfiguration() {
    return _configuration;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfiguration(GCSConfigurationData _configuration) {
    this._configuration = _configuration;
  }


  /**
   * Return true if this GCSConfiguration object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GCSConfiguration gcSConfiguration = (GCSConfiguration) o;
    return Objects.equals(this.backend, gcSConfiguration.backend) &&
        Objects.equals(this._configuration, gcSConfiguration._configuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backend, _configuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GCSConfiguration {\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

