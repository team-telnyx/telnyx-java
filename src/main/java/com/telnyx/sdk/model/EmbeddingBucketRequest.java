/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.JSON;
import com.telnyx.sdk.model.SupportedEmbeddingLoaders;
import com.telnyx.sdk.model.SupportedEmbeddingModels;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Arrays;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * EmbeddingBucketRequest
 */
@JsonPropertyOrder(
    {
        EmbeddingBucketRequest.JSON_PROPERTY_BUCKET_NAME,
        EmbeddingBucketRequest.JSON_PROPERTY_DOCUMENT_CHUNK_SIZE,
        EmbeddingBucketRequest.JSON_PROPERTY_DOCUMENT_CHUNK_OVERLAP_SIZE,
        EmbeddingBucketRequest.JSON_PROPERTY_EMBEDDING_MODEL,
        EmbeddingBucketRequest.JSON_PROPERTY_LOADER,
    }
)
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
public class EmbeddingBucketRequest {

    public static final String JSON_PROPERTY_BUCKET_NAME = "bucket_name";
    private String bucketName;

    public static final String JSON_PROPERTY_DOCUMENT_CHUNK_SIZE =
        "document_chunk_size";
    private Integer documentChunkSize = 1024;

    public static final String JSON_PROPERTY_DOCUMENT_CHUNK_OVERLAP_SIZE =
        "document_chunk_overlap_size";
    private Integer documentChunkOverlapSize = 512;

    public static final String JSON_PROPERTY_EMBEDDING_MODEL =
        "embedding_model";
    private SupportedEmbeddingModels embeddingModel =
        SupportedEmbeddingModels.THENLPER_GTE_LARGE;

    public static final String JSON_PROPERTY_LOADER = "loader";
    private SupportedEmbeddingLoaders loader =
        SupportedEmbeddingLoaders.DEFAULT;

    public EmbeddingBucketRequest() {}

    public EmbeddingBucketRequest bucketName(String bucketName) {
        this.bucketName = bucketName;
        return this;
    }

    /**
     * Get bucketName
     * @return bucketName
     **/
    @javax.annotation.Nonnull
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_BUCKET_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getBucketName() {
        return bucketName;
    }

    @JsonProperty(JSON_PROPERTY_BUCKET_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setBucketName(String bucketName) {
        this.bucketName = bucketName;
    }

    public EmbeddingBucketRequest documentChunkSize(Integer documentChunkSize) {
        this.documentChunkSize = documentChunkSize;
        return this;
    }

    /**
     * Get documentChunkSize
     * @return documentChunkSize
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DOCUMENT_CHUNK_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getDocumentChunkSize() {
        return documentChunkSize;
    }

    @JsonProperty(JSON_PROPERTY_DOCUMENT_CHUNK_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDocumentChunkSize(Integer documentChunkSize) {
        this.documentChunkSize = documentChunkSize;
    }

    public EmbeddingBucketRequest documentChunkOverlapSize(
        Integer documentChunkOverlapSize
    ) {
        this.documentChunkOverlapSize = documentChunkOverlapSize;
        return this;
    }

    /**
     * Get documentChunkOverlapSize
     * @return documentChunkOverlapSize
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_DOCUMENT_CHUNK_OVERLAP_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getDocumentChunkOverlapSize() {
        return documentChunkOverlapSize;
    }

    @JsonProperty(JSON_PROPERTY_DOCUMENT_CHUNK_OVERLAP_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDocumentChunkOverlapSize(Integer documentChunkOverlapSize) {
        this.documentChunkOverlapSize = documentChunkOverlapSize;
    }

    public EmbeddingBucketRequest embeddingModel(
        SupportedEmbeddingModels embeddingModel
    ) {
        this.embeddingModel = embeddingModel;
        return this;
    }

    /**
     * Get embeddingModel
     * @return embeddingModel
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_EMBEDDING_MODEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public SupportedEmbeddingModels getEmbeddingModel() {
        return embeddingModel;
    }

    @JsonProperty(JSON_PROPERTY_EMBEDDING_MODEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setEmbeddingModel(SupportedEmbeddingModels embeddingModel) {
        this.embeddingModel = embeddingModel;
    }

    public EmbeddingBucketRequest loader(SupportedEmbeddingLoaders loader) {
        this.loader = loader;
        return this;
    }

    /**
     * Get loader
     * @return loader
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_LOADER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public SupportedEmbeddingLoaders getLoader() {
        return loader;
    }

    @JsonProperty(JSON_PROPERTY_LOADER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setLoader(SupportedEmbeddingLoaders loader) {
        this.loader = loader;
    }

    /**
     * Return true if this EmbeddingBucketRequest object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbeddingBucketRequest embeddingBucketRequest =
            (EmbeddingBucketRequest) o;
        return (
            Objects.equals(
                this.bucketName,
                embeddingBucketRequest.bucketName
            ) &&
            Objects.equals(
                this.documentChunkSize,
                embeddingBucketRequest.documentChunkSize
            ) &&
            Objects.equals(
                this.documentChunkOverlapSize,
                embeddingBucketRequest.documentChunkOverlapSize
            ) &&
            Objects.equals(
                this.embeddingModel,
                embeddingBucketRequest.embeddingModel
            ) &&
            Objects.equals(this.loader, embeddingBucketRequest.loader)
        );
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            bucketName,
            documentChunkSize,
            documentChunkOverlapSize,
            embeddingModel,
            loader
        );
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmbeddingBucketRequest {\n");
        sb
            .append("    bucketName: ")
            .append(toIndentedString(bucketName))
            .append("\n");
        sb
            .append("    documentChunkSize: ")
            .append(toIndentedString(documentChunkSize))
            .append("\n");
        sb
            .append("    documentChunkOverlapSize: ")
            .append(toIndentedString(documentChunkOverlapSize))
            .append("\n");
        sb
            .append("    embeddingModel: ")
            .append(toIndentedString(embeddingModel))
            .append("\n");
        sb.append("    loader: ").append(toIndentedString(loader)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
