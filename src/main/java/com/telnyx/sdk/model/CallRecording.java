/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * The call recording settings for a phone number.
 */
@ApiModel(description = "The call recording settings for a phone number.")
@JsonPropertyOrder({
  CallRecording.JSON_PROPERTY_INBOUND_CALL_RECORDING_ENABLED,
  CallRecording.JSON_PROPERTY_INBOUND_CALL_RECORDING_FORMAT,
  CallRecording.JSON_PROPERTY_INBOUND_CALL_RECORDING_CHANNELS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CallRecording {
  public static final String JSON_PROPERTY_INBOUND_CALL_RECORDING_ENABLED = "inbound_call_recording_enabled";
  private Boolean inboundCallRecordingEnabled = false;

  /**
   * The audio file format for calls being recorded.
   */
  public enum InboundCallRecordingFormatEnum {
    WAV("wav"),
    
    MP3("mp3");

    private String value;

    InboundCallRecordingFormatEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InboundCallRecordingFormatEnum fromValue(String value) {
      for (InboundCallRecordingFormatEnum b : InboundCallRecordingFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INBOUND_CALL_RECORDING_FORMAT = "inbound_call_recording_format";
  private InboundCallRecordingFormatEnum inboundCallRecordingFormat = InboundCallRecordingFormatEnum.WAV;

  /**
   * When using &#39;dual&#39; channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
   */
  public enum InboundCallRecordingChannelsEnum {
    SINGLE("single"),
    
    DUAL("dual");

    private String value;

    InboundCallRecordingChannelsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InboundCallRecordingChannelsEnum fromValue(String value) {
      for (InboundCallRecordingChannelsEnum b : InboundCallRecordingChannelsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INBOUND_CALL_RECORDING_CHANNELS = "inbound_call_recording_channels";
  private InboundCallRecordingChannelsEnum inboundCallRecordingChannels = InboundCallRecordingChannelsEnum.SINGLE;


  public CallRecording inboundCallRecordingEnabled(Boolean inboundCallRecordingEnabled) {
    this.inboundCallRecordingEnabled = inboundCallRecordingEnabled;
    return this;
  }

   /**
   * When enabled, any inbound call to this number will be recorded.
   * @return inboundCallRecordingEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When enabled, any inbound call to this number will be recorded.")
  @JsonProperty(JSON_PROPERTY_INBOUND_CALL_RECORDING_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInboundCallRecordingEnabled() {
    return inboundCallRecordingEnabled;
  }


  public void setInboundCallRecordingEnabled(Boolean inboundCallRecordingEnabled) {
    this.inboundCallRecordingEnabled = inboundCallRecordingEnabled;
  }


  public CallRecording inboundCallRecordingFormat(InboundCallRecordingFormatEnum inboundCallRecordingFormat) {
    this.inboundCallRecordingFormat = inboundCallRecordingFormat;
    return this;
  }

   /**
   * The audio file format for calls being recorded.
   * @return inboundCallRecordingFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The audio file format for calls being recorded.")
  @JsonProperty(JSON_PROPERTY_INBOUND_CALL_RECORDING_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InboundCallRecordingFormatEnum getInboundCallRecordingFormat() {
    return inboundCallRecordingFormat;
  }


  public void setInboundCallRecordingFormat(InboundCallRecordingFormatEnum inboundCallRecordingFormat) {
    this.inboundCallRecordingFormat = inboundCallRecordingFormat;
  }


  public CallRecording inboundCallRecordingChannels(InboundCallRecordingChannelsEnum inboundCallRecordingChannels) {
    this.inboundCallRecordingChannels = inboundCallRecordingChannels;
    return this;
  }

   /**
   * When using &#39;dual&#39; channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.
   * @return inboundCallRecordingChannels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When using 'dual' channels, final audio file will be stereo recorded with the first leg on channel A, and the rest on channel B.")
  @JsonProperty(JSON_PROPERTY_INBOUND_CALL_RECORDING_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InboundCallRecordingChannelsEnum getInboundCallRecordingChannels() {
    return inboundCallRecordingChannels;
  }


  public void setInboundCallRecordingChannels(InboundCallRecordingChannelsEnum inboundCallRecordingChannels) {
    this.inboundCallRecordingChannels = inboundCallRecordingChannels;
  }


  /**
   * Return true if this CallRecording object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallRecording callRecording = (CallRecording) o;
    return Objects.equals(this.inboundCallRecordingEnabled, callRecording.inboundCallRecordingEnabled) &&
        Objects.equals(this.inboundCallRecordingFormat, callRecording.inboundCallRecordingFormat) &&
        Objects.equals(this.inboundCallRecordingChannels, callRecording.inboundCallRecordingChannels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboundCallRecordingEnabled, inboundCallRecordingFormat, inboundCallRecordingChannels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallRecording {\n");
    sb.append("    inboundCallRecordingEnabled: ").append(toIndentedString(inboundCallRecordingEnabled)).append("\n");
    sb.append("    inboundCallRecordingFormat: ").append(toIndentedString(inboundCallRecordingFormat)).append("\n");
    sb.append("    inboundCallRecordingChannels: ").append(toIndentedString(inboundCallRecordingChannels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

