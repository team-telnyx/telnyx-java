/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.telnyx.sdk.model;

import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.telnyx.sdk.JSON;
import com.telnyx.sdk.JSON;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0"
)
@JsonDeserialize(
    using = EnumListResponseInner.EnumListResponseInnerDeserializer.class
)
@JsonSerialize(
    using = EnumListResponseInner.EnumListResponseInnerSerializer.class
)
public class EnumListResponseInner extends AbstractOpenApiSchema {

    private static final Logger log = Logger.getLogger(
        EnumListResponseInner.class.getName()
    );

    public static class EnumListResponseInnerSerializer
        extends StdSerializer<EnumListResponseInner> {

        public EnumListResponseInnerSerializer(Class<EnumListResponseInner> t) {
            super(t);
        }

        public EnumListResponseInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(
            EnumListResponseInner value,
            JsonGenerator jgen,
            SerializerProvider provider
        ) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class EnumListResponseInnerDeserializer
        extends StdDeserializer<EnumListResponseInner> {

        public EnumListResponseInnerDeserializer() {
            this(EnumListResponseInner.class);
        }

        public EnumListResponseInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public EnumListResponseInner deserialize(
            JsonParser jp,
            DeserializationContext ctxt
        ) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize Object
            try {
                deserialized = tree
                    .traverse(jp.getCodec())
                    .readValueAs(Object.class);
                EnumListResponseInner ret = new EnumListResponseInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(
                    Level.FINER,
                    "Input data does not match 'EnumListResponseInner'",
                    e
                );
            }

            // deserialize String
            try {
                deserialized = tree
                    .traverse(jp.getCodec())
                    .readValueAs(String.class);
                EnumListResponseInner ret = new EnumListResponseInner();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(
                    Level.FINER,
                    "Input data does not match 'EnumListResponseInner'",
                    e
                );
            }

            throw new IOException(
                String.format(
                    "Failed deserialization for EnumListResponseInner: no match found"
                )
            );
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public EnumListResponseInner getNullValue(DeserializationContext ctxt)
            throws JsonMappingException {
            throw new JsonMappingException(
                ctxt.getParser(),
                "EnumListResponseInner cannot be null"
            );
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<
        String,
        GenericType
    >();

    public EnumListResponseInner() {
        super("anyOf", Boolean.FALSE);
    }

    public EnumListResponseInner(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EnumListResponseInner(String o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Object", new GenericType<Object>() {});
        schemas.put("String", new GenericType<String>() {});
        JSON.registerDescendants(
            EnumListResponseInner.class,
            Collections.unmodifiableMap(schemas)
        );
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return EnumListResponseInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * Object, String
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (
            JSON.isInstanceOf(Object.class, instance, new HashSet<Class<?>>())
        ) {
            super.setActualInstance(instance);
            return;
        }

        if (
            JSON.isInstanceOf(String.class, instance, new HashSet<Class<?>>())
        ) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
            "Invalid instance type. Must be Object, String"
        );
    }

    /**
     * Get the actual instance, which can be the following:
     * Object, String
     *
     * @return The actual instance (Object, String)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object) super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String) super.getActualInstance();
    }
}
