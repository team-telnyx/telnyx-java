{
  "type": "object",
  "title": "Create Conference Participant Request",
  "properties": {
    "Beep": {
      "description": "Whether to play a notification beep to the conference when the participant enters and exits.",
      "example": "onExit",
      "type": "string",
      "enum": [
        "true",
        "false",
        "onEnter",
        "onExit"
      ]
    },
    "StatusCallback": {
      "description": "URL destination for Telnyx to send status callback events to for the call.",
      "example": "https://www.example.com/callback",
      "type": "string"
    },
    "StatusCallbackMethod": {
      "description": "HTTP request type used for `StatusCallback`.",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST"
      ]
    },
    "StatusCallbackEvent": {
      "description": "The changes to the call's state that should generate a call to `StatusCallback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.",
      "example": "answered completed",
      "type": "string"
    },
    "To": {
      "description": "The phone number of the called party. Phone numbers are formatted with a `+` and country code.",
      "example": "+16175551212",
      "type": "string"
    },
    "From": {
      "description": "The phone number of the party that initiated the call. Phone numbers are formatted with a `+` and country code.",
      "example": "+16175551212",
      "type": "string"
    },
    "Timeout": {
      "description": "The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between 5 and 120, inclusive. The default value is 30.",
      "example": 30,
      "type": "integer"
    },
    "Muted": {
      "description": "Whether the participant should be muted.",
      "example": true,
      "type": "boolean"
    },
    "StartConferenceOnEnter": {
      "description": "Whether to start the conference when the participant enters. Defaults to `true`.",
      "example": false,
      "type": "boolean"
    },
    "EndConferenceOnExit": {
      "description": "Whether to end the conference when the participant leaves. Defaults to `false`.",
      "example": true,
      "type": "boolean"
    },
    "EarlyMedia": {
      "description": "Whether participant shall be bridged to conference before the participant answers (from early media if available). Defaults to `false`.",
      "example": true,
      "type": "boolean",
      "default": false
    },
    "ConferenceStatusCallback": {
      "description": "The URL the conference callbacks will be sent to.",
      "example": "https://example.com/conference_status_callback",
      "type": "string"
    },
    "ConferenceStatusCallbackMethod": {
      "description": "HTTP request type used for `ConferenceStatusCallback`. Defaults to `POST`.",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST"
      ]
    },
    "ConferenceStatusCallbackEvent": {
      "description": "The changes to the conference's state that should generate a call to `ConferenceStatusCallback`. Can be: `start`, `end`, `join` and `leave`. Separate multiple values with a space. By default no callbacks are sent.",
      "example": "start end join leave",
      "type": "string"
    },
    "WaitUrl": {
      "description": "The URL to call for an audio file to play while the participant is waiting for the conference to start.",
      "example": "https://www.example.com/wait_music.mp3",
      "type": "string"
    },
    "MaxParticipants": {
      "description": "The maximum number of participants in the conference. Can be a positive integer from 2 to 800. The default value is 250.",
      "example": 30,
      "type": "integer"
    },
    "Coaching": {
      "description": "Whether the participant is coaching another call. When `true`, `CallSidToCoach` has to be given.",
      "example": false,
      "type": "boolean"
    },
    "CallSidToCoach": {
      "description": "The SID of the participant who is being coached. The participant being coached is the only participant who can hear the participant who is coaching.",
      "example": "v3:9X2vxPDFY2RHSJ1EdMS0RHRksMTg7ldNxdjWbVr9zBjbGjGsSe-aiQ",
      "type": "string"
    },
    "CallerId": {
      "description": "To be used as the caller id name (SIP From Display Name) presented to the destination (`To` number). The string should have a maximum of 128 characters, containing only letters, numbers, spaces, and `-_~!.+` special characters. If ommited, the display name will be the same as the number in the `From` field.",
      "example": "Info",
      "type": "string"
    },
    "TimeLimit": {
      "description": "The maximum duration of the call in seconds.",
      "example": 30,
      "type": "integer"
    },
    "MachineDetection": {
      "description": "Whether to detect if a human or an answering machine picked up the call. Use `Enable` if you would like to ne notified as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine.",
      "example": "Enable",
      "type": "string",
      "enum": [
        "Enable",
        "DetectMessageEnd"
      ]
    },
    "MachineDetectionTimeout": {
      "description": "How long answering machine detection should go on for before sending an `Unknown` result. Given in milliseconds.",
      "example": 1000,
      "type": "integer"
    },
    "MachineDetectionSpeechThreshold": {
      "description": "Maximum threshold of a human greeting. If greeting longer than this value, considered machine. Ignored when `premium` detection is used.",
      "example": 2000,
      "default": 3500,
      "type": "integer"
    },
    "MachineDetectionSpeechEndThreshold": {
      "description": "Silence duration threshold after a greeting message or voice for it be considered human. Ignored when `premium` detection is used.",
      "example": 2000,
      "default": 800,
      "type": "integer"
    },
    "MachineDetectionSilenceTimeout": {
      "description": "If initial silence duration is greater than this value, consider it a machine. Ignored when `premium` detection is used.",
      "example": 2000,
      "default": 3500,
      "type": "integer"
    },
    "AmdStatusCallback": {
      "description": "The URL the result of answering machine detection will be sent to.",
      "example": "https://www.example.com/amd_result",
      "type": "string"
    },
    "AmdStatusCallbackMethod": {
      "description": "HTTP request type used for `AmdStatusCallback`. Defaults to `POST`.",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST"
      ]
    },
    "CancelPlaybackOnMachineDetection": {
      "description": "Whether to cancel ongoing playback on `machine` detection. Defaults to `true`.",
      "default": true,
      "example": false,
      "type": "boolean"
    },
    "CancelPlaybackOnDetectMessageEnd": {
      "description": "Whether to cancel ongoing playback on `greeting ended` detection. Defaults to `true`.",
      "default": true,
      "example": false,
      "type": "boolean"
    },
    "PreferredCodecs": {
      "description": "The list of comma-separated codecs to be offered on a call.",
      "example": "PCMA,PCMU",
      "type": "string"
    },
    "Record": {
      "description": "Whether to record the entire participant's call leg. Defaults to `false`.",
      "example": false,
      "type": "boolean"
    },
    "RecordingChannels": {
      "description": "The number of channels in the final recording. Defaults to `mono`.",
      "example": "dual",
      "type": "string",
      "enum": [
        "mono",
        "dual"
      ]
    },
    "RecordingStatusCallback": {
      "description": "The URL the recording callbacks will be sent to.",
      "example": "https://example.com/recording_status_callback",
      "type": "string"
    },
    "RecordingStatusCallbackMethod": {
      "description": "HTTP request type used for `RecordingStatusCallback`. Defaults to `POST`.",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST"
      ]
    },
    "RecordingStatusCallbackEvent": {
      "description": "The changes to the recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`.",
      "example": "in-progress completed absent",
      "type": "string"
    },
    "RecordingTrack": {
      "description": "The audio track to record for the call. The default is `both`.",
      "example": "inbound",
      "type": "string",
      "enum": [
        "inbound",
        "outbound",
        "both"
      ]
    },
    "SipAuthPassword": {
      "description": "The password to use for SIP authentication.",
      "example": "1234",
      "type": "string"
    },
    "SipAuthUsername": {
      "description": "The username to use for SIP authentication.",
      "example": "user",
      "type": "string"
    },
    "Trim": {
      "description": "Whether to trim any leading and trailing silence from the recording. Defaults to `trim-silence`.",
      "example": false,
      "type": "string",
      "enum": [
        "trim-silence",
        "do-not-trim"
      ]
    },
    "ConferenceRecord": {
      "description": "Whether to record the conference the participant is joining. Defualts to `do-not-record`. The boolean values `true` and `false` are synonymous with `record-from-start` and `do-not-record` respectively.",
      "example": "record-from-start",
      "type": "string",
      "enum": [
        "true",
        "false",
        "record-from-start",
        "do-not-record"
      ]
    },
    "ConferenceRecordingStatusCallback": {
      "description": "The URL the conference recording callbacks will be sent to.",
      "example": "https://example.com/conference_recording_status_callback",
      "type": "string"
    },
    "ConferenceRecordingStatusCallbackMethod": {
      "description": "HTTP request type used for `ConferenceRecordingStatusCallback`. Defaults to `POST`.",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST"
      ]
    },
    "ConferenceRecordingStatusCallbackEvent": {
      "description": "The changes to the conference recording's state that should generate a call to `RecoridngStatusCallback`. Can be: `in-progress`, `completed` and `absent`. Separate multiple values with a space. Defaults to `completed`. `failed` and `absent` are synonymous.",
      "example": "in-progress completed failed absent",
      "type": "string"
    },
    "ConferenceRecordingTimeout": {
      "description": "The number of seconds that Telnyx will wait for the recording to be stopped if silence is detected. The timer only starts when the speech is detected. Please note that the transcription is used to detect silence and the related charge will be applied. The minimum value is 0. The default value is 0 (infinite)",
      "example": 5,
      "type": "integer",
      "default": 0
    },
    "ConferenceTrim": {
      "description": "Whether to trim any leading and trailing silence from the conference recording. Defaults to `trim-silence`.",
      "example": false,
      "type": "string",
      "enum": [
        "trim-silence",
        "do-not-trim"
      ]
    }
  },
  "example": {
    "To": "+12065550100",
    "From": "+12065550200"
  }
}