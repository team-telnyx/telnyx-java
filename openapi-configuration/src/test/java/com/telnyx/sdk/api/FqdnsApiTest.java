/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.CreateFqdnRequest;
import com.telnyx.sdk.model.ErrorResponse;
import com.telnyx.sdk.model.FQDNResponse;
import com.telnyx.sdk.model.ListFQDNsResponse;
import com.telnyx.sdk.model.UpdateFqdnRequest;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FqdnsApi
 */
public class FqdnsApiTest {

    private final FqdnsApi api = new FqdnsApi();

    /**
     * Create an FQDN
     *
     * Create a new FQDN object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFqdnTest() throws ApiException {
        //CreateFqdnRequest createFqdnRequest = null;
        //FQDNResponse response = api.createFqdn(createFqdnRequest);
        // TODO: test validations
    }

    /**
     * Delete an FQDN
     *
     * Delete an FQDN.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFqdnTest() throws ApiException {
        //String id = null;
        //FQDNResponse response = api.deleteFqdn(id);
        // TODO: test validations
    }

    /**
     * List FQDNs
     *
     * Get all FQDNs belonging to the user that match the given filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFqdnsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterConnectionId = null;
        //String filterFqdn = null;
        //Integer filterPort = null;
        //String filterDnsRecordType = null;
        //ListFQDNsResponse response = api.listFqdns()
        //        .pageNumber(pageNumber)
        //        .pageSize(pageSize)
        //        .filterConnectionId(filterConnectionId)
        //        .filterFqdn(filterFqdn)
        //        .filterPort(filterPort)
        //        .filterDnsRecordType(filterDnsRecordType)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an FQDN
     *
     * Return the details regarding a specific FQDN.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveFqdnTest() throws ApiException {
        //String id = null;
        //FQDNResponse response = api.retrieveFqdn(id);
        // TODO: test validations
    }

    /**
     * Update an FQDN
     *
     * Update the details of a specific FQDN.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFqdnTest() throws ApiException {
        //String id = null;
        //UpdateFqdnRequest updateFqdnRequest = null;
        //FQDNResponse response = api.updateFqdn(id, updateFqdnRequest);
        // TODO: test validations
    }

}
