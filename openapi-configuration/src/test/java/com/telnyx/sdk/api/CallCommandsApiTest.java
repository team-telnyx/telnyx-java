/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.AIAssistantStartRequest;
import com.telnyx.sdk.model.AIAssistantStopRequest;
import com.telnyx.sdk.model.AnswerRequest;
import com.telnyx.sdk.model.BridgeRequest;
import com.telnyx.sdk.model.CallControlCommandResponse;
import com.telnyx.sdk.model.CallRequest;
import com.telnyx.sdk.model.ClientStateUpdateRequest;
import com.telnyx.sdk.model.EnqueueRequest;
import com.telnyx.sdk.model.Errors;
import com.telnyx.sdk.model.GatherRequest;
import com.telnyx.sdk.model.GatherUsingAIRequest;
import com.telnyx.sdk.model.GatherUsingAudioRequest;
import com.telnyx.sdk.model.GatherUsingSpeakRequest;
import com.telnyx.sdk.model.HangupRequest;
import com.telnyx.sdk.model.LeaveQueueRequest;
import com.telnyx.sdk.model.NoiseSuppressionStart;
import com.telnyx.sdk.model.NoiseSuppressionStop;
import com.telnyx.sdk.model.PauseRecordingRequest;
import com.telnyx.sdk.model.PlayAudioUrlRequest;
import com.telnyx.sdk.model.PlaybackStopRequest;
import com.telnyx.sdk.model.ReferRequest;
import com.telnyx.sdk.model.RejectRequest;
import com.telnyx.sdk.model.ResumeRecordingRequest;
import com.telnyx.sdk.model.RetrieveCallStatusResponse;
import com.telnyx.sdk.model.SendDTMFRequest;
import com.telnyx.sdk.model.SendSIPInfoRequest;
import com.telnyx.sdk.model.SpeakRequest;
import com.telnyx.sdk.model.StartForkingRequest;
import com.telnyx.sdk.model.StartRecordingRequest;
import com.telnyx.sdk.model.StartSiprecRequest;
import com.telnyx.sdk.model.StartStreamingRequest;
import com.telnyx.sdk.model.StopForkingRequest;
import com.telnyx.sdk.model.StopGatherRequest;
import com.telnyx.sdk.model.StopRecordingRequest;
import com.telnyx.sdk.model.StopSiprecRequest;
import com.telnyx.sdk.model.StopStreamingRequest;
import com.telnyx.sdk.model.TranscriptionStartRequest;
import com.telnyx.sdk.model.TranscriptionStopRequest;
import com.telnyx.sdk.model.TransferCallRequest;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CallCommandsApi
 */
public class CallCommandsApiTest {

    private final CallCommandsApi api = new CallCommandsApi();

    /**
     * Answer call
     *
     * Answer an incoming call. You must issue this command before executing subsequent commands on an incoming call.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/answer-call#callbacks) below):**  - &#x60;call.answered&#x60; - &#x60;streaming.started&#x60;, &#x60;streaming.stopped&#x60; or &#x60;streaming.failed&#x60; if &#x60;stream_url&#x60; was set 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void answerCallTest() throws ApiException {
        //String callControlId = null;
        //AnswerRequest answerRequest = null;
        //CallControlCommandResponse response = api.answerCall(callControlId, answerRequest);
        // TODO: test validations
    }

    /**
     * Bridge calls
     *
     * Bridge two call control calls.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/bridge-call#callbacks) below):**  - &#x60;call.bridged&#x60; for Leg A - &#x60;call.bridged&#x60; for Leg B 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bridgeCallTest() throws ApiException {
        //String callControlId = null;
        //BridgeRequest bridgeRequest = null;
        //CallControlCommandResponse response = api.bridgeCall(callControlId, bridgeRequest);
        // TODO: test validations
    }

    /**
     * Gather using AI
     *
     * Gather parameters defined in the request payload using a voice assistant.   You can pass parameters described as a JSON Schema object and the voice assistant will attempt to gather these informations.   **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/call-gather-using-ai#callbacks) below):**  - &#x60;call.ai_gather.ended&#x60; - &#x60;call.ai_gather.partial_results&#x60; (if &#x60;send_partial_results&#x60; is set to &#x60;true&#x60;) - &#x60;call.ai_gather.tool_call&#x60; (if &#x60;assistant.tools&#x60; are configured)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callGatherUsingAITest() throws ApiException {
        //String callControlId = null;
        //GatherUsingAIRequest gatherUsingAIRequest = null;
        //CallControlCommandResponse response = api.callGatherUsingAI(callControlId, gatherUsingAIRequest);
        // TODO: test validations
    }

    /**
     * Start AI Assistant (BETA)
     *
     * **BETA** - Start an AI assistant on the call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callStartAIAssistantTest() throws ApiException {
        //String callControlId = null;
        //AIAssistantStartRequest aiAssistantStartRequest = null;
        //CallControlCommandResponse response = api.callStartAIAssistant(callControlId, aiAssistantStartRequest);
        // TODO: test validations
    }

    /**
     * Stop AI Assistant (BETA)
     *
     * **BETA** - Stop an AI assistant on the call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callStopAIAssistantTest() throws ApiException {
        //String callControlId = null;
        //AIAssistantStopRequest aiAssistantStopRequest = null;
        //CallControlCommandResponse response = api.callStopAIAssistant(callControlId, aiAssistantStopRequest);
        // TODO: test validations
    }

    /**
     * Dial
     *
     * Dial a number or SIP URI from a given connection. A successful response will include a &#x60;call_leg_id&#x60; which can be used to correlate the command with subsequent webhooks.  **Expected Webhooks (see [schema](https://developers.telnyx.com/api/call-control/dial-call#callbacks) below):**  - &#x60;call.initiated&#x60; - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected - &#x60;streaming.started&#x60;, &#x60;streaming.stopped&#x60; or &#x60;streaming.failed&#x60; if &#x60;stream_url&#x60; was set 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dialCallTest() throws ApiException {
        //CallRequest callRequest = null;
        //RetrieveCallStatusResponse response = api.dialCall(callRequest);
        // TODO: test validations
    }

    /**
     * Enqueue call
     *
     * Put the call in a queue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enqueueCallTest() throws ApiException {
        //String callControlId = null;
        //EnqueueRequest enqueueRequest = null;
        //CallControlCommandResponse response = api.enqueueCall(callControlId, enqueueRequest);
        // TODO: test validations
    }

    /**
     * Gather
     *
     * Gather DTMF signals to build interactive menus.  You can pass a list of valid digits. The &#x60;Answer&#x60; command must be issued before the &#x60;gather&#x60; command.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/gather-call#callbacks) below):**  - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatherCallTest() throws ApiException {
        //String callControlId = null;
        //GatherRequest gatherRequest = null;
        //CallControlCommandResponse response = api.gatherCall(callControlId, gatherRequest);
        // TODO: test validations
    }

    /**
     * Gather using audio
     *
     * Play an audio file on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_audio_url&#39;, which will be played back at the beginning of each prompt. Playback will be interrupted when a DTMF signal is received. The &#x60;Answer command must be issued before the &#x60;gather_using_audio&#x60; command.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/gather-using-audio#callbacks) below):**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatherUsingAudioTest() throws ApiException {
        //String callControlId = null;
        //GatherUsingAudioRequest gatherUsingAudioRequest = null;
        //CallControlCommandResponse response = api.gatherUsingAudio(callControlId, gatherUsingAudioRequest);
        // TODO: test validations
    }

    /**
     * Gather using speak
     *
     * Convert text to speech and play it on the call until the required DTMF signals are gathered to build interactive menus.  You can pass a list of valid digits along with an &#39;invalid_payload&#39;, which will be played back at the beginning of each prompt. Speech will be interrupted when a DTMF signal is received. The &#x60;Answer&#x60; command must be issued before the &#x60;gather_using_speak&#x60; command.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/gather-using-speak#callbacks) below):**  - &#x60;call.dtmf.received&#x60; (you may receive many of these webhooks) - &#x60;call.gather.ended&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatherUsingSpeakTest() throws ApiException {
        //String callControlId = null;
        //GatherUsingSpeakRequest gatherUsingSpeakRequest = null;
        //CallControlCommandResponse response = api.gatherUsingSpeak(callControlId, gatherUsingSpeakRequest);
        // TODO: test validations
    }

    /**
     * Hangup call
     *
     * Hang up the call.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/hangup-call#callbacks) below):**  - &#x60;call.hangup&#x60; - &#x60;call.recording.saved&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hangupCallTest() throws ApiException {
        //String callControlId = null;
        //HangupRequest hangupRequest = null;
        //CallControlCommandResponse response = api.hangupCall(callControlId, hangupRequest);
        // TODO: test validations
    }

    /**
     * Remove call from a queue
     *
     * Removes the call from a queue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void leaveQueueTest() throws ApiException {
        //String callControlId = null;
        //LeaveQueueRequest leaveQueueRequest = null;
        //CallControlCommandResponse response = api.leaveQueue(callControlId, leaveQueueRequest);
        // TODO: test validations
    }

    /**
     * Noise Suppression Start (BETA)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void noiseSuppressionStartTest() throws ApiException {
        //String callControlId = null;
        //NoiseSuppressionStart noiseSuppressionStart = null;
        //CallControlCommandResponse response = api.noiseSuppressionStart(callControlId, noiseSuppressionStart);
        // TODO: test validations
    }

    /**
     * Noise Suppression Stop (BETA)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void noiseSuppressionStopTest() throws ApiException {
        //String callControlId = null;
        //NoiseSuppressionStop noiseSuppressionStop = null;
        //CallControlCommandResponse response = api.noiseSuppressionStop(callControlId, noiseSuppressionStop);
        // TODO: test validations
    }

    /**
     * Record pause
     *
     * Pause recording the call. Recording can be resumed via Resume recording command.  **Expected Webhooks:**  There are no webhooks associated with this command. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pauseCallRecordingTest() throws ApiException {
        //String callControlId = null;
        //PauseRecordingRequest pauseRecordingRequest = null;
        //CallControlCommandResponse response = api.pauseCallRecording(callControlId, pauseRecordingRequest);
        // TODO: test validations
    }

    /**
     * SIP Refer a call
     *
     * Initiate a SIP Refer on a Call Control call. You can initiate a SIP Refer at any point in the duration of a call.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/refer-call#callbacks) below):**  - &#x60;call.refer.started&#x60; - &#x60;call.refer.completed&#x60; - &#x60;call.refer.failed&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void referCallTest() throws ApiException {
        //String callControlId = null;
        //ReferRequest referRequest = null;
        //CallControlCommandResponse response = api.referCall(callControlId, referRequest);
        // TODO: test validations
    }

    /**
     * Reject a call
     *
     * Reject an incoming call.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/reject-call#callbacks) below):**  - &#x60;call.hangup&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectCallTest() throws ApiException {
        //String callControlId = null;
        //RejectRequest rejectRequest = null;
        //CallControlCommandResponse response = api.rejectCall(callControlId, rejectRequest);
        // TODO: test validations
    }

    /**
     * Record resume
     *
     * Resume recording the call.  **Expected Webhooks:**  There are no webhooks associated with this command. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resumeCallRecordingTest() throws ApiException {
        //String callControlId = null;
        //ResumeRecordingRequest resumeRecordingRequest = null;
        //CallControlCommandResponse response = api.resumeCallRecording(callControlId, resumeRecordingRequest);
        // TODO: test validations
    }

    /**
     * Send DTMF
     *
     * Sends DTMF tones from this leg. DTMF tones will be heard by the other end of the call.  **Expected Webhooks:**  There are no webhooks associated with this command. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendDTMFTest() throws ApiException {
        //String callControlId = null;
        //SendDTMFRequest sendDTMFRequest = null;
        //CallControlCommandResponse response = api.sendDTMF(callControlId, sendDTMFRequest);
        // TODO: test validations
    }

    /**
     * Send SIP info
     *
     * Sends SIP info from this leg.  **Expected Webhooks:**  - &#x60;call.sip_info.received&#x60; (to be received on the target call leg) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendSIPInfoTest() throws ApiException {
        //String callControlId = null;
        //SendSIPInfoRequest sendSIPInfoRequest = null;
        //CallControlCommandResponse response = api.sendSIPInfo(callControlId, sendSIPInfoRequest);
        // TODO: test validations
    }

    /**
     * Speak text
     *
     * Convert text to speech and play it back on the call. If multiple speak text commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/speak-call#callbacks) below):**  - &#x60;call.speak.started&#x60; - &#x60;call.speak.ended&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void speakCallTest() throws ApiException {
        //String callControlId = null;
        //SpeakRequest speakRequest = null;
        //CallControlCommandResponse response = api.speakCall(callControlId, speakRequest);
        // TODO: test validations
    }

    /**
     * Forking start
     *
     * Call forking allows you to stream the media from a call to a specific target in realtime.  This stream can be used to enable realtime audio analysis to support a  variety of use cases, including fraud detection, or the creation of AI-generated audio responses.  Requests must specify either the &#x60;target&#x60; attribute or the &#x60;rx&#x60; and &#x60;tx&#x60; attributes.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-fork#callbacks) below):**  - &#x60;call.fork.started&#x60; - &#x60;call.fork.stopped&#x60;  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startCallForkTest() throws ApiException {
        //String callControlId = null;
        //StartForkingRequest startForkingRequest = null;
        //CallControlCommandResponse response = api.startCallFork(callControlId, startForkingRequest);
        // TODO: test validations
    }

    /**
     * Play audio URL
     *
     * Play an audio file on the call. If multiple play audio commands are issued consecutively, the audio files will be placed in a queue awaiting playback.  *Notes:*  - When &#x60;overlay&#x60; is enabled, &#x60;target_legs&#x60; is limited to &#x60;self&#x60;. - A customer cannot Play Audio with &#x60;overlay&#x3D;true&#x60; unless there is a Play Audio with &#x60;overlay&#x3D;false&#x60; actively playing.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-playback#callbacks) below):**  - &#x60;call.playback.started&#x60; - &#x60;call.playback.ended&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startCallPlaybackTest() throws ApiException {
        //String callControlId = null;
        //PlayAudioUrlRequest playAudioUrlRequest = null;
        //CallControlCommandResponse response = api.startCallPlayback(callControlId, playAudioUrlRequest);
        // TODO: test validations
    }

    /**
     * Recording start
     *
     * Start recording the call. Recording will stop on call hang-up, or can be initiated via the Stop Recording command.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-record#callbacks) below):**  - &#x60;call.recording.saved&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startCallRecordTest() throws ApiException {
        //String callControlId = null;
        //StartRecordingRequest startRecordingRequest = null;
        //CallControlCommandResponse response = api.startCallRecord(callControlId, startRecordingRequest);
        // TODO: test validations
    }

    /**
     * Streaming start
     *
     * Start streaming the media from a call to a specific WebSocket address or Dialogflow connection in near-realtime. Audio will be delivered as base64-encoded RTP payload (raw audio), wrapped in JSON payloads.  Please find more details about media streaming messages specification under the [link](https://developers.telnyx.com/docs/voice/programmable-voice/media-streaming).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startCallStreamingTest() throws ApiException {
        //String callControlId = null;
        //StartStreamingRequest startStreamingRequest = null;
        //CallControlCommandResponse response = api.startCallStreaming(callControlId, startStreamingRequest);
        // TODO: test validations
    }

    /**
     * Transcription start
     *
     * Start real-time transcription. Transcription will stop on call hang-up, or can be initiated via the Transcription stop command.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/start-call-transcription#callbacks) below):**  - &#x60;call.transcription&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startCallTranscriptionTest() throws ApiException {
        //String callControlId = null;
        //TranscriptionStartRequest transcriptionStartRequest = null;
        //CallControlCommandResponse response = api.startCallTranscription(callControlId, transcriptionStartRequest);
        // TODO: test validations
    }

    /**
     * SIPREC start
     *
     * Start siprec session to configured in SIPREC connector SRS.   **Expected Webhooks:**  - &#x60;siprec.started&#x60; - &#x60;siprec.stopped&#x60; - &#x60;siprec.failed&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startSiprecSessionTest() throws ApiException {
        //String callControlId = null;
        //StartSiprecRequest startSiprecRequest = null;
        //CallControlCommandResponse response = api.startSiprecSession(callControlId, startSiprecRequest);
        // TODO: test validations
    }

    /**
     * Forking stop
     *
     * Stop forking a call.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-fork#callbacks) below):**  - &#x60;call.fork.stopped&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopCallForkTest() throws ApiException {
        //String callControlId = null;
        //StopForkingRequest stopForkingRequest = null;
        //CallControlCommandResponse response = api.stopCallFork(callControlId, stopForkingRequest);
        // TODO: test validations
    }

    /**
     * Gather stop
     *
     * Stop current gather.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-gather#callbacks) below):**  - &#x60;call.gather.ended&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopCallGatherTest() throws ApiException {
        //String callControlId = null;
        //StopGatherRequest stopGatherRequest = null;
        //CallControlCommandResponse response = api.stopCallGather(callControlId, stopGatherRequest);
        // TODO: test validations
    }

    /**
     * Stop audio playback
     *
     * Stop audio being played on the call.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-playback#callbacks) below):**  - &#x60;call.playback.ended&#x60; or &#x60;call.speak.ended&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopCallPlaybackTest() throws ApiException {
        //String callControlId = null;
        //PlaybackStopRequest playbackStopRequest = null;
        //CallControlCommandResponse response = api.stopCallPlayback(callControlId, playbackStopRequest);
        // TODO: test validations
    }

    /**
     * Recording stop
     *
     * Stop recording the call.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-recording#callbacks) below):**  - &#x60;call.recording.saved&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopCallRecordingTest() throws ApiException {
        //String callControlId = null;
        //StopRecordingRequest stopRecordingRequest = null;
        //CallControlCommandResponse response = api.stopCallRecording(callControlId, stopRecordingRequest);
        // TODO: test validations
    }

    /**
     * Streaming stop
     *
     * Stop streaming a call to a WebSocket.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/stop-call-streaming#callbacks) below):**  - &#x60;streaming.stopped&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopCallStreamingTest() throws ApiException {
        //String callControlId = null;
        //StopStreamingRequest stopStreamingRequest = null;
        //CallControlCommandResponse response = api.stopCallStreaming(callControlId, stopStreamingRequest);
        // TODO: test validations
    }

    /**
     * Transcription stop
     *
     * Stop real-time transcription.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopCallTranscriptionTest() throws ApiException {
        //String callControlId = null;
        //TranscriptionStopRequest transcriptionStopRequest = null;
        //CallControlCommandResponse response = api.stopCallTranscription(callControlId, transcriptionStopRequest);
        // TODO: test validations
    }

    /**
     * SIPREC stop
     *
     * Stop SIPREC session.  **Expected Webhooks:**  - &#x60;siprec.stopped&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopSiprecSessionTest() throws ApiException {
        //String callControlId = null;
        //StopSiprecRequest stopSiprecRequest = null;
        //CallControlCommandResponse response = api.stopSiprecSession(callControlId, stopSiprecRequest);
        // TODO: test validations
    }

    /**
     * Transfer call
     *
     * Transfer a call to a new destination. If the transfer is unsuccessful, a &#x60;call.hangup&#x60; webhook for the other call (Leg B) will be sent indicating that the transfer could not be completed. The original call will remain active and may be issued additional commands, potentially transfering the call to an alternate destination.  **Expected Webhooks (see [callback schema](https://developers.telnyx.com/api/call-control/transfer-call#callbacks) below):**  - &#x60;call.initiated&#x60; - &#x60;call.bridged&#x60; to Leg B - &#x60;call.answered&#x60; or &#x60;call.hangup&#x60; - &#x60;call.machine.detection.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested - &#x60;call.machine.greeting.ended&#x60; if &#x60;answering_machine_detection&#x60; was requested to detect the end of machine greeting - &#x60;call.machine.premium.detection.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested - &#x60;call.machine.premium.greeting.ended&#x60; if &#x60;answering_machine_detection&#x3D;premium&#x60; was requested and a beep was detected 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void transferCallTest() throws ApiException {
        //String callControlId = null;
        //TransferCallRequest transferCallRequest = null;
        //CallControlCommandResponse response = api.transferCall(callControlId, transferCallRequest);
        // TODO: test validations
    }

    /**
     * Update client state
     *
     * Updates client state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientStateTest() throws ApiException {
        //String callControlId = null;
        //ClientStateUpdateRequest clientStateUpdateRequest = null;
        //CallControlCommandResponse response = api.updateClientState(callControlId, clientStateUpdateRequest);
        // TODO: test validations
    }

}
