/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.CredentialsResponse;
import com.telnyx.sdk.model.CustomStorageConfiguration;
import com.telnyx.sdk.model.Errors;
import com.telnyx.sdk.model.GetRecordingTranscription200Response;
import com.telnyx.sdk.model.GetRecordingTranscriptions200Response;
import com.telnyx.sdk.model.GetRecordings200Response;
import com.telnyx.sdk.model.RecordingResponse;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CallRecordingsApi
 */
public class CallRecordingsApiTest {

    private final CallRecordingsApi api = new CallRecordingsApi();

    /**
     * Create a custom storage credential
     *
     * Creates a custom storage credentials configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomStorageCredentialsTest() throws ApiException {
        //String connectionIdWireless = null;
        //CustomStorageConfiguration customStorageConfiguration = null;
        //CredentialsResponse response = api.createCustomStorageCredentials(connectionIdWireless, customStorageConfiguration);
        // TODO: test validations
    }

    /**
     * Delete a stored credential
     *
     * Deletes a stored custom credentials configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomStorageCredentialsTest() throws ApiException {
        //String connectionIdWireless = null;
        //api.deleteCustomStorageCredentials(connectionIdWireless);
        // TODO: test validations
    }

    /**
     * Delete a call recording
     *
     * Permanently deletes a call recording.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecordingTest() throws ApiException {
        //String recordingId = null;
        //RecordingResponse response = api.deleteRecording(recordingId);
        // TODO: test validations
    }

    /**
     * Delete a recording transcription
     *
     * Permanently deletes a recording transcription.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecordingTranscriptionTest() throws ApiException {
        //UUID recordingTranscriptionId = null;
        //GetRecordingTranscription200Response response = api.deleteRecordingTranscription(recordingTranscriptionId);
        // TODO: test validations
    }

    /**
     * Delete a list of call recordings
     *
     * Permanently deletes a list of call recordings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecordingsTest() throws ApiException {
        //List<String> requestBody = null;
        //api.deleteRecordings(requestBody);
        // TODO: test validations
    }

    /**
     * Retrieve a stored credential
     *
     * Returns the information about custom storage credentials.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomStorageCredentialsTest() throws ApiException {
        //String connectionIdWireless = null;
        //CredentialsResponse response = api.getCustomStorageCredentials(connectionIdWireless);
        // TODO: test validations
    }

    /**
     * Retrieve a call recording
     *
     * Retrieves the details of an existing call recording.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordingTest() throws ApiException {
        //String recordingId = null;
        //RecordingResponse response = api.getRecording(recordingId);
        // TODO: test validations
    }

    /**
     * Retrieve a recording transcription
     *
     * Retrieves the details of an existing recording transcription
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordingTranscriptionTest() throws ApiException {
        //UUID recordingTranscriptionId = null;
        //GetRecordingTranscription200Response response = api.getRecordingTranscription(recordingTranscriptionId);
        // TODO: test validations
    }

    /**
     * List all recording transcriptions
     *
     * Returns a list of your recording transcriptions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordingTranscriptionsTest() throws ApiException {
        //GetRecordingTranscriptions200Response response = api.getRecordingTranscriptions();
        // TODO: test validations
    }

    /**
     * List all call recordings
     *
     * Returns a list of your call recordings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordingsTest() throws ApiException {
        //String filterConferenceId = null;
        //String filterCreatedAtGte = null;
        //String filterCreatedAtLte = null;
        //UUID filterCallLegId = null;
        //UUID filterCallSessionId = null;
        //String filterFrom = null;
        //String filterTo = null;
        //String filterConnectionId = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //GetRecordings200Response response = api.getRecordings(filterConferenceId, filterCreatedAtGte, filterCreatedAtLte, filterCallLegId, filterCallSessionId, filterFrom, filterTo, filterConnectionId, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * Update a stored credential
     *
     * Updates a stored custom credentials configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomStorageCredentialsTest() throws ApiException {
        //String connectionIdWireless = null;
        //CustomStorageConfiguration customStorageConfiguration = null;
        //CredentialsResponse response = api.updateCustomStorageCredentials(connectionIdWireless, customStorageConfiguration);
        // TODO: test validations
    }

}
