/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.ESimPurchase;
import com.telnyx.sdk.model.Error;
import com.telnyx.sdk.model.Errors;
import com.telnyx.sdk.model.GetSimCard200Response;
import com.telnyx.sdk.model.GetSimCardAction200Response;
import com.telnyx.sdk.model.GetSimCardActivationCode200Response;
import com.telnyx.sdk.model.GetSimCardDeviceDetails200Response;
import com.telnyx.sdk.model.GetSimCardPublicIp200Response;
import com.telnyx.sdk.model.GetSimCards200Response;
import com.telnyx.sdk.model.GetWirelessConnectivityLogs200Response;
import com.telnyx.sdk.model.ListDataUsageNotifications200Response;
import com.telnyx.sdk.model.PostSimCardDataUsageNotification201Response;
import com.telnyx.sdk.model.PostSimCardDataUsageNotificationRequest;
import com.telnyx.sdk.model.PurchaseESim202Response;
import com.telnyx.sdk.model.SIMCard;
import com.telnyx.sdk.model.SIMCardRegistration;
import com.telnyx.sdk.model.SIMCardRegistrationCodeValidations;
import com.telnyx.sdk.model.SetPublicIPsBulk202Response;
import com.telnyx.sdk.model.SetPublicIPsBulkRequest;
import com.telnyx.sdk.model.SimCardDataUsageNotification;
import java.util.UUID;
import com.telnyx.sdk.model.ValidateRegistrationCodesRequest;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SimCardsApi
 */
public class SimCardsApiTest {

    private final SimCardsApi api = new SimCardsApi();

    /**
     * Deletes a SIM card
     *
     * The SIM card will be decommissioned, removed from your account and you will stop being charged.&lt;br /&gt;The SIM card won&#39;t be able to connect to the network after the deletion is completed, thus making it impossible to consume data.&lt;br/&gt; Transitioning to the disabled state may take a period of time. Until the transition is completed, the SIM card status will be disabling &lt;code&gt;disabling&lt;/code&gt;.&lt;br /&gt;In order to re-enable the SIM card, you will need to re-register it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSimCardTest() throws ApiException {
        //UUID id = null;
        //GetSimCard200Response response = api.deleteSimCard(id);
        // TODO: test validations
    }

    /**
     * Delete SIM card data usage notifications
     *
     * Delete the SIM Card Data Usage Notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSimCardDataUsageNotificationsTest() throws ApiException {
        //UUID id = null;
        //PostSimCardDataUsageNotification201Response response = api.deleteSimCardDataUsageNotifications(id);
        // TODO: test validations
    }

    /**
     * Request a SIM card disable
     *
     * This API disables a SIM card, disconnecting it from the network and making it impossible to consume data.&lt;br/&gt; The API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the disabled state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableSimCardTest() throws ApiException {
        //UUID id = null;
        //GetSimCardAction200Response response = api.disableSimCard(id);
        // TODO: test validations
    }

    /**
     * Request a SIM card enable
     *
     * This API enables a SIM card, connecting it to the network and making it possible to consume data.&lt;br/&gt; To enable a SIM card, it must be associated with a SIM card group.&lt;br/&gt; The API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the enabled state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableSimCardTest() throws ApiException {
        //UUID id = null;
        //GetSimCardAction200Response response = api.enableSimCard(id);
        // TODO: test validations
    }

    /**
     * Get SIM card
     *
     * Returns the details regarding a specific SIM card.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimCardTest() throws ApiException {
        //UUID id = null;
        //Boolean includeSimCardGroup = null;
        //GetSimCard200Response response = api.getSimCard(id, includeSimCardGroup);
        // TODO: test validations
    }

    /**
     * Get activation code for an eSIM
     *
     * It returns the activation code for an eSIM.&lt;br/&gt;&lt;br/&gt;  This API is only available for eSIMs. If the given SIM is a physical SIM card, or has already been installed, an error will be returned. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimCardActivationCodeTest() throws ApiException {
        //UUID id = null;
        //GetSimCardActivationCode200Response response = api.getSimCardActivationCode(id);
        // TODO: test validations
    }

    /**
     * Get a single SIM card data usage notification
     *
     * Get a single SIM Card Data Usage Notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimCardDataUsageNotificationTest() throws ApiException {
        //UUID id = null;
        //PostSimCardDataUsageNotification201Response response = api.getSimCardDataUsageNotification(id);
        // TODO: test validations
    }

    /**
     * Get SIM card device details
     *
     * It returns the device details where a SIM card is currently being used. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimCardDeviceDetailsTest() throws ApiException {
        //UUID id = null;
        //GetSimCardDeviceDetails200Response response = api.getSimCardDeviceDetails(id);
        // TODO: test validations
    }

    /**
     * Get SIM card public IP definition
     *
     * It returns the public IP requested for a SIM card. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimCardPublicIpTest() throws ApiException {
        //UUID id = null;
        //GetSimCardPublicIp200Response response = api.getSimCardPublicIp(id);
        // TODO: test validations
    }

    /**
     * Get all SIM cards
     *
     * Get all SIM cards belonging to the user that match the given filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSimCardsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //Boolean includeSimCardGroup = null;
        //UUID filterSimCardGroupId = null;
        //List<String> filterTags = null;
        //String filterIccid = null;
        //List<String> filterStatus = null;
        //String sort = null;
        //GetSimCards200Response response = api.getSimCards(pageNumber, pageSize, includeSimCardGroup, filterSimCardGroupId, filterTags, filterIccid, filterStatus, sort);
        // TODO: test validations
    }

    /**
     * List wireless connectivity logs
     *
     * This API allows listing a paginated collection of Wireless Connectivity Logs associated with a SIM Card, for troubleshooting purposes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWirelessConnectivityLogsTest() throws ApiException {
        //UUID id = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //GetWirelessConnectivityLogs200Response response = api.getWirelessConnectivityLogs(id, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * List SIM card data usage notifications
     *
     * Lists a paginated collection of SIM card data usage notifications. It enables exploring the collection using specific filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDataUsageNotificationsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //UUID filterSimCardId = null;
        //ListDataUsageNotifications200Response response = api.listDataUsageNotifications(pageNumber, pageSize, filterSimCardId);
        // TODO: test validations
    }

    /**
     * Updates information for a SIM Card Data Usage Notification
     *
     * Updates information for a SIM Card Data Usage Notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchSimCardDataUsageNotificationTest() throws ApiException {
        //UUID id = null;
        //SimCardDataUsageNotification simCardDataUsageNotification = null;
        //PostSimCardDataUsageNotification201Response response = api.patchSimCardDataUsageNotification(id, simCardDataUsageNotification);
        // TODO: test validations
    }

    /**
     * Create a new SIM card data usage notification
     *
     * Creates a new SIM card data usage notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSimCardDataUsageNotificationTest() throws ApiException {
        //PostSimCardDataUsageNotificationRequest postSimCardDataUsageNotificationRequest = null;
        //PostSimCardDataUsageNotification201Response response = api.postSimCardDataUsageNotification(postSimCardDataUsageNotificationRequest);
        // TODO: test validations
    }

    /**
     * Purchase eSIMs
     *
     * Purchases and registers the specified amount of eSIMs to the current user&#39;s account.&lt;br/&gt;&lt;br/&gt; If &lt;code&gt;sim_card_group_id&lt;/code&gt; is provided, the eSIMs will be associated with that group. Otherwise, the default group for the current user will be used.&lt;br/&gt;&lt;br/&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseESimTest() throws ApiException {
        //ESimPurchase esimPurchase = null;
        //PurchaseESim202Response response = api.purchaseESim(esimPurchase);
        // TODO: test validations
    }

    /**
     * Register SIM cards
     *
     * Register the SIM cards associated with the provided registration codes to the current user&#39;s account.&lt;br/&gt;&lt;br/&gt; If &lt;code&gt;sim_card_group_id&lt;/code&gt; is provided, the SIM cards will be associated with that group. Otherwise, the default group for the current user will be used.&lt;br/&gt;&lt;br/&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerSimCardsTest() throws ApiException {
        //SIMCardRegistration siMCardRegistration = null;
        //PurchaseESim202Response response = api.registerSimCards(siMCardRegistration);
        // TODO: test validations
    }

    /**
     * Request removing a SIM card public IP
     *
     * This API removes an existing public IP from a SIM card. &lt;br/&gt;&lt;br/&gt;  The API will trigger an asynchronous operation called a SIM Card Action. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeSimCardPublicIpTest() throws ApiException {
        //UUID id = null;
        //GetSimCardAction200Response response = api.removeSimCardPublicIp(id);
        // TODO: test validations
    }

    /**
     * Request bulk setting SIM card public IPs.
     *
     * This API triggers an asynchronous operation to set a public IP for each of the specified SIM cards.&lt;br/&gt; For each SIM Card a SIM Card Action will be generated. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPublicIPsBulkTest() throws ApiException {
        //SetPublicIPsBulkRequest setPublicIPsBulkRequest = null;
        //SetPublicIPsBulk202Response response = api.setPublicIPsBulk(setPublicIPsBulkRequest);
        // TODO: test validations
    }

    /**
     * Request setting a SIM card public IP
     *
     * This API makes a SIM card reachable on the public internet by mapping a random public IP to the SIM card. &lt;br/&gt;&lt;br/&gt;  The API will trigger an asynchronous operation called a SIM Card Action. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API. &lt;br/&gt;&lt;br/&gt;  Setting a Public IP to a SIM Card incurs a charge and will only succeed if the account has sufficient funds.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSimCardPublicIpTest() throws ApiException {
        //UUID id = null;
        //String regionCode = null;
        //GetSimCardAction200Response response = api.setSimCardPublicIp(id, regionCode);
        // TODO: test validations
    }

    /**
     * Request setting a SIM card to standby
     *
     * The SIM card will be able to connect to the network once the process to set it to standby has been completed, thus making it possible to consume data.&lt;br/&gt; To set a SIM card to standby, it must be associated with SIM card group.&lt;br/&gt; The API will trigger an asynchronous operation called a SIM Card Action. Transitioning to the standby state may take a period of time. The status of the SIM Card Action can be followed through the [List SIM Card Action](https://developersdev.telnyx.com/docs/api/v2/wireless/SIM-Card-Actions#ListSIMCardActions) API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSimCardStandbyTest() throws ApiException {
        //UUID id = null;
        //GetSimCardAction200Response response = api.setSimCardStandby(id);
        // TODO: test validations
    }

    /**
     * Update a SIM card
     *
     * Updates SIM card data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSimCardTest() throws ApiException {
        //UUID id = null;
        //SIMCard siMCard = null;
        //GetSimCard200Response response = api.updateSimCard(id, siMCard);
        // TODO: test validations
    }

    /**
     * Validate SIM cards registration codes
     *
     * It validates whether SIM card registration codes are valid or not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateRegistrationCodesTest() throws ApiException {
        //ValidateRegistrationCodesRequest validateRegistrationCodesRequest = null;
        //SIMCardRegistrationCodeValidations response = api.validateRegistrationCodes(validateRegistrationCodesRequest);
        // TODO: test validations
    }

}
