/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.CreatePortoutReport201Response;
import com.telnyx.sdk.model.CreatePortoutReportRequest;
import com.telnyx.sdk.model.FindPortoutComments200Response;
import com.telnyx.sdk.model.FindPortoutRequest200Response;
import com.telnyx.sdk.model.GetPortRequestSupportingDocuments201Response;
import com.telnyx.sdk.model.ListPortoutEvents200Response;
import com.telnyx.sdk.model.ListPortoutRejections200Response;
import com.telnyx.sdk.model.ListPortoutReports200Response;
import com.telnyx.sdk.model.ListPortoutRequest200Response;
import java.time.OffsetDateTime;
import com.telnyx.sdk.model.PostPortRequestComment201Response;
import com.telnyx.sdk.model.PostPortRequestCommentRequest;
import com.telnyx.sdk.model.PostPortRequestSupportingDocumentsRequest;
import com.telnyx.sdk.model.ShowPortoutEvent200Response;
import java.util.UUID;
import com.telnyx.sdk.model.UpdatePortoutStatusRequest;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NumberPortoutApi
 */
public class NumberPortoutApiTest {

    private final NumberPortoutApi api = new NumberPortoutApi();

    /**
     * Create a port-out related report
     *
     * Generate reports about port-out operations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortoutReportTest() throws ApiException {
        //CreatePortoutReportRequest createPortoutReportRequest = null;
        //CreatePortoutReport201Response response = api.createPortoutReport(createPortoutReportRequest);
        // TODO: test validations
    }

    /**
     * List all comments for a portout request
     *
     * Returns a list of comments for a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPortoutCommentsTest() throws ApiException {
        //UUID id = null;
        //FindPortoutComments200Response response = api.findPortoutComments(id);
        // TODO: test validations
    }

    /**
     * Get a portout request
     *
     * Returns the portout request based on the ID provided
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findPortoutRequestTest() throws ApiException {
        //UUID id = null;
        //FindPortoutRequest200Response response = api.findPortoutRequest(id);
        // TODO: test validations
    }

    /**
     * List supporting documents on a portout request
     *
     * List every supporting documents for a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortRequestSupportingDocumentsTest() throws ApiException {
        //UUID id = null;
        //GetPortRequestSupportingDocuments201Response response = api.getPortRequestSupportingDocuments(id);
        // TODO: test validations
    }

    /**
     * Retrieve a report
     *
     * Retrieve a specific report generated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortoutReportTest() throws ApiException {
        //UUID id = null;
        //CreatePortoutReport201Response response = api.getPortoutReport(id);
        // TODO: test validations
    }

    /**
     * List all port-out events
     *
     * Returns a list of all port-out events.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortoutEventsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterEventType = null;
        //UUID filterPortoutId = null;
        //OffsetDateTime filterCreatedAtGte = null;
        //OffsetDateTime filterCreatedAtLte = null;
        //ListPortoutEvents200Response response = api.listPortoutEvents(pageNumber, pageSize, filterEventType, filterPortoutId, filterCreatedAtGte, filterCreatedAtLte);
        // TODO: test validations
    }

    /**
     * List eligible port-out rejection codes for a specific order
     *
     * Given a port-out ID, list rejection codes that are eligible for that port-out
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortoutRejectionsTest() throws ApiException {
        //String portoutId = null;
        //Integer filterCode = null;
        //List<Integer> filterCodeIn = null;
        //ListPortoutRejections200Response response = api.listPortoutRejections(portoutId, filterCode, filterCodeIn);
        // TODO: test validations
    }

    /**
     * List port-out related reports
     *
     * List the reports generated about port-out operations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortoutReportsTest() throws ApiException {
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //String filterReportType = null;
        //String filterStatus = null;
        //ListPortoutReports200Response response = api.listPortoutReports(pageNumber, pageSize, filterReportType, filterStatus);
        // TODO: test validations
    }

    /**
     * List portout requests
     *
     * Returns the portout requests according to filters
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPortoutRequestTest() throws ApiException {
        //String filterCarrierName = null;
        //String filterSpid = null;
        //String filterStatus = null;
        //List<String> filterStatusIn = null;
        //OffsetDateTime filterPortedOutAtGte = null;
        //OffsetDateTime filterPortedOutAtLte = null;
        //OffsetDateTime filterInsertedAtGte = null;
        //OffsetDateTime filterInsertedAtLte = null;
        //OffsetDateTime filterFocDate = null;
        //String filterPhoneNumber = null;
        //String filterSupportKey = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListPortoutRequest200Response response = api.listPortoutRequest(filterCarrierName, filterSpid, filterStatus, filterStatusIn, filterPortedOutAtGte, filterPortedOutAtLte, filterInsertedAtGte, filterInsertedAtLte, filterFocDate, filterPhoneNumber, filterSupportKey, pageNumber, pageSize);
        // TODO: test validations
    }

    /**
     * Create a comment on a portout request
     *
     * Creates a comment on a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortRequestCommentTest() throws ApiException {
        //UUID id = null;
        //PostPortRequestCommentRequest postPortRequestCommentRequest = null;
        //PostPortRequestComment201Response response = api.postPortRequestComment(id, postPortRequestCommentRequest);
        // TODO: test validations
    }

    /**
     * Create a list of supporting documents on a portout request
     *
     * Creates a list of supporting documents on a portout request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPortRequestSupportingDocumentsTest() throws ApiException {
        //UUID id = null;
        //PostPortRequestSupportingDocumentsRequest postPortRequestSupportingDocumentsRequest = null;
        //GetPortRequestSupportingDocuments201Response response = api.postPortRequestSupportingDocuments(id, postPortRequestSupportingDocumentsRequest);
        // TODO: test validations
    }

    /**
     * Republish a port-out event
     *
     * Republish a specific port-out event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void republishPortoutEventTest() throws ApiException {
        //UUID id = null;
        //api.republishPortoutEvent(id);
        // TODO: test validations
    }

    /**
     * Show a port-out event
     *
     * Show a specific port-out event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void showPortoutEventTest() throws ApiException {
        //UUID id = null;
        //ShowPortoutEvent200Response response = api.showPortoutEvent(id);
        // TODO: test validations
    }

    /**
     * Update Status
     *
     * Authorize or reject portout request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortoutStatusTest() throws ApiException {
        //UUID id = null;
        //String status = null;
        //UpdatePortoutStatusRequest updatePortoutStatusRequest = null;
        //FindPortoutRequest200Response response = api.updatePortoutStatus(id, status, updatePortoutStatusRequest);
        // TODO: test validations
    }

}
