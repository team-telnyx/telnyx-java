/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.api;

import com.telnyx.sdk.*;
import com.telnyx.sdk.auth.*;
import com.telnyx.sdk.model.Comment;
import com.telnyx.sdk.model.CreateComment200Response;
import com.telnyx.sdk.model.CreateNumberOrderRequest;
import com.telnyx.sdk.model.Errors;
import com.telnyx.sdk.model.ListComments200Response;
import com.telnyx.sdk.model.ListNumberOrderPhoneNumbersResponse;
import com.telnyx.sdk.model.ListNumberOrdersResponse;
import com.telnyx.sdk.model.ListSubNumberOrdersResponse;
import com.telnyx.sdk.model.NumberOrderPhoneNumberResponse;
import com.telnyx.sdk.model.NumberOrderResponse;
import com.telnyx.sdk.model.SubNumberOrderResponse;
import java.util.UUID;
import com.telnyx.sdk.model.UpdateNumberOrderPhoneNumberRequest;
import com.telnyx.sdk.model.UpdateNumberOrderRequest;
import com.telnyx.sdk.model.UpdateSubNumberOrderRequest;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PhoneNumberOrdersApi
 */
public class PhoneNumberOrdersApiTest {

    private final PhoneNumberOrdersApi api = new PhoneNumberOrdersApi();

    /**
     * Cancel a sub number order
     *
     * Allows you to cancel a sub number order in &#39;pending&#39; status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelSubNumberOrderTest() throws ApiException {
        //String subNumberOrderId = null;
        //SubNumberOrderResponse response = api.cancelSubNumberOrder(subNumberOrderId);
        // TODO: test validations
    }

    /**
     * Create a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        //Comment comment = null;
        //CreateComment200Response response = api.createComment(comment);
        // TODO: test validations
    }

    /**
     * Create a number order
     *
     * Creates a phone number order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNumberOrderTest() throws ApiException {
        //CreateNumberOrderRequest createNumberOrderRequest = null;
        //NumberOrderResponse response = api.createNumberOrder(createNumberOrderRequest);
        // TODO: test validations
    }

    /**
     * Retrieve a single phone number within a number order.
     *
     * Get an existing phone number in number order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNumberOrderPhoneNumberTest() throws ApiException {
        //String numberOrderPhoneNumberId = null;
        //NumberOrderPhoneNumberResponse response = api.getNumberOrderPhoneNumber(numberOrderPhoneNumberId);
        // TODO: test validations
    }

    /**
     * Retrieve a sub number order
     *
     * Get an existing sub number order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubNumberOrderTest() throws ApiException {
        //String subNumberOrderId = null;
        //Boolean filterIncludePhoneNumbers = null;
        //SubNumberOrderResponse response = api.getSubNumberOrder(subNumberOrderId, filterIncludePhoneNumbers);
        // TODO: test validations
    }

    /**
     * Retrieve all comments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCommentsTest() throws ApiException {
        //String filterCommentRecordType = null;
        //String filterCommentRecordId = null;
        //ListComments200Response response = api.listComments(filterCommentRecordType, filterCommentRecordId);
        // TODO: test validations
    }

    /**
     * List number orders
     *
     * Get a paginated list of number orders.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNumberOrdersTest() throws ApiException {
        //String filterStatus = null;
        //String filterCreatedAtGt = null;
        //String filterCreatedAtLt = null;
        //String filterPhoneNumbersCount = null;
        //String filterCustomerReference = null;
        //Boolean filterRequirementsMet = null;
        //Integer pageNumber = null;
        //Integer pageSize = null;
        //ListNumberOrdersResponse response = api.listNumberOrders()
        //        .filterStatus(filterStatus)
        //        .filterCreatedAtGt(filterCreatedAtGt)
        //        .filterCreatedAtLt(filterCreatedAtLt)
        //        .filterPhoneNumbersCount(filterPhoneNumbersCount)
        //        .filterCustomerReference(filterCustomerReference)
        //        .filterRequirementsMet(filterRequirementsMet)
        //        .pageNumber(pageNumber)
        //        .pageSize(pageSize)
        //        .execute();
        // TODO: test validations
    }

    /**
     * List sub number orders
     *
     * Get a paginated list of sub number orders.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSubNumberOrdersTest() throws ApiException {
        //String filterStatus = null;
        //UUID filterOrderRequestId = null;
        //String filterCountryCode = null;
        //String filterPhoneNumberType = null;
        //Integer filterPhoneNumbersCount = null;
        //ListSubNumberOrdersResponse response = api.listSubNumberOrders()
        //        .filterStatus(filterStatus)
        //        .filterOrderRequestId(filterOrderRequestId)
        //        .filterCountryCode(filterCountryCode)
        //        .filterPhoneNumberType(filterPhoneNumberType)
        //        .filterPhoneNumbersCount(filterPhoneNumbersCount)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Mark a comment as read
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markCommentReadTest() throws ApiException {
        //String id = null;
        //CreateComment200Response response = api.markCommentRead(id);
        // TODO: test validations
    }

    /**
     * Retrieve a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCommentTest() throws ApiException {
        //String id = null;
        //CreateComment200Response response = api.retrieveComment(id);
        // TODO: test validations
    }

    /**
     * Retrieve a number order
     *
     * Get an existing phone number order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveNumberOrderTest() throws ApiException {
        //String numberOrderId = null;
        //NumberOrderResponse response = api.retrieveNumberOrder(numberOrderId);
        // TODO: test validations
    }

    /**
     * Retrieve a list of phone numbers associated to orders
     *
     * Get a list of phone numbers associated to orders.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveOrderPhoneNumbersTest() throws ApiException {
        //String filterCountryCode = null;
        //ListNumberOrderPhoneNumbersResponse response = api.retrieveOrderPhoneNumbers(filterCountryCode);
        // TODO: test validations
    }

    /**
     * Update a number order
     *
     * Updates a phone number order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNumberOrderTest() throws ApiException {
        //String numberOrderId = null;
        //UpdateNumberOrderRequest updateNumberOrderRequest = null;
        //NumberOrderResponse response = api.updateNumberOrder(numberOrderId, updateNumberOrderRequest);
        // TODO: test validations
    }

    /**
     * Update requirements for a single phone number within a number order.
     *
     * Updates requirements for a single phone number within a number order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNumberOrderPhoneNumberTest() throws ApiException {
        //String numberOrderPhoneNumberId = null;
        //UpdateNumberOrderPhoneNumberRequest updateNumberOrderPhoneNumberRequest = null;
        //NumberOrderPhoneNumberResponse response = api.updateNumberOrderPhoneNumber(numberOrderPhoneNumberId, updateNumberOrderPhoneNumberRequest);
        // TODO: test validations
    }

    /**
     * Update a sub number order&#39;s requirements
     *
     * Updates a sub number order.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubNumberOrderTest() throws ApiException {
        //String subNumberOrderId = null;
        //UpdateSubNumberOrderRequest updateSubNumberOrderRequest = null;
        //SubNumberOrderResponse response = api.updateSubNumberOrder(subNumberOrderId, updateSubNumberOrderRequest);
        // TODO: test validations
    }

}
