/*
 * Telnyx API
 * SIP trunking, SMS, MMS, Call Control and Telephony Data Services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@telnyx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telnyx.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.telnyx.sdk.model.RCSCardContent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.telnyx.sdk.JSON;


/**
 * Carousel of cards.
 */
@ApiModel(description = "Carousel of cards.")
@JsonPropertyOrder({
  RCSCarouselCard.JSON_PROPERTY_CARD_WIDTH,
  RCSCarouselCard.JSON_PROPERTY_CARD_CONTENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class RCSCarouselCard {
  /**
   * The width of the cards in the carousel.
   */
  public enum CardWidthEnum {
    CARD_WIDTH_UNSPECIFIED(String.valueOf("CARD_WIDTH_UNSPECIFIED")),
    
    SMALL(String.valueOf("SMALL")),
    
    MEDIUM(String.valueOf("MEDIUM"));

    private String value;

    CardWidthEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CardWidthEnum fromValue(String value) {
      for (CardWidthEnum b : CardWidthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CARD_WIDTH = "card_width";
  private CardWidthEnum cardWidth;

  public static final String JSON_PROPERTY_CARD_CONTENTS = "card_contents";
  private List<RCSCardContent> cardContents = new ArrayList<>();

  public RCSCarouselCard() { 
  }

  public RCSCarouselCard cardWidth(CardWidthEnum cardWidth) {
    this.cardWidth = cardWidth;
    return this;
  }

   /**
   * The width of the cards in the carousel.
   * @return cardWidth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SMALL", required = true, value = "The width of the cards in the carousel.")
  @JsonProperty(JSON_PROPERTY_CARD_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CardWidthEnum getCardWidth() {
    return cardWidth;
  }


  @JsonProperty(JSON_PROPERTY_CARD_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCardWidth(CardWidthEnum cardWidth) {
    this.cardWidth = cardWidth;
  }


  public RCSCarouselCard cardContents(List<RCSCardContent> cardContents) {
    this.cardContents = cardContents;
    return this;
  }

  public RCSCarouselCard addcardContentsItem(RCSCardContent cardContentsItem) {
    this.cardContents.add(cardContentsItem);
    return this;
  }

   /**
   * The list of contents for each card in the carousel. A carousel can have a minimum of 2 cards and a maximum 10 cards.
   * @return cardContents
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of contents for each card in the carousel. A carousel can have a minimum of 2 cards and a maximum 10 cards.")
  @JsonProperty(JSON_PROPERTY_CARD_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<RCSCardContent> getCardContents() {
    return cardContents;
  }


  @JsonProperty(JSON_PROPERTY_CARD_CONTENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCardContents(List<RCSCardContent> cardContents) {
    this.cardContents = cardContents;
  }


  /**
   * Return true if this RCSCarouselCard object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RCSCarouselCard rcSCarouselCard = (RCSCarouselCard) o;
    return Objects.equals(this.cardWidth, rcSCarouselCard.cardWidth) &&
        Objects.equals(this.cardContents, rcSCarouselCard.cardContents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardWidth, cardContents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RCSCarouselCard {\n");
    sb.append("    cardWidth: ").append(toIndentedString(cardWidth)).append("\n");
    sb.append("    cardContents: ").append(toIndentedString(cardContents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

